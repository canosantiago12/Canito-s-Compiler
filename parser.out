Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BINOMIAL
    FOR
    MEAN
    MEDIAN
    MODE
    PLOT
    POISSON
    STANDARD_DEVIATION
    VARIANCE

Grammar

Rule 0     S' -> program_main
Rule 1     program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
Rule 2     globalVariables -> vars addMemoryInfo
Rule 3     globalVariables -> empty
Rule 4     globalFunctions -> funcs
Rule 5     globalFunctions -> empty
Rule 6     vars -> auxVars
Rule 7     auxVars -> VAR type vars_type_single
Rule 8     auxVars -> VAR type vars_type_array
Rule 9     auxVars -> VAR type vars_type_matrix
Rule 10    auxVars -> empty
Rule 11    vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single
Rule 12    vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars
Rule 13    vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
Rule 14    vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
Rule 15    vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
Rule 16    vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars
Rule 17    funcs -> funcs_aux globalFunctions
Rule 18    funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 19    funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 20    params -> auxParams
Rule 21    params -> empty
Rule 22    auxParams -> type CTE_ID addParam multipleParams
Rule 23    multipleParams -> COMMA auxParams
Rule 24    multipleParams -> empty
Rule 25    funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET
Rule 26    auxFuncBody -> vars statements auxFuncBody
Rule 27    auxFuncBody -> statements auxFuncBody
Rule 28    auxFuncBody -> vars
Rule 29    auxFuncBody -> empty
Rule 30    type -> INT setCurrentType
Rule 31    type -> FLOAT setCurrentType
Rule 32    type -> BOOL setCurrentType
Rule 33    type -> STRING setCurrentType
Rule 34    statements -> assignment
Rule 35    statements -> writting
Rule 36    statements -> reading
Rule 37    statements -> if
Rule 38    statements -> while
Rule 39    statements -> auxFuncCall
Rule 40    statements -> return
Rule 41    assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
Rule 42    writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
Rule 43    auxWritting -> logicExpression doWrite multipleWrite
Rule 44    auxWritting -> CTE_STRING doWriteString multipleWrite
Rule 45    multipleWrite -> COMMA auxWritting
Rule 46    multipleWrite -> empty
Rule 47    reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
Rule 48    auxReading -> CTE_ID addOperand doReading multipleRead
Rule 49    multipleRead -> COMMA auxReading
Rule 50    multipleRead -> empty
Rule 51    logicExpression -> exp doLogicExpression auxLogicExpression
Rule 52    auxLogicExpression -> AND addOperator logicExpression
Rule 53    auxLogicExpression -> OR addOperator logicExpression
Rule 54    auxLogicExpression -> empty
Rule 55    exp -> exp2 doCompExpression auxExp
Rule 56    auxExp -> GREATER_THAN addOperator exp
Rule 57    auxExp -> GREATER_EQUAL_THAN addOperator exp
Rule 58    auxExp -> LESS_THAN addOperator exp
Rule 59    auxExp -> LESS_EQUAL_THAN addOperator exp
Rule 60    auxExp -> NOT_EQUALS addOperator exp
Rule 61    auxExp -> EQUALS addOperator exp
Rule 62    auxExp -> empty
Rule 63    exp2 -> term doExpression exp2Aux
Rule 64    exp2Aux -> PLUS addOperator exp2
Rule 65    exp2Aux -> MINUS addOperator exp2
Rule 66    exp2Aux -> empty
Rule 67    term -> factor doTerm auxTerm
Rule 68    auxTerm -> TIMES addOperator term
Rule 69    auxTerm -> DIV addOperator term
Rule 70    auxTerm -> MOD addOperator term
Rule 71    auxTerm -> EXP addOperator term
Rule 72    auxTerm -> empty
Rule 73    factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
Rule 74    factor -> constants
Rule 75    constants -> CTE_ID addOperand
Rule 76    constants -> CTE_INT addConstantOperand
Rule 77    constants -> CTE_FLOAT addConstantOperand
Rule 78    constants -> CTE_STRING addConstantOperand
Rule 79    constants -> TRUE addConstantBool
Rule 80    constants -> FALSE addConstantBool
Rule 81    constants -> functionCall
Rule 82    if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
Rule 83    else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
Rule 84    else -> ELSE doElse funcBody
Rule 85    else -> empty
Rule 86    while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
Rule 87    functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
Rule 88    auxFuncCall -> functionCall SEMI_COLON
Rule 89    arguments -> auxArguments
Rule 90    arguments -> empty
Rule 91    auxArguments -> logicExpression checkType multipleArguments
Rule 92    multipleArguments -> COMMA auxArguments
Rule 93    multipleArguments -> empty
Rule 94    return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
Rule 95    auxReturn -> logicExpression doReturn
Rule 96    auxReturn -> empty
Rule 97    startup -> <empty>
Rule 98    setMain -> <empty>
Rule 99    endProgram -> <empty>
Rule 100   endPrint -> <empty>
Rule 101   saveFuncID -> <empty>
Rule 102   addParam -> <empty>
Rule 103   addMemoryInfo -> <empty>
Rule 104   endFunction -> <empty>
Rule 105   saveVariableID -> <empty>
Rule 106   saveArray -> <empty>
Rule 107   saveMat -> <empty>
Rule 108   setCurrentType -> <empty>
Rule 109   addOperand -> <empty>
Rule 110   addConstantOperand -> <empty>
Rule 111   addConstantBool -> <empty>
Rule 112   addOperator -> <empty>
Rule 113   addParenthesis -> <empty>
Rule 114   removeParenthesis -> <empty>
Rule 115   doLogicExpression -> <empty>
Rule 116   doCompExpression -> <empty>
Rule 117   doExpression -> <empty>
Rule 118   doTerm -> <empty>
Rule 119   doAssign -> <empty>
Rule 120   doWrite -> <empty>
Rule 121   doWriteString -> <empty>
Rule 122   doReading -> <empty>
Rule 123   doIF -> <empty>
Rule 124   endIF -> <empty>
Rule 125   doElse -> <empty>
Rule 126   doWhile -> <empty>
Rule 127   endWhile -> <empty>
Rule 128   addCondStart -> <empty>
Rule 129   doFuncCall -> <empty>
Rule 130   setVoidType -> <empty>
Rule 131   checkParams -> <empty>
Rule 132   checkType -> <empty>
Rule 133   doReturn -> <empty>
Rule 134   doGoSub -> <empty>
Rule 135   empty -> <empty>

Terminals, with rules where they appear

AND                  : 52
BINOMIAL             : 
BOOL                 : 32
BTSProgam            : 1
COMMA                : 11 13 15 23 45 49 92
CTE_FLOAT            : 77
CTE_ID               : 1 11 12 13 14 15 16 18 19 22 41 48 75 87
CTE_INT              : 13 14 15 15 16 16 76
CTE_STRING           : 44 78
DIV                  : 69
ELSE                 : 83 84
EQUAL                : 41
EQUALS               : 61
EXP                  : 71
FALSE                : 80
FLOAT                : 31
FOR                  : 
FUNC                 : 18 19
GREATER_EQUAL_THAN   : 57
GREATER_THAN         : 56
IF                   : 82 83
INT                  : 30
LEFT_BRACKET         : 13 14 15 15 16 16
LEFT_CURLY_BRACKET   : 25
LEFT_PAREN           : 1 18 19 42 47 73 82 83 86 87 94
LESS_EQUAL_THAN      : 59
LESS_THAN            : 58
MAIN                 : 1
MEAN                 : 
MEDIAN               : 
MINUS                : 65
MOD                  : 70
MODE                 : 
NOT_EQUALS           : 60
OR                   : 53
PLOT                 : 
PLUS                 : 64
POISSON              : 
PRINT                : 42
READ_INPUT           : 47
RETURN               : 94
RETURN_SIGN          : 94
RIGHT_BRACKET        : 13 14 15 15 16 16
RIGHT_CURLY_BRACKET  : 25
RIGHT_PAREN          : 1 18 19 42 47 73 82 83 86 87 94
SEMI_COLON           : 1 12 14 16 41 42 47 88 94
STANDARD_DEVIATION   : 
STRING               : 33
TIMES                : 68
TRUE                 : 79
VAR                  : 7 8 9
VARIANCE             : 
WHILE                : 86
error                : 

Nonterminals, with rules where they appear

addCondStart         : 86
addConstantBool      : 79 80
addConstantOperand   : 13 14 15 15 16 16 76 77 78
addMemoryInfo        : 1 2 18 19
addOperand           : 41 48 75
addOperator          : 41 52 53 56 57 58 59 60 61 64 65 68 69 70 71
addParam             : 22
addParenthesis       : 73
arguments            : 87
assignment           : 34
auxArguments         : 89 92
auxExp               : 55
auxFuncBody          : 25 26 27
auxFuncCall          : 39
auxLogicExpression   : 51
auxParams            : 20 23
auxReading           : 47 49
auxReturn            : 94
auxTerm              : 67
auxVars              : 6 12 14 16
auxWritting          : 42 45
checkParams          : 87
checkType            : 91
constants            : 74
doAssign             : 41
doCompExpression     : 55
doElse               : 83 84
doExpression         : 63
doFuncCall           : 87
doGoSub              : 87
doIF                 : 82 83
doLogicExpression    : 51
doReading            : 48
doReturn             : 95
doTerm               : 67
doWhile              : 86
doWrite              : 43
doWriteString        : 44
else                 : 82 83
empty                : 3 5 10 21 24 29 46 50 54 62 66 72 85 90 93 96
endFunction          : 1 18 19
endIF                : 82 83
endPrint             : 1
endProgram           : 1
endWhile             : 86
exp                  : 51 56 57 58 59 60 61
exp2                 : 55 64 65
exp2Aux              : 63
factor               : 67
funcBody             : 1 18 19 82 83 84 86
funcs                : 4
funcs_aux            : 17
functionCall         : 81 88
globalFunctions      : 1 17
globalVariables      : 1
if                   : 37
logicExpression      : 41 43 52 53 73 82 83 86 91 95
multipleArguments    : 91
multipleParams       : 22
multipleRead         : 48
multipleWrite        : 43 44
params               : 18 19
program_main         : 0
reading              : 36
removeParenthesis    : 73
return               : 40
saveArray            : 13 14
saveFuncID           : 1 18 19
saveMat              : 15 16
saveVariableID       : 11 12 13 14 15 16
setCurrentType       : 30 31 32 33
setMain              : 1
setVoidType          : 19
startup              : 1
statements           : 26 27
term                 : 63 68 69 70 71
type                 : 7 8 9 18 22
vars                 : 2 26 28
vars_type_array      : 8 13
vars_type_matrix     : 9 15
vars_type_single     : 7 11
while                : 38
writting             : 35

Parsing method: LALR

state 0

    (0) S' -> . program_main
    (1) program_main -> . BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    BTSProgam       shift and go to state 2

    program_main                   shift and go to state 1

state 1

    (0) S' -> program_main .



state 2

    (1) program_main -> BTSProgam . CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    CTE_ID          shift and go to state 3


state 3

    (1) program_main -> BTSProgam CTE_ID . startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (97) startup -> .

    SEMI_COLON      reduce using rule 97 (startup -> .)

    startup                        shift and go to state 4

state 4

    (1) program_main -> BTSProgam CTE_ID startup . SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    SEMI_COLON      shift and go to state 5


state 5

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON . globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (2) globalVariables -> . vars addMemoryInfo
    (3) globalVariables -> . empty
    (6) vars -> . auxVars
    (135) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty

    FUNC            reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)
    VAR             shift and go to state 10

    globalVariables                shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8
    auxVars                        shift and go to state 9

state 6

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables . globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (17) funcs -> . funcs_aux globalFunctions
    (135) empty -> .
    (18) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (19) funcs_aux -> . FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 135 (empty -> .)
    FUNC            shift and go to state 15

    globalFunctions                shift and go to state 11
    funcs                          shift and go to state 12
    empty                          shift and go to state 13
    funcs_aux                      shift and go to state 14

state 7

    (2) globalVariables -> vars . addMemoryInfo
    (103) addMemoryInfo -> .

    FUNC            reduce using rule 103 (addMemoryInfo -> .)
    MAIN            reduce using rule 103 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 16

state 8

    (3) globalVariables -> empty .
    (10) auxVars -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 3 (globalVariables -> empty .)
  ! reduce/reduce conflict for MAIN resolved using rule 3 (globalVariables -> empty .)
    FUNC            reduce using rule 3 (globalVariables -> empty .)
    MAIN            reduce using rule 3 (globalVariables -> empty .)

  ! FUNC            [ reduce using rule 10 (auxVars -> empty .) ]
  ! MAIN            [ reduce using rule 10 (auxVars -> empty .) ]


state 9

    (6) vars -> auxVars .

    FUNC            reduce using rule 6 (vars -> auxVars .)
    MAIN            reduce using rule 6 (vars -> auxVars .)
    CTE_ID          reduce using rule 6 (vars -> auxVars .)
    PRINT           reduce using rule 6 (vars -> auxVars .)
    READ_INPUT      reduce using rule 6 (vars -> auxVars .)
    IF              reduce using rule 6 (vars -> auxVars .)
    WHILE           reduce using rule 6 (vars -> auxVars .)
    RETURN          reduce using rule 6 (vars -> auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (vars -> auxVars .)


state 10

    (7) auxVars -> VAR . type vars_type_single
    (8) auxVars -> VAR . type vars_type_array
    (9) auxVars -> VAR . type vars_type_matrix
    (30) type -> . INT setCurrentType
    (31) type -> . FLOAT setCurrentType
    (32) type -> . BOOL setCurrentType
    (33) type -> . STRING setCurrentType

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 17

state 11

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions . MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    MAIN            shift and go to state 22


state 12

    (4) globalFunctions -> funcs .

    MAIN            reduce using rule 4 (globalFunctions -> funcs .)


state 13

    (5) globalFunctions -> empty .

    MAIN            reduce using rule 5 (globalFunctions -> empty .)


state 14

    (17) funcs -> funcs_aux . globalFunctions
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (17) funcs -> . funcs_aux globalFunctions
    (135) empty -> .
    (18) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (19) funcs_aux -> . FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 135 (empty -> .)
    FUNC            shift and go to state 15

    funcs_aux                      shift and go to state 14
    globalFunctions                shift and go to state 23
    funcs                          shift and go to state 12
    empty                          shift and go to state 13

state 15

    (18) funcs_aux -> FUNC . type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (19) funcs_aux -> FUNC . CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (30) type -> . INT setCurrentType
    (31) type -> . FLOAT setCurrentType
    (32) type -> . BOOL setCurrentType
    (33) type -> . STRING setCurrentType

    CTE_ID          shift and go to state 25
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 24

state 16

    (2) globalVariables -> vars addMemoryInfo .

    FUNC            reduce using rule 2 (globalVariables -> vars addMemoryInfo .)
    MAIN            reduce using rule 2 (globalVariables -> vars addMemoryInfo .)


state 17

    (7) auxVars -> VAR type . vars_type_single
    (8) auxVars -> VAR type . vars_type_array
    (9) auxVars -> VAR type . vars_type_matrix
    (11) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (12) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars
    (13) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (15) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    CTE_ID          shift and go to state 29

    vars_type_single               shift and go to state 26
    vars_type_array                shift and go to state 27
    vars_type_matrix               shift and go to state 28

state 18

    (30) type -> INT . setCurrentType
    (108) setCurrentType -> .

    CTE_ID          reduce using rule 108 (setCurrentType -> .)

    setCurrentType                 shift and go to state 30

state 19

    (31) type -> FLOAT . setCurrentType
    (108) setCurrentType -> .

    CTE_ID          reduce using rule 108 (setCurrentType -> .)

    setCurrentType                 shift and go to state 31

state 20

    (32) type -> BOOL . setCurrentType
    (108) setCurrentType -> .

    CTE_ID          reduce using rule 108 (setCurrentType -> .)

    setCurrentType                 shift and go to state 32

state 21

    (33) type -> STRING . setCurrentType
    (108) setCurrentType -> .

    CTE_ID          reduce using rule 108 (setCurrentType -> .)

    setCurrentType                 shift and go to state 33

state 22

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN . saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (101) saveFuncID -> .

    LEFT_PAREN      reduce using rule 101 (saveFuncID -> .)

    saveFuncID                     shift and go to state 34

state 23

    (17) funcs -> funcs_aux globalFunctions .

    MAIN            reduce using rule 17 (funcs -> funcs_aux globalFunctions .)


state 24

    (18) funcs_aux -> FUNC type . CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    CTE_ID          shift and go to state 35


state 25

    (19) funcs_aux -> FUNC CTE_ID . saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (101) saveFuncID -> .

    LEFT_PAREN      reduce using rule 101 (saveFuncID -> .)

    saveFuncID                     shift and go to state 36

state 26

    (7) auxVars -> VAR type vars_type_single .

    FUNC            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    MAIN            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    CTE_ID          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    PRINT           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    READ_INPUT      reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    IF              reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    WHILE           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    RETURN          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (auxVars -> VAR type vars_type_single .)


state 27

    (8) auxVars -> VAR type vars_type_array .

    FUNC            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    MAIN            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    CTE_ID          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    PRINT           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    READ_INPUT      reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    IF              reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    WHILE           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    RETURN          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (auxVars -> VAR type vars_type_array .)


state 28

    (9) auxVars -> VAR type vars_type_matrix .

    FUNC            reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    MAIN            reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    CTE_ID          reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    PRINT           reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    READ_INPUT      reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    IF              reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    WHILE           reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    RETURN          reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)


state 29

    (11) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (12) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (13) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars
    (105) saveVariableID -> .

    COMMA           reduce using rule 105 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 105 (saveVariableID -> .)
    LEFT_BRACKET    reduce using rule 105 (saveVariableID -> .)

    saveVariableID                 shift and go to state 37

state 30

    (30) type -> INT setCurrentType .

    CTE_ID          reduce using rule 30 (type -> INT setCurrentType .)


state 31

    (31) type -> FLOAT setCurrentType .

    CTE_ID          reduce using rule 31 (type -> FLOAT setCurrentType .)


state 32

    (32) type -> BOOL setCurrentType .

    CTE_ID          reduce using rule 32 (type -> BOOL setCurrentType .)


state 33

    (33) type -> STRING setCurrentType .

    CTE_ID          reduce using rule 33 (type -> STRING setCurrentType .)


state 34

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID . addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (103) addMemoryInfo -> .

    LEFT_PAREN      reduce using rule 103 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 38

state 35

    (18) funcs_aux -> FUNC type CTE_ID . saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (101) saveFuncID -> .

    LEFT_PAREN      reduce using rule 101 (saveFuncID -> .)

    saveFuncID                     shift and go to state 39

state 36

    (19) funcs_aux -> FUNC CTE_ID saveFuncID . setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (130) setVoidType -> .

    LEFT_PAREN      reduce using rule 130 (setVoidType -> .)

    setVoidType                    shift and go to state 40

state 37

    (11) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (12) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars
    (13) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    COMMA           shift and go to state 41
    SEMI_COLON      shift and go to state 42
    LEFT_BRACKET    shift and go to state 43


state 38

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo . LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    LEFT_PAREN      shift and go to state 44


state 39

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 45


state 40

    (19) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 46


state 41

    (11) vars_type_single -> CTE_ID saveVariableID COMMA . vars_type_single
    (11) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (12) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars

    CTE_ID          shift and go to state 47

    vars_type_single               shift and go to state 48

state 42

    (12) vars_type_single -> CTE_ID saveVariableID SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (135) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)
    CTE_ID          reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ_INPUT      reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)

    auxVars                        shift and go to state 49
    empty                          shift and go to state 50

state 43

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    CTE_INT         shift and go to state 51


state 44

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN . RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    RIGHT_PAREN     shift and go to state 52


state 45

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (20) params -> . auxParams
    (21) params -> . empty
    (22) auxParams -> . type CTE_ID addParam multipleParams
    (135) empty -> .
    (30) type -> . INT setCurrentType
    (31) type -> . FLOAT setCurrentType
    (32) type -> . BOOL setCurrentType
    (33) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 53
    params                         shift and go to state 54
    auxParams                      shift and go to state 55
    empty                          shift and go to state 56

state 46

    (19) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (20) params -> . auxParams
    (21) params -> . empty
    (22) auxParams -> . type CTE_ID addParam multipleParams
    (135) empty -> .
    (30) type -> . INT setCurrentType
    (31) type -> . FLOAT setCurrentType
    (32) type -> . BOOL setCurrentType
    (33) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    params                         shift and go to state 57
    auxParams                      shift and go to state 55
    empty                          shift and go to state 56
    type                           shift and go to state 53

state 47

    (11) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (12) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (105) saveVariableID -> .

    COMMA           reduce using rule 105 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 105 (saveVariableID -> .)

    saveVariableID                 shift and go to state 58

state 48

    (11) vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .

    FUNC            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    MAIN            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    CTE_ID          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    PRINT           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    READ_INPUT      reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    IF              reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    WHILE           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    RETURN          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)


state 49

    (12) vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .

    FUNC            reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    MAIN            reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    PRINT           reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    IF              reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    WHILE           reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    RETURN          reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)


state 50

    (10) auxVars -> empty .

    FUNC            reduce using rule 10 (auxVars -> empty .)
    MAIN            reduce using rule 10 (auxVars -> empty .)
    CTE_ID          reduce using rule 10 (auxVars -> empty .)
    PRINT           reduce using rule 10 (auxVars -> empty .)
    READ_INPUT      reduce using rule 10 (auxVars -> empty .)
    IF              reduce using rule 10 (auxVars -> empty .)
    WHILE           reduce using rule 10 (auxVars -> empty .)
    RETURN          reduce using rule 10 (auxVars -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (auxVars -> empty .)


state 51

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars
    (110) addConstantOperand -> .

    RIGHT_BRACKET   reduce using rule 110 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 59

state 52

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN . setMain funcBody endFunction endProgram endPrint
    (98) setMain -> .

    LEFT_CURLY_BRACKET reduce using rule 98 (setMain -> .)

    setMain                        shift and go to state 60

state 53

    (22) auxParams -> type . CTE_ID addParam multipleParams

    CTE_ID          shift and go to state 61


state 54

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 62


state 55

    (20) params -> auxParams .

    RIGHT_PAREN     reduce using rule 20 (params -> auxParams .)


state 56

    (21) params -> empty .

    RIGHT_PAREN     reduce using rule 21 (params -> empty .)


state 57

    (19) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 63


state 58

    (11) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (12) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars

    COMMA           shift and go to state 41
    SEMI_COLON      shift and go to state 42


state 59

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 64


state 60

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain . funcBody endFunction endProgram endPrint
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 66

    funcBody                       shift and go to state 65

state 61

    (22) auxParams -> type CTE_ID . addParam multipleParams
    (102) addParam -> .

    COMMA           reduce using rule 102 (addParam -> .)
    RIGHT_PAREN     reduce using rule 102 (addParam -> .)

    addParam                       shift and go to state 67

state 62

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 66

    funcBody                       shift and go to state 68

state 63

    (19) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 66

    funcBody                       shift and go to state 69

state 64

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars
    (106) saveArray -> .

    LEFT_BRACKET    shift and go to state 70
    COMMA           reduce using rule 106 (saveArray -> .)
    SEMI_COLON      reduce using rule 106 (saveArray -> .)

    saveArray                      shift and go to state 71

state 65

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody . endFunction endProgram endPrint
    (104) endFunction -> .

    $end            reduce using rule 104 (endFunction -> .)

    endFunction                    shift and go to state 72

state 66

    (25) funcBody -> LEFT_CURLY_BRACKET . auxFuncBody RIGHT_CURLY_BRACKET
    (26) auxFuncBody -> . vars statements auxFuncBody
    (27) auxFuncBody -> . statements auxFuncBody
    (28) auxFuncBody -> . vars
    (29) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (34) statements -> . assignment
    (35) statements -> . writting
    (36) statements -> . reading
    (37) statements -> . if
    (38) statements -> . while
    (39) statements -> . auxFuncCall
    (40) statements -> . return
    (135) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (41) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (88) auxFuncCall -> . functionCall SEMI_COLON
    (94) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 84
    PRINT           shift and go to state 85
    READ_INPUT      shift and go to state 86
    IF              shift and go to state 87
    WHILE           shift and go to state 88
    RETURN          shift and go to state 90

  ! CTE_ID          [ reduce using rule 135 (empty -> .) ]
  ! PRINT           [ reduce using rule 135 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    auxFuncBody                    shift and go to state 73
    vars                           shift and go to state 74
    statements                     shift and go to state 75
    empty                          shift and go to state 76
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    auxFuncCall                    shift and go to state 82
    return                         shift and go to state 83
    functionCall                   shift and go to state 89

state 67

    (22) auxParams -> type CTE_ID addParam . multipleParams
    (23) multipleParams -> . COMMA auxParams
    (24) multipleParams -> . empty
    (135) empty -> .

    COMMA           shift and go to state 92
    RIGHT_PAREN     reduce using rule 135 (empty -> .)

    multipleParams                 shift and go to state 91
    empty                          shift and go to state 93

state 68

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (103) addMemoryInfo -> .

    FUNC            reduce using rule 103 (addMemoryInfo -> .)
    MAIN            reduce using rule 103 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 94

state 69

    (19) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (103) addMemoryInfo -> .

    FUNC            reduce using rule 103 (addMemoryInfo -> .)
    MAIN            reduce using rule 103 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 95

state 70

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    CTE_INT         shift and go to state 96


state 71

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray . COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray . SEMI_COLON auxVars

    COMMA           shift and go to state 97
    SEMI_COLON      shift and go to state 98


state 72

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction . endProgram endPrint
    (99) endProgram -> .

    $end            reduce using rule 99 (endProgram -> .)

    endProgram                     shift and go to state 99

state 73

    (25) funcBody -> LEFT_CURLY_BRACKET auxFuncBody . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 100


state 74

    (26) auxFuncBody -> vars . statements auxFuncBody
    (28) auxFuncBody -> vars .
    (34) statements -> . assignment
    (35) statements -> . writting
    (36) statements -> . reading
    (37) statements -> . if
    (38) statements -> . while
    (39) statements -> . auxFuncCall
    (40) statements -> . return
    (41) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (88) auxFuncCall -> . functionCall SEMI_COLON
    (94) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    RIGHT_CURLY_BRACKET reduce using rule 28 (auxFuncBody -> vars .)
    CTE_ID          shift and go to state 84
    PRINT           shift and go to state 85
    READ_INPUT      shift and go to state 86
    IF              shift and go to state 87
    WHILE           shift and go to state 88
    RETURN          shift and go to state 90

    statements                     shift and go to state 101
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    auxFuncCall                    shift and go to state 82
    return                         shift and go to state 83
    functionCall                   shift and go to state 89

state 75

    (27) auxFuncBody -> statements . auxFuncBody
    (26) auxFuncBody -> . vars statements auxFuncBody
    (27) auxFuncBody -> . statements auxFuncBody
    (28) auxFuncBody -> . vars
    (29) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (34) statements -> . assignment
    (35) statements -> . writting
    (36) statements -> . reading
    (37) statements -> . if
    (38) statements -> . while
    (39) statements -> . auxFuncCall
    (40) statements -> . return
    (135) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (41) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (88) auxFuncCall -> . functionCall SEMI_COLON
    (94) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 84
    PRINT           shift and go to state 85
    READ_INPUT      shift and go to state 86
    IF              shift and go to state 87
    WHILE           shift and go to state 88
    RETURN          shift and go to state 90

  ! CTE_ID          [ reduce using rule 135 (empty -> .) ]
  ! PRINT           [ reduce using rule 135 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    statements                     shift and go to state 75
    auxFuncBody                    shift and go to state 102
    vars                           shift and go to state 74
    empty                          shift and go to state 76
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    auxFuncCall                    shift and go to state 82
    return                         shift and go to state 83
    functionCall                   shift and go to state 89

state 76

    (29) auxFuncBody -> empty .
    (10) auxVars -> empty .

  ! reduce/reduce conflict for RIGHT_CURLY_BRACKET resolved using rule 10 (auxVars -> empty .)
    CTE_ID          reduce using rule 10 (auxVars -> empty .)
    PRINT           reduce using rule 10 (auxVars -> empty .)
    READ_INPUT      reduce using rule 10 (auxVars -> empty .)
    IF              reduce using rule 10 (auxVars -> empty .)
    WHILE           reduce using rule 10 (auxVars -> empty .)
    RETURN          reduce using rule 10 (auxVars -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (auxVars -> empty .)

  ! RIGHT_CURLY_BRACKET [ reduce using rule 29 (auxFuncBody -> empty .) ]


state 77

    (34) statements -> assignment .

    VAR             reduce using rule 34 (statements -> assignment .)
    CTE_ID          reduce using rule 34 (statements -> assignment .)
    PRINT           reduce using rule 34 (statements -> assignment .)
    READ_INPUT      reduce using rule 34 (statements -> assignment .)
    IF              reduce using rule 34 (statements -> assignment .)
    WHILE           reduce using rule 34 (statements -> assignment .)
    RETURN          reduce using rule 34 (statements -> assignment .)
    RIGHT_CURLY_BRACKET reduce using rule 34 (statements -> assignment .)


state 78

    (35) statements -> writting .

    VAR             reduce using rule 35 (statements -> writting .)
    CTE_ID          reduce using rule 35 (statements -> writting .)
    PRINT           reduce using rule 35 (statements -> writting .)
    READ_INPUT      reduce using rule 35 (statements -> writting .)
    IF              reduce using rule 35 (statements -> writting .)
    WHILE           reduce using rule 35 (statements -> writting .)
    RETURN          reduce using rule 35 (statements -> writting .)
    RIGHT_CURLY_BRACKET reduce using rule 35 (statements -> writting .)


state 79

    (36) statements -> reading .

    VAR             reduce using rule 36 (statements -> reading .)
    CTE_ID          reduce using rule 36 (statements -> reading .)
    PRINT           reduce using rule 36 (statements -> reading .)
    READ_INPUT      reduce using rule 36 (statements -> reading .)
    IF              reduce using rule 36 (statements -> reading .)
    WHILE           reduce using rule 36 (statements -> reading .)
    RETURN          reduce using rule 36 (statements -> reading .)
    RIGHT_CURLY_BRACKET reduce using rule 36 (statements -> reading .)


state 80

    (37) statements -> if .

    VAR             reduce using rule 37 (statements -> if .)
    CTE_ID          reduce using rule 37 (statements -> if .)
    PRINT           reduce using rule 37 (statements -> if .)
    READ_INPUT      reduce using rule 37 (statements -> if .)
    IF              reduce using rule 37 (statements -> if .)
    WHILE           reduce using rule 37 (statements -> if .)
    RETURN          reduce using rule 37 (statements -> if .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (statements -> if .)


state 81

    (38) statements -> while .

    VAR             reduce using rule 38 (statements -> while .)
    CTE_ID          reduce using rule 38 (statements -> while .)
    PRINT           reduce using rule 38 (statements -> while .)
    READ_INPUT      reduce using rule 38 (statements -> while .)
    IF              reduce using rule 38 (statements -> while .)
    WHILE           reduce using rule 38 (statements -> while .)
    RETURN          reduce using rule 38 (statements -> while .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (statements -> while .)


state 82

    (39) statements -> auxFuncCall .

    VAR             reduce using rule 39 (statements -> auxFuncCall .)
    CTE_ID          reduce using rule 39 (statements -> auxFuncCall .)
    PRINT           reduce using rule 39 (statements -> auxFuncCall .)
    READ_INPUT      reduce using rule 39 (statements -> auxFuncCall .)
    IF              reduce using rule 39 (statements -> auxFuncCall .)
    WHILE           reduce using rule 39 (statements -> auxFuncCall .)
    RETURN          reduce using rule 39 (statements -> auxFuncCall .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (statements -> auxFuncCall .)


state 83

    (40) statements -> return .

    VAR             reduce using rule 40 (statements -> return .)
    CTE_ID          reduce using rule 40 (statements -> return .)
    PRINT           reduce using rule 40 (statements -> return .)
    READ_INPUT      reduce using rule 40 (statements -> return .)
    IF              reduce using rule 40 (statements -> return .)
    WHILE           reduce using rule 40 (statements -> return .)
    RETURN          reduce using rule 40 (statements -> return .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (statements -> return .)


state 84

    (41) assignment -> CTE_ID . addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (87) functionCall -> CTE_ID . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (109) addOperand -> .
    (129) doFuncCall -> .

    EQUAL           reduce using rule 109 (addOperand -> .)
    LEFT_PAREN      reduce using rule 129 (doFuncCall -> .)

    addOperand                     shift and go to state 103
    doFuncCall                     shift and go to state 104

state 85

    (42) writting -> PRINT . LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 105


state 86

    (47) reading -> READ_INPUT . LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 106


state 87

    (82) if -> IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF

    LEFT_PAREN      shift and go to state 107


state 88

    (86) while -> WHILE . LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile

    LEFT_PAREN      shift and go to state 108


state 89

    (88) auxFuncCall -> functionCall . SEMI_COLON

    SEMI_COLON      shift and go to state 109


state 90

    (94) return -> RETURN . RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    RETURN_SIGN     shift and go to state 110


state 91

    (22) auxParams -> type CTE_ID addParam multipleParams .

    RIGHT_PAREN     reduce using rule 22 (auxParams -> type CTE_ID addParam multipleParams .)


state 92

    (23) multipleParams -> COMMA . auxParams
    (22) auxParams -> . type CTE_ID addParam multipleParams
    (30) type -> . INT setCurrentType
    (31) type -> . FLOAT setCurrentType
    (32) type -> . BOOL setCurrentType
    (33) type -> . STRING setCurrentType

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    auxParams                      shift and go to state 111
    type                           shift and go to state 53

state 93

    (24) multipleParams -> empty .

    RIGHT_PAREN     reduce using rule 24 (multipleParams -> empty .)


state 94

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (104) endFunction -> .

    FUNC            reduce using rule 104 (endFunction -> .)
    MAIN            reduce using rule 104 (endFunction -> .)

    endFunction                    shift and go to state 112

state 95

    (19) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (104) endFunction -> .

    FUNC            reduce using rule 104 (endFunction -> .)
    MAIN            reduce using rule 104 (endFunction -> .)

    endFunction                    shift and go to state 113

state 96

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars
    (110) addConstantOperand -> .

    RIGHT_BRACKET   reduce using rule 110 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 114

state 97

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA . vars_type_array
    (13) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_ID          shift and go to state 115

    vars_type_array                shift and go to state 116

state 98

    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (135) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)
    CTE_ID          reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ_INPUT      reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)

    auxVars                        shift and go to state 117
    empty                          shift and go to state 50

state 99

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram . endPrint
    (100) endPrint -> .

    $end            reduce using rule 100 (endPrint -> .)

    endPrint                       shift and go to state 118

state 100

    (25) funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .

    $end            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    FUNC            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    CTE_ID          reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    PRINT           reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    READ_INPUT      reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)


state 101

    (26) auxFuncBody -> vars statements . auxFuncBody
    (26) auxFuncBody -> . vars statements auxFuncBody
    (27) auxFuncBody -> . statements auxFuncBody
    (28) auxFuncBody -> . vars
    (29) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (34) statements -> . assignment
    (35) statements -> . writting
    (36) statements -> . reading
    (37) statements -> . if
    (38) statements -> . while
    (39) statements -> . auxFuncCall
    (40) statements -> . return
    (135) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (41) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (88) auxFuncCall -> . functionCall SEMI_COLON
    (94) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 84
    PRINT           shift and go to state 85
    READ_INPUT      shift and go to state 86
    IF              shift and go to state 87
    WHILE           shift and go to state 88
    RETURN          shift and go to state 90

  ! CTE_ID          [ reduce using rule 135 (empty -> .) ]
  ! PRINT           [ reduce using rule 135 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 135 (empty -> .) ]
  ! IF              [ reduce using rule 135 (empty -> .) ]
  ! WHILE           [ reduce using rule 135 (empty -> .) ]
  ! RETURN          [ reduce using rule 135 (empty -> .) ]

    vars                           shift and go to state 74
    statements                     shift and go to state 75
    auxFuncBody                    shift and go to state 119
    empty                          shift and go to state 76
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    auxFuncCall                    shift and go to state 82
    return                         shift and go to state 83
    functionCall                   shift and go to state 89

state 102

    (27) auxFuncBody -> statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 27 (auxFuncBody -> statements auxFuncBody .)


state 103

    (41) assignment -> CTE_ID addOperand . EQUAL addOperator logicExpression doAssign SEMI_COLON

    EQUAL           shift and go to state 120


state 104

    (87) functionCall -> CTE_ID doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 121


state 105

    (42) writting -> PRINT LEFT_PAREN . auxWritting RIGHT_PAREN SEMI_COLON
    (43) auxWritting -> . logicExpression doWrite multipleWrite
    (44) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    CTE_STRING      shift and go to state 125
    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    auxWritting                    shift and go to state 123
    logicExpression                shift and go to state 124
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 106

    (47) reading -> READ_INPUT LEFT_PAREN . auxReading RIGHT_PAREN SEMI_COLON
    (48) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 138

    auxReading                     shift and go to state 137

state 107

    (82) if -> IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody else endIF
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    logicExpression                shift and go to state 139
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 108

    (86) while -> WHILE LEFT_PAREN . addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (128) addCondStart -> .

    LEFT_PAREN      reduce using rule 128 (addCondStart -> .)
    CTE_ID          reduce using rule 128 (addCondStart -> .)
    CTE_INT         reduce using rule 128 (addCondStart -> .)
    CTE_FLOAT       reduce using rule 128 (addCondStart -> .)
    CTE_STRING      reduce using rule 128 (addCondStart -> .)
    TRUE            reduce using rule 128 (addCondStart -> .)
    FALSE           reduce using rule 128 (addCondStart -> .)

    addCondStart                   shift and go to state 141

state 109

    (88) auxFuncCall -> functionCall SEMI_COLON .

    VAR             reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)
    CTE_ID          reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)
    PRINT           reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)
    READ_INPUT      reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)
    IF              reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)
    WHILE           reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)
    RETURN          reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 88 (auxFuncCall -> functionCall SEMI_COLON .)


state 110

    (94) return -> RETURN RETURN_SIGN . LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 142


state 111

    (23) multipleParams -> COMMA auxParams .

    RIGHT_PAREN     reduce using rule 23 (multipleParams -> COMMA auxParams .)


state 112

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 18 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 18 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 113

    (19) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 19 (funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 19 (funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 114

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveMat SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 143


state 115

    (13) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (105) saveVariableID -> .

    LEFT_BRACKET    reduce using rule 105 (saveVariableID -> .)

    saveVariableID                 shift and go to state 144

state 116

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .

    FUNC            reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    MAIN            reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    CTE_ID          reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    PRINT           reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    READ_INPUT      reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    IF              reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    WHILE           reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    RETURN          reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)


state 117

    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .

    FUNC            reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    MAIN            reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    PRINT           reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    IF              reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    WHILE           reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    RETURN          reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)


state 118

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .

    $end            reduce using rule 1 (program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .)


state 119

    (26) auxFuncBody -> vars statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 26 (auxFuncBody -> vars statements auxFuncBody .)


state 120

    (41) assignment -> CTE_ID addOperand EQUAL . addOperator logicExpression doAssign SEMI_COLON
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 145

state 121

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSub
    (89) arguments -> . auxArguments
    (90) arguments -> . empty
    (91) auxArguments -> . logicExpression checkType multipleArguments
    (135) empty -> .
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    arguments                      shift and go to state 146
    auxArguments                   shift and go to state 147
    empty                          shift and go to state 148
    logicExpression                shift and go to state 149
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 122

    (73) factor -> LEFT_PAREN . addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (113) addParenthesis -> .

    LEFT_PAREN      reduce using rule 113 (addParenthesis -> .)
    CTE_ID          reduce using rule 113 (addParenthesis -> .)
    CTE_INT         reduce using rule 113 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 113 (addParenthesis -> .)
    CTE_STRING      reduce using rule 113 (addParenthesis -> .)
    TRUE            reduce using rule 113 (addParenthesis -> .)
    FALSE           reduce using rule 113 (addParenthesis -> .)

    addParenthesis                 shift and go to state 150

state 123

    (42) writting -> PRINT LEFT_PAREN auxWritting . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 151


state 124

    (43) auxWritting -> logicExpression . doWrite multipleWrite
    (120) doWrite -> .

    COMMA           reduce using rule 120 (doWrite -> .)
    RIGHT_PAREN     reduce using rule 120 (doWrite -> .)

    doWrite                        shift and go to state 152

state 125

    (44) auxWritting -> CTE_STRING . doWriteString multipleWrite
    (78) constants -> CTE_STRING . addConstantOperand
    (121) doWriteString -> .
    (110) addConstantOperand -> .

  ! reduce/reduce conflict for COMMA resolved using rule 110 (addConstantOperand -> .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 110 (addConstantOperand -> .)
    TIMES           reduce using rule 110 (addConstantOperand -> .)
    DIV             reduce using rule 110 (addConstantOperand -> .)
    MOD             reduce using rule 110 (addConstantOperand -> .)
    EXP             reduce using rule 110 (addConstantOperand -> .)
    PLUS            reduce using rule 110 (addConstantOperand -> .)
    MINUS           reduce using rule 110 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 110 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 110 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 110 (addConstantOperand -> .)
    EQUALS          reduce using rule 110 (addConstantOperand -> .)
    AND             reduce using rule 110 (addConstantOperand -> .)
    OR              reduce using rule 110 (addConstantOperand -> .)
    COMMA           reduce using rule 110 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 110 (addConstantOperand -> .)

  ! COMMA           [ reduce using rule 121 (doWriteString -> .) ]
  ! RIGHT_PAREN     [ reduce using rule 121 (doWriteString -> .) ]

    doWriteString                  shift and go to state 153
    addConstantOperand             shift and go to state 154

state 126

    (51) logicExpression -> exp . doLogicExpression auxLogicExpression
    (115) doLogicExpression -> .

    AND             reduce using rule 115 (doLogicExpression -> .)
    OR              reduce using rule 115 (doLogicExpression -> .)
    COMMA           reduce using rule 115 (doLogicExpression -> .)
    RIGHT_PAREN     reduce using rule 115 (doLogicExpression -> .)
    SEMI_COLON      reduce using rule 115 (doLogicExpression -> .)

    doLogicExpression              shift and go to state 155

state 127

    (55) exp -> exp2 . doCompExpression auxExp
    (116) doCompExpression -> .

    GREATER_THAN    reduce using rule 116 (doCompExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 116 (doCompExpression -> .)
    LESS_THAN       reduce using rule 116 (doCompExpression -> .)
    LESS_EQUAL_THAN reduce using rule 116 (doCompExpression -> .)
    NOT_EQUALS      reduce using rule 116 (doCompExpression -> .)
    EQUALS          reduce using rule 116 (doCompExpression -> .)
    AND             reduce using rule 116 (doCompExpression -> .)
    OR              reduce using rule 116 (doCompExpression -> .)
    COMMA           reduce using rule 116 (doCompExpression -> .)
    RIGHT_PAREN     reduce using rule 116 (doCompExpression -> .)
    SEMI_COLON      reduce using rule 116 (doCompExpression -> .)

    doCompExpression               shift and go to state 156

state 128

    (63) exp2 -> term . doExpression exp2Aux
    (117) doExpression -> .

    PLUS            reduce using rule 117 (doExpression -> .)
    MINUS           reduce using rule 117 (doExpression -> .)
    GREATER_THAN    reduce using rule 117 (doExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 117 (doExpression -> .)
    LESS_THAN       reduce using rule 117 (doExpression -> .)
    LESS_EQUAL_THAN reduce using rule 117 (doExpression -> .)
    NOT_EQUALS      reduce using rule 117 (doExpression -> .)
    EQUALS          reduce using rule 117 (doExpression -> .)
    AND             reduce using rule 117 (doExpression -> .)
    OR              reduce using rule 117 (doExpression -> .)
    COMMA           reduce using rule 117 (doExpression -> .)
    RIGHT_PAREN     reduce using rule 117 (doExpression -> .)
    SEMI_COLON      reduce using rule 117 (doExpression -> .)

    doExpression                   shift and go to state 157

state 129

    (67) term -> factor . doTerm auxTerm
    (118) doTerm -> .

    TIMES           reduce using rule 118 (doTerm -> .)
    DIV             reduce using rule 118 (doTerm -> .)
    MOD             reduce using rule 118 (doTerm -> .)
    EXP             reduce using rule 118 (doTerm -> .)
    PLUS            reduce using rule 118 (doTerm -> .)
    MINUS           reduce using rule 118 (doTerm -> .)
    GREATER_THAN    reduce using rule 118 (doTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 118 (doTerm -> .)
    LESS_THAN       reduce using rule 118 (doTerm -> .)
    LESS_EQUAL_THAN reduce using rule 118 (doTerm -> .)
    NOT_EQUALS      reduce using rule 118 (doTerm -> .)
    EQUALS          reduce using rule 118 (doTerm -> .)
    AND             reduce using rule 118 (doTerm -> .)
    OR              reduce using rule 118 (doTerm -> .)
    COMMA           reduce using rule 118 (doTerm -> .)
    RIGHT_PAREN     reduce using rule 118 (doTerm -> .)
    SEMI_COLON      reduce using rule 118 (doTerm -> .)

    doTerm                         shift and go to state 158

state 130

    (74) factor -> constants .

    TIMES           reduce using rule 74 (factor -> constants .)
    DIV             reduce using rule 74 (factor -> constants .)
    MOD             reduce using rule 74 (factor -> constants .)
    EXP             reduce using rule 74 (factor -> constants .)
    PLUS            reduce using rule 74 (factor -> constants .)
    MINUS           reduce using rule 74 (factor -> constants .)
    GREATER_THAN    reduce using rule 74 (factor -> constants .)
    GREATER_EQUAL_THAN reduce using rule 74 (factor -> constants .)
    LESS_THAN       reduce using rule 74 (factor -> constants .)
    LESS_EQUAL_THAN reduce using rule 74 (factor -> constants .)
    NOT_EQUALS      reduce using rule 74 (factor -> constants .)
    EQUALS          reduce using rule 74 (factor -> constants .)
    AND             reduce using rule 74 (factor -> constants .)
    OR              reduce using rule 74 (factor -> constants .)
    COMMA           reduce using rule 74 (factor -> constants .)
    RIGHT_PAREN     reduce using rule 74 (factor -> constants .)
    SEMI_COLON      reduce using rule 74 (factor -> constants .)


state 131

    (75) constants -> CTE_ID . addOperand
    (87) functionCall -> CTE_ID . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (109) addOperand -> .
    (129) doFuncCall -> .

    TIMES           reduce using rule 109 (addOperand -> .)
    DIV             reduce using rule 109 (addOperand -> .)
    MOD             reduce using rule 109 (addOperand -> .)
    EXP             reduce using rule 109 (addOperand -> .)
    PLUS            reduce using rule 109 (addOperand -> .)
    MINUS           reduce using rule 109 (addOperand -> .)
    GREATER_THAN    reduce using rule 109 (addOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 109 (addOperand -> .)
    LESS_THAN       reduce using rule 109 (addOperand -> .)
    LESS_EQUAL_THAN reduce using rule 109 (addOperand -> .)
    NOT_EQUALS      reduce using rule 109 (addOperand -> .)
    EQUALS          reduce using rule 109 (addOperand -> .)
    AND             reduce using rule 109 (addOperand -> .)
    OR              reduce using rule 109 (addOperand -> .)
    COMMA           reduce using rule 109 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 109 (addOperand -> .)
    SEMI_COLON      reduce using rule 109 (addOperand -> .)
    LEFT_PAREN      reduce using rule 129 (doFuncCall -> .)

    addOperand                     shift and go to state 159
    doFuncCall                     shift and go to state 104

state 132

    (76) constants -> CTE_INT . addConstantOperand
    (110) addConstantOperand -> .

    TIMES           reduce using rule 110 (addConstantOperand -> .)
    DIV             reduce using rule 110 (addConstantOperand -> .)
    MOD             reduce using rule 110 (addConstantOperand -> .)
    EXP             reduce using rule 110 (addConstantOperand -> .)
    PLUS            reduce using rule 110 (addConstantOperand -> .)
    MINUS           reduce using rule 110 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 110 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 110 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 110 (addConstantOperand -> .)
    EQUALS          reduce using rule 110 (addConstantOperand -> .)
    AND             reduce using rule 110 (addConstantOperand -> .)
    OR              reduce using rule 110 (addConstantOperand -> .)
    COMMA           reduce using rule 110 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 110 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 110 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 160

state 133

    (77) constants -> CTE_FLOAT . addConstantOperand
    (110) addConstantOperand -> .

    TIMES           reduce using rule 110 (addConstantOperand -> .)
    DIV             reduce using rule 110 (addConstantOperand -> .)
    MOD             reduce using rule 110 (addConstantOperand -> .)
    EXP             reduce using rule 110 (addConstantOperand -> .)
    PLUS            reduce using rule 110 (addConstantOperand -> .)
    MINUS           reduce using rule 110 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 110 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 110 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 110 (addConstantOperand -> .)
    EQUALS          reduce using rule 110 (addConstantOperand -> .)
    AND             reduce using rule 110 (addConstantOperand -> .)
    OR              reduce using rule 110 (addConstantOperand -> .)
    COMMA           reduce using rule 110 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 110 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 110 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 161

state 134

    (79) constants -> TRUE . addConstantBool
    (111) addConstantBool -> .

    TIMES           reduce using rule 111 (addConstantBool -> .)
    DIV             reduce using rule 111 (addConstantBool -> .)
    MOD             reduce using rule 111 (addConstantBool -> .)
    EXP             reduce using rule 111 (addConstantBool -> .)
    PLUS            reduce using rule 111 (addConstantBool -> .)
    MINUS           reduce using rule 111 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 111 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 111 (addConstantBool -> .)
    LESS_THAN       reduce using rule 111 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 111 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 111 (addConstantBool -> .)
    EQUALS          reduce using rule 111 (addConstantBool -> .)
    AND             reduce using rule 111 (addConstantBool -> .)
    OR              reduce using rule 111 (addConstantBool -> .)
    COMMA           reduce using rule 111 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 111 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 111 (addConstantBool -> .)

    addConstantBool                shift and go to state 162

state 135

    (80) constants -> FALSE . addConstantBool
    (111) addConstantBool -> .

    TIMES           reduce using rule 111 (addConstantBool -> .)
    DIV             reduce using rule 111 (addConstantBool -> .)
    MOD             reduce using rule 111 (addConstantBool -> .)
    EXP             reduce using rule 111 (addConstantBool -> .)
    PLUS            reduce using rule 111 (addConstantBool -> .)
    MINUS           reduce using rule 111 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 111 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 111 (addConstantBool -> .)
    LESS_THAN       reduce using rule 111 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 111 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 111 (addConstantBool -> .)
    EQUALS          reduce using rule 111 (addConstantBool -> .)
    AND             reduce using rule 111 (addConstantBool -> .)
    OR              reduce using rule 111 (addConstantBool -> .)
    COMMA           reduce using rule 111 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 111 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 111 (addConstantBool -> .)

    addConstantBool                shift and go to state 163

state 136

    (81) constants -> functionCall .

    TIMES           reduce using rule 81 (constants -> functionCall .)
    DIV             reduce using rule 81 (constants -> functionCall .)
    MOD             reduce using rule 81 (constants -> functionCall .)
    EXP             reduce using rule 81 (constants -> functionCall .)
    PLUS            reduce using rule 81 (constants -> functionCall .)
    MINUS           reduce using rule 81 (constants -> functionCall .)
    GREATER_THAN    reduce using rule 81 (constants -> functionCall .)
    GREATER_EQUAL_THAN reduce using rule 81 (constants -> functionCall .)
    LESS_THAN       reduce using rule 81 (constants -> functionCall .)
    LESS_EQUAL_THAN reduce using rule 81 (constants -> functionCall .)
    NOT_EQUALS      reduce using rule 81 (constants -> functionCall .)
    EQUALS          reduce using rule 81 (constants -> functionCall .)
    AND             reduce using rule 81 (constants -> functionCall .)
    OR              reduce using rule 81 (constants -> functionCall .)
    COMMA           reduce using rule 81 (constants -> functionCall .)
    RIGHT_PAREN     reduce using rule 81 (constants -> functionCall .)
    SEMI_COLON      reduce using rule 81 (constants -> functionCall .)


state 137

    (47) reading -> READ_INPUT LEFT_PAREN auxReading . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 164


state 138

    (48) auxReading -> CTE_ID . addOperand doReading multipleRead
    (109) addOperand -> .

    COMMA           reduce using rule 109 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 109 (addOperand -> .)

    addOperand                     shift and go to state 165

state 139

    (82) if -> IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody else endIF
    (123) doIF -> .

    RIGHT_PAREN     reduce using rule 123 (doIF -> .)

    doIF                           shift and go to state 166

state 140

    (78) constants -> CTE_STRING . addConstantOperand
    (110) addConstantOperand -> .

    TIMES           reduce using rule 110 (addConstantOperand -> .)
    DIV             reduce using rule 110 (addConstantOperand -> .)
    MOD             reduce using rule 110 (addConstantOperand -> .)
    EXP             reduce using rule 110 (addConstantOperand -> .)
    PLUS            reduce using rule 110 (addConstantOperand -> .)
    MINUS           reduce using rule 110 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 110 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 110 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 110 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 110 (addConstantOperand -> .)
    EQUALS          reduce using rule 110 (addConstantOperand -> .)
    AND             reduce using rule 110 (addConstantOperand -> .)
    OR              reduce using rule 110 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 110 (addConstantOperand -> .)
    COMMA           reduce using rule 110 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 110 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 154

state 141

    (86) while -> WHILE LEFT_PAREN addCondStart . logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    logicExpression                shift and go to state 167
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 142

    (94) return -> RETURN RETURN_SIGN LEFT_PAREN . auxReturn RIGHT_PAREN SEMI_COLON
    (95) auxReturn -> . logicExpression doReturn
    (96) auxReturn -> . empty
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (135) empty -> .
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    auxReturn                      shift and go to state 168
    logicExpression                shift and go to state 169
    empty                          shift and go to state 170
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 143

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveMat SEMI_COLON auxVars
    (107) saveMat -> .

    COMMA           reduce using rule 107 (saveMat -> .)
    SEMI_COLON      reduce using rule 107 (saveMat -> .)

    saveMat                        shift and go to state 171

state 144

    (13) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 172


state 145

    (41) assignment -> CTE_ID addOperand EQUAL addOperator . logicExpression doAssign SEMI_COLON
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    logicExpression                shift and go to state 173
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 146

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSub
    (131) checkParams -> .

    RIGHT_PAREN     reduce using rule 131 (checkParams -> .)

    checkParams                    shift and go to state 174

state 147

    (89) arguments -> auxArguments .

    RIGHT_PAREN     reduce using rule 89 (arguments -> auxArguments .)


state 148

    (90) arguments -> empty .

    RIGHT_PAREN     reduce using rule 90 (arguments -> empty .)


state 149

    (91) auxArguments -> logicExpression . checkType multipleArguments
    (132) checkType -> .

    COMMA           reduce using rule 132 (checkType -> .)
    RIGHT_PAREN     reduce using rule 132 (checkType -> .)

    checkType                      shift and go to state 175

state 150

    (73) factor -> LEFT_PAREN addParenthesis . logicExpression RIGHT_PAREN removeParenthesis
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    logicExpression                shift and go to state 176
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 151

    (42) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 177


state 152

    (43) auxWritting -> logicExpression doWrite . multipleWrite
    (45) multipleWrite -> . COMMA auxWritting
    (46) multipleWrite -> . empty
    (135) empty -> .

    COMMA           shift and go to state 179
    RIGHT_PAREN     reduce using rule 135 (empty -> .)

    multipleWrite                  shift and go to state 178
    empty                          shift and go to state 180

state 153

    (44) auxWritting -> CTE_STRING doWriteString . multipleWrite
    (45) multipleWrite -> . COMMA auxWritting
    (46) multipleWrite -> . empty
    (135) empty -> .

    COMMA           shift and go to state 179
    RIGHT_PAREN     reduce using rule 135 (empty -> .)

    multipleWrite                  shift and go to state 181
    empty                          shift and go to state 180

state 154

    (78) constants -> CTE_STRING addConstantOperand .

    TIMES           reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    DIV             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    MOD             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    EXP             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    PLUS            reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    MINUS           reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    GREATER_THAN    reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    LESS_THAN       reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    NOT_EQUALS      reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    EQUALS          reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    AND             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    OR              reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    COMMA           reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    RIGHT_PAREN     reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    SEMI_COLON      reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)


state 155

    (51) logicExpression -> exp doLogicExpression . auxLogicExpression
    (52) auxLogicExpression -> . AND addOperator logicExpression
    (53) auxLogicExpression -> . OR addOperator logicExpression
    (54) auxLogicExpression -> . empty
    (135) empty -> .

    AND             shift and go to state 183
    OR              shift and go to state 184
    COMMA           reduce using rule 135 (empty -> .)
    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    SEMI_COLON      reduce using rule 135 (empty -> .)

    auxLogicExpression             shift and go to state 182
    empty                          shift and go to state 185

state 156

    (55) exp -> exp2 doCompExpression . auxExp
    (56) auxExp -> . GREATER_THAN addOperator exp
    (57) auxExp -> . GREATER_EQUAL_THAN addOperator exp
    (58) auxExp -> . LESS_THAN addOperator exp
    (59) auxExp -> . LESS_EQUAL_THAN addOperator exp
    (60) auxExp -> . NOT_EQUALS addOperator exp
    (61) auxExp -> . EQUALS addOperator exp
    (62) auxExp -> . empty
    (135) empty -> .

    GREATER_THAN    shift and go to state 187
    GREATER_EQUAL_THAN shift and go to state 188
    LESS_THAN       shift and go to state 189
    LESS_EQUAL_THAN shift and go to state 190
    NOT_EQUALS      shift and go to state 191
    EQUALS          shift and go to state 192
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    COMMA           reduce using rule 135 (empty -> .)
    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    SEMI_COLON      reduce using rule 135 (empty -> .)

    auxExp                         shift and go to state 186
    empty                          shift and go to state 193

state 157

    (63) exp2 -> term doExpression . exp2Aux
    (64) exp2Aux -> . PLUS addOperator exp2
    (65) exp2Aux -> . MINUS addOperator exp2
    (66) exp2Aux -> . empty
    (135) empty -> .

    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    GREATER_THAN    reduce using rule 135 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 135 (empty -> .)
    LESS_THAN       reduce using rule 135 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 135 (empty -> .)
    NOT_EQUALS      reduce using rule 135 (empty -> .)
    EQUALS          reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    COMMA           reduce using rule 135 (empty -> .)
    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    SEMI_COLON      reduce using rule 135 (empty -> .)

    exp2Aux                        shift and go to state 194
    empty                          shift and go to state 197

state 158

    (67) term -> factor doTerm . auxTerm
    (68) auxTerm -> . TIMES addOperator term
    (69) auxTerm -> . DIV addOperator term
    (70) auxTerm -> . MOD addOperator term
    (71) auxTerm -> . EXP addOperator term
    (72) auxTerm -> . empty
    (135) empty -> .

    TIMES           shift and go to state 199
    DIV             shift and go to state 200
    MOD             shift and go to state 201
    EXP             shift and go to state 202
    PLUS            reduce using rule 135 (empty -> .)
    MINUS           reduce using rule 135 (empty -> .)
    GREATER_THAN    reduce using rule 135 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 135 (empty -> .)
    LESS_THAN       reduce using rule 135 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 135 (empty -> .)
    NOT_EQUALS      reduce using rule 135 (empty -> .)
    EQUALS          reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    COMMA           reduce using rule 135 (empty -> .)
    RIGHT_PAREN     reduce using rule 135 (empty -> .)
    SEMI_COLON      reduce using rule 135 (empty -> .)

    auxTerm                        shift and go to state 198
    empty                          shift and go to state 203

state 159

    (75) constants -> CTE_ID addOperand .

    TIMES           reduce using rule 75 (constants -> CTE_ID addOperand .)
    DIV             reduce using rule 75 (constants -> CTE_ID addOperand .)
    MOD             reduce using rule 75 (constants -> CTE_ID addOperand .)
    EXP             reduce using rule 75 (constants -> CTE_ID addOperand .)
    PLUS            reduce using rule 75 (constants -> CTE_ID addOperand .)
    MINUS           reduce using rule 75 (constants -> CTE_ID addOperand .)
    GREATER_THAN    reduce using rule 75 (constants -> CTE_ID addOperand .)
    GREATER_EQUAL_THAN reduce using rule 75 (constants -> CTE_ID addOperand .)
    LESS_THAN       reduce using rule 75 (constants -> CTE_ID addOperand .)
    LESS_EQUAL_THAN reduce using rule 75 (constants -> CTE_ID addOperand .)
    NOT_EQUALS      reduce using rule 75 (constants -> CTE_ID addOperand .)
    EQUALS          reduce using rule 75 (constants -> CTE_ID addOperand .)
    AND             reduce using rule 75 (constants -> CTE_ID addOperand .)
    OR              reduce using rule 75 (constants -> CTE_ID addOperand .)
    COMMA           reduce using rule 75 (constants -> CTE_ID addOperand .)
    RIGHT_PAREN     reduce using rule 75 (constants -> CTE_ID addOperand .)
    SEMI_COLON      reduce using rule 75 (constants -> CTE_ID addOperand .)


state 160

    (76) constants -> CTE_INT addConstantOperand .

    TIMES           reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    DIV             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    MOD             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    EXP             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    PLUS            reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    MINUS           reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    GREATER_THAN    reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    LESS_THAN       reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    NOT_EQUALS      reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    EQUALS          reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    AND             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    OR              reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    COMMA           reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    SEMI_COLON      reduce using rule 76 (constants -> CTE_INT addConstantOperand .)


state 161

    (77) constants -> CTE_FLOAT addConstantOperand .

    TIMES           reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    DIV             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    MOD             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    EXP             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    PLUS            reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    MINUS           reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_THAN    reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_THAN       reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    NOT_EQUALS      reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    EQUALS          reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    AND             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    OR              reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    COMMA           reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    SEMI_COLON      reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)


state 162

    (79) constants -> TRUE addConstantBool .

    TIMES           reduce using rule 79 (constants -> TRUE addConstantBool .)
    DIV             reduce using rule 79 (constants -> TRUE addConstantBool .)
    MOD             reduce using rule 79 (constants -> TRUE addConstantBool .)
    EXP             reduce using rule 79 (constants -> TRUE addConstantBool .)
    PLUS            reduce using rule 79 (constants -> TRUE addConstantBool .)
    MINUS           reduce using rule 79 (constants -> TRUE addConstantBool .)
    GREATER_THAN    reduce using rule 79 (constants -> TRUE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 79 (constants -> TRUE addConstantBool .)
    LESS_THAN       reduce using rule 79 (constants -> TRUE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 79 (constants -> TRUE addConstantBool .)
    NOT_EQUALS      reduce using rule 79 (constants -> TRUE addConstantBool .)
    EQUALS          reduce using rule 79 (constants -> TRUE addConstantBool .)
    AND             reduce using rule 79 (constants -> TRUE addConstantBool .)
    OR              reduce using rule 79 (constants -> TRUE addConstantBool .)
    COMMA           reduce using rule 79 (constants -> TRUE addConstantBool .)
    RIGHT_PAREN     reduce using rule 79 (constants -> TRUE addConstantBool .)
    SEMI_COLON      reduce using rule 79 (constants -> TRUE addConstantBool .)


state 163

    (80) constants -> FALSE addConstantBool .

    TIMES           reduce using rule 80 (constants -> FALSE addConstantBool .)
    DIV             reduce using rule 80 (constants -> FALSE addConstantBool .)
    MOD             reduce using rule 80 (constants -> FALSE addConstantBool .)
    EXP             reduce using rule 80 (constants -> FALSE addConstantBool .)
    PLUS            reduce using rule 80 (constants -> FALSE addConstantBool .)
    MINUS           reduce using rule 80 (constants -> FALSE addConstantBool .)
    GREATER_THAN    reduce using rule 80 (constants -> FALSE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 80 (constants -> FALSE addConstantBool .)
    LESS_THAN       reduce using rule 80 (constants -> FALSE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 80 (constants -> FALSE addConstantBool .)
    NOT_EQUALS      reduce using rule 80 (constants -> FALSE addConstantBool .)
    EQUALS          reduce using rule 80 (constants -> FALSE addConstantBool .)
    AND             reduce using rule 80 (constants -> FALSE addConstantBool .)
    OR              reduce using rule 80 (constants -> FALSE addConstantBool .)
    COMMA           reduce using rule 80 (constants -> FALSE addConstantBool .)
    RIGHT_PAREN     reduce using rule 80 (constants -> FALSE addConstantBool .)
    SEMI_COLON      reduce using rule 80 (constants -> FALSE addConstantBool .)


state 164

    (47) reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 204


state 165

    (48) auxReading -> CTE_ID addOperand . doReading multipleRead
    (122) doReading -> .

    COMMA           reduce using rule 122 (doReading -> .)
    RIGHT_PAREN     reduce using rule 122 (doReading -> .)

    doReading                      shift and go to state 205

state 166

    (82) if -> IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody else endIF

    RIGHT_PAREN     shift and go to state 206


state 167

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression . doWhile RIGHT_PAREN funcBody endWhile
    (126) doWhile -> .

    RIGHT_PAREN     reduce using rule 126 (doWhile -> .)

    doWhile                        shift and go to state 207

state 168

    (94) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 208


state 169

    (95) auxReturn -> logicExpression . doReturn
    (133) doReturn -> .

    RIGHT_PAREN     reduce using rule 133 (doReturn -> .)

    doReturn                       shift and go to state 209

state 170

    (96) auxReturn -> empty .

    RIGHT_PAREN     reduce using rule 96 (auxReturn -> empty .)


state 171

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat . COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat . SEMI_COLON auxVars

    COMMA           shift and go to state 210
    SEMI_COLON      shift and go to state 211


state 172

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_INT         shift and go to state 212


state 173

    (41) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression . doAssign SEMI_COLON
    (119) doAssign -> .

    SEMI_COLON      reduce using rule 119 (doAssign -> .)

    doAssign                       shift and go to state 213

state 174

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSub

    RIGHT_PAREN     shift and go to state 214


state 175

    (91) auxArguments -> logicExpression checkType . multipleArguments
    (92) multipleArguments -> . COMMA auxArguments
    (93) multipleArguments -> . empty
    (135) empty -> .

    COMMA           shift and go to state 216
    RIGHT_PAREN     reduce using rule 135 (empty -> .)

    multipleArguments              shift and go to state 215
    empty                          shift and go to state 217

state 176

    (73) factor -> LEFT_PAREN addParenthesis logicExpression . RIGHT_PAREN removeParenthesis

    RIGHT_PAREN     shift and go to state 218


state 177

    (42) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)


state 178

    (43) auxWritting -> logicExpression doWrite multipleWrite .

    RIGHT_PAREN     reduce using rule 43 (auxWritting -> logicExpression doWrite multipleWrite .)


state 179

    (45) multipleWrite -> COMMA . auxWritting
    (43) auxWritting -> . logicExpression doWrite multipleWrite
    (44) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    CTE_STRING      shift and go to state 125
    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    auxWritting                    shift and go to state 219
    logicExpression                shift and go to state 124
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 180

    (46) multipleWrite -> empty .

    RIGHT_PAREN     reduce using rule 46 (multipleWrite -> empty .)


state 181

    (44) auxWritting -> CTE_STRING doWriteString multipleWrite .

    RIGHT_PAREN     reduce using rule 44 (auxWritting -> CTE_STRING doWriteString multipleWrite .)


state 182

    (51) logicExpression -> exp doLogicExpression auxLogicExpression .

    COMMA           reduce using rule 51 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    RIGHT_PAREN     reduce using rule 51 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    SEMI_COLON      reduce using rule 51 (logicExpression -> exp doLogicExpression auxLogicExpression .)


state 183

    (52) auxLogicExpression -> AND . addOperator logicExpression
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 220

state 184

    (53) auxLogicExpression -> OR . addOperator logicExpression
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 221

state 185

    (54) auxLogicExpression -> empty .

    COMMA           reduce using rule 54 (auxLogicExpression -> empty .)
    RIGHT_PAREN     reduce using rule 54 (auxLogicExpression -> empty .)
    SEMI_COLON      reduce using rule 54 (auxLogicExpression -> empty .)


state 186

    (55) exp -> exp2 doCompExpression auxExp .

    AND             reduce using rule 55 (exp -> exp2 doCompExpression auxExp .)
    OR              reduce using rule 55 (exp -> exp2 doCompExpression auxExp .)
    COMMA           reduce using rule 55 (exp -> exp2 doCompExpression auxExp .)
    RIGHT_PAREN     reduce using rule 55 (exp -> exp2 doCompExpression auxExp .)
    SEMI_COLON      reduce using rule 55 (exp -> exp2 doCompExpression auxExp .)


state 187

    (56) auxExp -> GREATER_THAN . addOperator exp
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 222

state 188

    (57) auxExp -> GREATER_EQUAL_THAN . addOperator exp
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 223

state 189

    (58) auxExp -> LESS_THAN . addOperator exp
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 224

state 190

    (59) auxExp -> LESS_EQUAL_THAN . addOperator exp
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 225

state 191

    (60) auxExp -> NOT_EQUALS . addOperator exp
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 226

state 192

    (61) auxExp -> EQUALS . addOperator exp
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 227

state 193

    (62) auxExp -> empty .

    AND             reduce using rule 62 (auxExp -> empty .)
    OR              reduce using rule 62 (auxExp -> empty .)
    COMMA           reduce using rule 62 (auxExp -> empty .)
    RIGHT_PAREN     reduce using rule 62 (auxExp -> empty .)
    SEMI_COLON      reduce using rule 62 (auxExp -> empty .)


state 194

    (63) exp2 -> term doExpression exp2Aux .

    GREATER_THAN    reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    GREATER_EQUAL_THAN reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    LESS_THAN       reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    LESS_EQUAL_THAN reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    NOT_EQUALS      reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    EQUALS          reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    AND             reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    OR              reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    COMMA           reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    RIGHT_PAREN     reduce using rule 63 (exp2 -> term doExpression exp2Aux .)
    SEMI_COLON      reduce using rule 63 (exp2 -> term doExpression exp2Aux .)


state 195

    (64) exp2Aux -> PLUS . addOperator exp2
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 228

state 196

    (65) exp2Aux -> MINUS . addOperator exp2
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 229

state 197

    (66) exp2Aux -> empty .

    GREATER_THAN    reduce using rule 66 (exp2Aux -> empty .)
    GREATER_EQUAL_THAN reduce using rule 66 (exp2Aux -> empty .)
    LESS_THAN       reduce using rule 66 (exp2Aux -> empty .)
    LESS_EQUAL_THAN reduce using rule 66 (exp2Aux -> empty .)
    NOT_EQUALS      reduce using rule 66 (exp2Aux -> empty .)
    EQUALS          reduce using rule 66 (exp2Aux -> empty .)
    AND             reduce using rule 66 (exp2Aux -> empty .)
    OR              reduce using rule 66 (exp2Aux -> empty .)
    COMMA           reduce using rule 66 (exp2Aux -> empty .)
    RIGHT_PAREN     reduce using rule 66 (exp2Aux -> empty .)
    SEMI_COLON      reduce using rule 66 (exp2Aux -> empty .)


state 198

    (67) term -> factor doTerm auxTerm .

    PLUS            reduce using rule 67 (term -> factor doTerm auxTerm .)
    MINUS           reduce using rule 67 (term -> factor doTerm auxTerm .)
    GREATER_THAN    reduce using rule 67 (term -> factor doTerm auxTerm .)
    GREATER_EQUAL_THAN reduce using rule 67 (term -> factor doTerm auxTerm .)
    LESS_THAN       reduce using rule 67 (term -> factor doTerm auxTerm .)
    LESS_EQUAL_THAN reduce using rule 67 (term -> factor doTerm auxTerm .)
    NOT_EQUALS      reduce using rule 67 (term -> factor doTerm auxTerm .)
    EQUALS          reduce using rule 67 (term -> factor doTerm auxTerm .)
    AND             reduce using rule 67 (term -> factor doTerm auxTerm .)
    OR              reduce using rule 67 (term -> factor doTerm auxTerm .)
    COMMA           reduce using rule 67 (term -> factor doTerm auxTerm .)
    RIGHT_PAREN     reduce using rule 67 (term -> factor doTerm auxTerm .)
    SEMI_COLON      reduce using rule 67 (term -> factor doTerm auxTerm .)


state 199

    (68) auxTerm -> TIMES . addOperator term
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 230

state 200

    (69) auxTerm -> DIV . addOperator term
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 231

state 201

    (70) auxTerm -> MOD . addOperator term
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 232

state 202

    (71) auxTerm -> EXP . addOperator term
    (112) addOperator -> .

    LEFT_PAREN      reduce using rule 112 (addOperator -> .)
    CTE_ID          reduce using rule 112 (addOperator -> .)
    CTE_INT         reduce using rule 112 (addOperator -> .)
    CTE_FLOAT       reduce using rule 112 (addOperator -> .)
    CTE_STRING      reduce using rule 112 (addOperator -> .)
    TRUE            reduce using rule 112 (addOperator -> .)
    FALSE           reduce using rule 112 (addOperator -> .)

    addOperator                    shift and go to state 233

state 203

    (72) auxTerm -> empty .

    PLUS            reduce using rule 72 (auxTerm -> empty .)
    MINUS           reduce using rule 72 (auxTerm -> empty .)
    GREATER_THAN    reduce using rule 72 (auxTerm -> empty .)
    GREATER_EQUAL_THAN reduce using rule 72 (auxTerm -> empty .)
    LESS_THAN       reduce using rule 72 (auxTerm -> empty .)
    LESS_EQUAL_THAN reduce using rule 72 (auxTerm -> empty .)
    NOT_EQUALS      reduce using rule 72 (auxTerm -> empty .)
    EQUALS          reduce using rule 72 (auxTerm -> empty .)
    AND             reduce using rule 72 (auxTerm -> empty .)
    OR              reduce using rule 72 (auxTerm -> empty .)
    COMMA           reduce using rule 72 (auxTerm -> empty .)
    RIGHT_PAREN     reduce using rule 72 (auxTerm -> empty .)
    SEMI_COLON      reduce using rule 72 (auxTerm -> empty .)


state 204

    (47) reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 47 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)


state 205

    (48) auxReading -> CTE_ID addOperand doReading . multipleRead
    (49) multipleRead -> . COMMA auxReading
    (50) multipleRead -> . empty
    (135) empty -> .

    COMMA           shift and go to state 235
    RIGHT_PAREN     reduce using rule 135 (empty -> .)

    multipleRead                   shift and go to state 234
    empty                          shift and go to state 236

state 206

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody else endIF
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 66

    funcBody                       shift and go to state 237

state 207

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile . RIGHT_PAREN funcBody endWhile

    RIGHT_PAREN     shift and go to state 238


state 208

    (94) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 239


state 209

    (95) auxReturn -> logicExpression doReturn .

    RIGHT_PAREN     reduce using rule 95 (auxReturn -> logicExpression doReturn .)


state 210

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA . vars_type_matrix
    (15) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    CTE_ID          shift and go to state 240

    vars_type_matrix               shift and go to state 241

state 211

    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (135) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)
    CTE_ID          reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ_INPUT      reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)

    auxVars                        shift and go to state 242
    empty                          shift and go to state 50

state 212

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (110) addConstantOperand -> .

    RIGHT_BRACKET   reduce using rule 110 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 243

state 213

    (41) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign . SEMI_COLON

    SEMI_COLON      shift and go to state 244


state 214

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSub
    (134) doGoSub -> .

    SEMI_COLON      reduce using rule 134 (doGoSub -> .)
    TIMES           reduce using rule 134 (doGoSub -> .)
    DIV             reduce using rule 134 (doGoSub -> .)
    MOD             reduce using rule 134 (doGoSub -> .)
    EXP             reduce using rule 134 (doGoSub -> .)
    PLUS            reduce using rule 134 (doGoSub -> .)
    MINUS           reduce using rule 134 (doGoSub -> .)
    GREATER_THAN    reduce using rule 134 (doGoSub -> .)
    GREATER_EQUAL_THAN reduce using rule 134 (doGoSub -> .)
    LESS_THAN       reduce using rule 134 (doGoSub -> .)
    LESS_EQUAL_THAN reduce using rule 134 (doGoSub -> .)
    NOT_EQUALS      reduce using rule 134 (doGoSub -> .)
    EQUALS          reduce using rule 134 (doGoSub -> .)
    AND             reduce using rule 134 (doGoSub -> .)
    OR              reduce using rule 134 (doGoSub -> .)
    COMMA           reduce using rule 134 (doGoSub -> .)
    RIGHT_PAREN     reduce using rule 134 (doGoSub -> .)

    doGoSub                        shift and go to state 245

state 215

    (91) auxArguments -> logicExpression checkType multipleArguments .

    RIGHT_PAREN     reduce using rule 91 (auxArguments -> logicExpression checkType multipleArguments .)


state 216

    (92) multipleArguments -> COMMA . auxArguments
    (91) auxArguments -> . logicExpression checkType multipleArguments
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    auxArguments                   shift and go to state 246
    logicExpression                shift and go to state 149
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 217

    (93) multipleArguments -> empty .

    RIGHT_PAREN     reduce using rule 93 (multipleArguments -> empty .)


state 218

    (73) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN . removeParenthesis
    (114) removeParenthesis -> .

    TIMES           reduce using rule 114 (removeParenthesis -> .)
    DIV             reduce using rule 114 (removeParenthesis -> .)
    MOD             reduce using rule 114 (removeParenthesis -> .)
    EXP             reduce using rule 114 (removeParenthesis -> .)
    PLUS            reduce using rule 114 (removeParenthesis -> .)
    MINUS           reduce using rule 114 (removeParenthesis -> .)
    GREATER_THAN    reduce using rule 114 (removeParenthesis -> .)
    GREATER_EQUAL_THAN reduce using rule 114 (removeParenthesis -> .)
    LESS_THAN       reduce using rule 114 (removeParenthesis -> .)
    LESS_EQUAL_THAN reduce using rule 114 (removeParenthesis -> .)
    NOT_EQUALS      reduce using rule 114 (removeParenthesis -> .)
    EQUALS          reduce using rule 114 (removeParenthesis -> .)
    AND             reduce using rule 114 (removeParenthesis -> .)
    OR              reduce using rule 114 (removeParenthesis -> .)
    COMMA           reduce using rule 114 (removeParenthesis -> .)
    RIGHT_PAREN     reduce using rule 114 (removeParenthesis -> .)
    SEMI_COLON      reduce using rule 114 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 247

state 219

    (45) multipleWrite -> COMMA auxWritting .

    RIGHT_PAREN     reduce using rule 45 (multipleWrite -> COMMA auxWritting .)


state 220

    (52) auxLogicExpression -> AND addOperator . logicExpression
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    logicExpression                shift and go to state 248
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 221

    (53) auxLogicExpression -> OR addOperator . logicExpression
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    logicExpression                shift and go to state 249
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 222

    (56) auxExp -> GREATER_THAN addOperator . exp
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp                            shift and go to state 250
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 223

    (57) auxExp -> GREATER_EQUAL_THAN addOperator . exp
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp                            shift and go to state 251
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 224

    (58) auxExp -> LESS_THAN addOperator . exp
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp                            shift and go to state 252
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 225

    (59) auxExp -> LESS_EQUAL_THAN addOperator . exp
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp                            shift and go to state 253
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 226

    (60) auxExp -> NOT_EQUALS addOperator . exp
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp                            shift and go to state 254
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 227

    (61) auxExp -> EQUALS addOperator . exp
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp                            shift and go to state 255
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 228

    (64) exp2Aux -> PLUS addOperator . exp2
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp2                           shift and go to state 256
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 229

    (65) exp2Aux -> MINUS addOperator . exp2
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    exp2                           shift and go to state 257
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 230

    (68) auxTerm -> TIMES addOperator . term
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    term                           shift and go to state 258
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 231

    (69) auxTerm -> DIV addOperator . term
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    term                           shift and go to state 259
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 232

    (70) auxTerm -> MOD addOperator . term
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    term                           shift and go to state 260
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 233

    (71) auxTerm -> EXP addOperator . term
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    term                           shift and go to state 261
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 234

    (48) auxReading -> CTE_ID addOperand doReading multipleRead .

    RIGHT_PAREN     reduce using rule 48 (auxReading -> CTE_ID addOperand doReading multipleRead .)


state 235

    (49) multipleRead -> COMMA . auxReading
    (48) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 138

    auxReading                     shift and go to state 262

state 236

    (50) multipleRead -> empty .

    RIGHT_PAREN     reduce using rule 50 (multipleRead -> empty .)


state 237

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . else endIF
    (83) else -> . ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> . ELSE doElse funcBody
    (85) else -> . empty
    (135) empty -> .

    ELSE            shift and go to state 264
    VAR             reduce using rule 135 (empty -> .)
    CTE_ID          reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ_INPUT      reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)

    else                           shift and go to state 263
    empty                          shift and go to state 265

state 238

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN . funcBody endWhile
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 66

    funcBody                       shift and go to state 266

state 239

    (94) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 94 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)


state 240

    (15) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars
    (105) saveVariableID -> .

    LEFT_BRACKET    reduce using rule 105 (saveVariableID -> .)

    saveVariableID                 shift and go to state 267

state 241

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .

    FUNC            reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    MAIN            reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    CTE_ID          reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    PRINT           reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    READ_INPUT      reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    IF              reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    WHILE           reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    RETURN          reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix .)


state 242

    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .

    FUNC            reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    MAIN            reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    PRINT           reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    IF              reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    WHILE           reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    RETURN          reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars .)


state 243

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 268


state 244

    (41) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .

    VAR             reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CTE_ID          reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    PRINT           reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    READ_INPUT      reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    IF              reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    WHILE           reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RETURN          reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)


state 245

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .

    SEMI_COLON      reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    TIMES           reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    DIV             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    MOD             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    EXP             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    PLUS            reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    MINUS           reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    GREATER_THAN    reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    GREATER_EQUAL_THAN reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    LESS_THAN       reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    LESS_EQUAL_THAN reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    NOT_EQUALS      reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    EQUALS          reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    AND             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    OR              reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    COMMA           reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    RIGHT_PAREN     reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)


state 246

    (92) multipleArguments -> COMMA auxArguments .

    RIGHT_PAREN     reduce using rule 92 (multipleArguments -> COMMA auxArguments .)


state 247

    (73) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .

    TIMES           reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    DIV             reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MOD             reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EXP             reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    PLUS            reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MINUS           reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_THAN    reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_EQUAL_THAN reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_THAN       reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_EQUAL_THAN reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    NOT_EQUALS      reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EQUALS          reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    AND             reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    OR              reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    COMMA           reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    RIGHT_PAREN     reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    SEMI_COLON      reduce using rule 73 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)


state 248

    (52) auxLogicExpression -> AND addOperator logicExpression .

    COMMA           reduce using rule 52 (auxLogicExpression -> AND addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 52 (auxLogicExpression -> AND addOperator logicExpression .)
    SEMI_COLON      reduce using rule 52 (auxLogicExpression -> AND addOperator logicExpression .)


state 249

    (53) auxLogicExpression -> OR addOperator logicExpression .

    COMMA           reduce using rule 53 (auxLogicExpression -> OR addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 53 (auxLogicExpression -> OR addOperator logicExpression .)
    SEMI_COLON      reduce using rule 53 (auxLogicExpression -> OR addOperator logicExpression .)


state 250

    (56) auxExp -> GREATER_THAN addOperator exp .

    AND             reduce using rule 56 (auxExp -> GREATER_THAN addOperator exp .)
    OR              reduce using rule 56 (auxExp -> GREATER_THAN addOperator exp .)
    COMMA           reduce using rule 56 (auxExp -> GREATER_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 56 (auxExp -> GREATER_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 56 (auxExp -> GREATER_THAN addOperator exp .)


state 251

    (57) auxExp -> GREATER_EQUAL_THAN addOperator exp .

    AND             reduce using rule 57 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 57 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 57 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 57 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 57 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)


state 252

    (58) auxExp -> LESS_THAN addOperator exp .

    AND             reduce using rule 58 (auxExp -> LESS_THAN addOperator exp .)
    OR              reduce using rule 58 (auxExp -> LESS_THAN addOperator exp .)
    COMMA           reduce using rule 58 (auxExp -> LESS_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 58 (auxExp -> LESS_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 58 (auxExp -> LESS_THAN addOperator exp .)


state 253

    (59) auxExp -> LESS_EQUAL_THAN addOperator exp .

    AND             reduce using rule 59 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 59 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 59 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 59 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 59 (auxExp -> LESS_EQUAL_THAN addOperator exp .)


state 254

    (60) auxExp -> NOT_EQUALS addOperator exp .

    AND             reduce using rule 60 (auxExp -> NOT_EQUALS addOperator exp .)
    OR              reduce using rule 60 (auxExp -> NOT_EQUALS addOperator exp .)
    COMMA           reduce using rule 60 (auxExp -> NOT_EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 60 (auxExp -> NOT_EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 60 (auxExp -> NOT_EQUALS addOperator exp .)


state 255

    (61) auxExp -> EQUALS addOperator exp .

    AND             reduce using rule 61 (auxExp -> EQUALS addOperator exp .)
    OR              reduce using rule 61 (auxExp -> EQUALS addOperator exp .)
    COMMA           reduce using rule 61 (auxExp -> EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 61 (auxExp -> EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 61 (auxExp -> EQUALS addOperator exp .)


state 256

    (64) exp2Aux -> PLUS addOperator exp2 .

    GREATER_THAN    reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_THAN       reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    EQUALS          reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    AND             reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    OR              reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    COMMA           reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 64 (exp2Aux -> PLUS addOperator exp2 .)


state 257

    (65) exp2Aux -> MINUS addOperator exp2 .

    GREATER_THAN    reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_THAN       reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    EQUALS          reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    AND             reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    OR              reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    COMMA           reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 65 (exp2Aux -> MINUS addOperator exp2 .)


state 258

    (68) auxTerm -> TIMES addOperator term .

    PLUS            reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    MINUS           reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    GREATER_THAN    reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    LESS_THAN       reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    LESS_EQUAL_THAN reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    NOT_EQUALS      reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    EQUALS          reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    AND             reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    OR              reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    COMMA           reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    RIGHT_PAREN     reduce using rule 68 (auxTerm -> TIMES addOperator term .)
    SEMI_COLON      reduce using rule 68 (auxTerm -> TIMES addOperator term .)


state 259

    (69) auxTerm -> DIV addOperator term .

    PLUS            reduce using rule 69 (auxTerm -> DIV addOperator term .)
    MINUS           reduce using rule 69 (auxTerm -> DIV addOperator term .)
    GREATER_THAN    reduce using rule 69 (auxTerm -> DIV addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 69 (auxTerm -> DIV addOperator term .)
    LESS_THAN       reduce using rule 69 (auxTerm -> DIV addOperator term .)
    LESS_EQUAL_THAN reduce using rule 69 (auxTerm -> DIV addOperator term .)
    NOT_EQUALS      reduce using rule 69 (auxTerm -> DIV addOperator term .)
    EQUALS          reduce using rule 69 (auxTerm -> DIV addOperator term .)
    AND             reduce using rule 69 (auxTerm -> DIV addOperator term .)
    OR              reduce using rule 69 (auxTerm -> DIV addOperator term .)
    COMMA           reduce using rule 69 (auxTerm -> DIV addOperator term .)
    RIGHT_PAREN     reduce using rule 69 (auxTerm -> DIV addOperator term .)
    SEMI_COLON      reduce using rule 69 (auxTerm -> DIV addOperator term .)


state 260

    (70) auxTerm -> MOD addOperator term .

    PLUS            reduce using rule 70 (auxTerm -> MOD addOperator term .)
    MINUS           reduce using rule 70 (auxTerm -> MOD addOperator term .)
    GREATER_THAN    reduce using rule 70 (auxTerm -> MOD addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 70 (auxTerm -> MOD addOperator term .)
    LESS_THAN       reduce using rule 70 (auxTerm -> MOD addOperator term .)
    LESS_EQUAL_THAN reduce using rule 70 (auxTerm -> MOD addOperator term .)
    NOT_EQUALS      reduce using rule 70 (auxTerm -> MOD addOperator term .)
    EQUALS          reduce using rule 70 (auxTerm -> MOD addOperator term .)
    AND             reduce using rule 70 (auxTerm -> MOD addOperator term .)
    OR              reduce using rule 70 (auxTerm -> MOD addOperator term .)
    COMMA           reduce using rule 70 (auxTerm -> MOD addOperator term .)
    RIGHT_PAREN     reduce using rule 70 (auxTerm -> MOD addOperator term .)
    SEMI_COLON      reduce using rule 70 (auxTerm -> MOD addOperator term .)


state 261

    (71) auxTerm -> EXP addOperator term .

    PLUS            reduce using rule 71 (auxTerm -> EXP addOperator term .)
    MINUS           reduce using rule 71 (auxTerm -> EXP addOperator term .)
    GREATER_THAN    reduce using rule 71 (auxTerm -> EXP addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 71 (auxTerm -> EXP addOperator term .)
    LESS_THAN       reduce using rule 71 (auxTerm -> EXP addOperator term .)
    LESS_EQUAL_THAN reduce using rule 71 (auxTerm -> EXP addOperator term .)
    NOT_EQUALS      reduce using rule 71 (auxTerm -> EXP addOperator term .)
    EQUALS          reduce using rule 71 (auxTerm -> EXP addOperator term .)
    AND             reduce using rule 71 (auxTerm -> EXP addOperator term .)
    OR              reduce using rule 71 (auxTerm -> EXP addOperator term .)
    COMMA           reduce using rule 71 (auxTerm -> EXP addOperator term .)
    RIGHT_PAREN     reduce using rule 71 (auxTerm -> EXP addOperator term .)
    SEMI_COLON      reduce using rule 71 (auxTerm -> EXP addOperator term .)


state 262

    (49) multipleRead -> COMMA auxReading .

    RIGHT_PAREN     reduce using rule 49 (multipleRead -> COMMA auxReading .)


state 263

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else . endIF
    (124) endIF -> .

    VAR             reduce using rule 124 (endIF -> .)
    CTE_ID          reduce using rule 124 (endIF -> .)
    PRINT           reduce using rule 124 (endIF -> .)
    READ_INPUT      reduce using rule 124 (endIF -> .)
    IF              reduce using rule 124 (endIF -> .)
    WHILE           reduce using rule 124 (endIF -> .)
    RETURN          reduce using rule 124 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 124 (endIF -> .)

    endIF                          shift and go to state 269

state 264

    (83) else -> ELSE . doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> ELSE . doElse funcBody
    (125) doElse -> .

    IF              reduce using rule 125 (doElse -> .)
    LEFT_CURLY_BRACKET reduce using rule 125 (doElse -> .)

    doElse                         shift and go to state 270

state 265

    (85) else -> empty .

    VAR             reduce using rule 85 (else -> empty .)
    CTE_ID          reduce using rule 85 (else -> empty .)
    PRINT           reduce using rule 85 (else -> empty .)
    READ_INPUT      reduce using rule 85 (else -> empty .)
    IF              reduce using rule 85 (else -> empty .)
    WHILE           reduce using rule 85 (else -> empty .)
    RETURN          reduce using rule 85 (else -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 85 (else -> empty .)


state 266

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody . endWhile
    (127) endWhile -> .

    VAR             reduce using rule 127 (endWhile -> .)
    CTE_ID          reduce using rule 127 (endWhile -> .)
    PRINT           reduce using rule 127 (endWhile -> .)
    READ_INPUT      reduce using rule 127 (endWhile -> .)
    IF              reduce using rule 127 (endWhile -> .)
    WHILE           reduce using rule 127 (endWhile -> .)
    RETURN          reduce using rule 127 (endWhile -> .)
    RIGHT_CURLY_BRACKET reduce using rule 127 (endWhile -> .)

    endWhile                       shift and go to state 271

state 267

    (15) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 272


state 268

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray SEMI_COLON auxVars
    (106) saveArray -> .

    COMMA           reduce using rule 106 (saveArray -> .)
    SEMI_COLON      reduce using rule 106 (saveArray -> .)

    saveArray                      shift and go to state 71

state 269

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .

    VAR             reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CTE_ID          reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    PRINT           reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    READ_INPUT      reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    IF              reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    WHILE           reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RETURN          reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)


state 270

    (83) else -> ELSE doElse . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> ELSE doElse . funcBody
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    IF              shift and go to state 273
    LEFT_CURLY_BRACKET shift and go to state 66

    funcBody                       shift and go to state 274

state 271

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .

    VAR             reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    CTE_ID          reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    PRINT           reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    READ_INPUT      reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    IF              reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    WHILE           reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RETURN          reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RIGHT_CURLY_BRACKET reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)


state 272

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    CTE_INT         shift and go to state 275


state 273

    (83) else -> ELSE doElse IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF

    LEFT_PAREN      shift and go to state 276


state 274

    (84) else -> ELSE doElse funcBody .

    VAR             reduce using rule 84 (else -> ELSE doElse funcBody .)
    CTE_ID          reduce using rule 84 (else -> ELSE doElse funcBody .)
    PRINT           reduce using rule 84 (else -> ELSE doElse funcBody .)
    READ_INPUT      reduce using rule 84 (else -> ELSE doElse funcBody .)
    IF              reduce using rule 84 (else -> ELSE doElse funcBody .)
    WHILE           reduce using rule 84 (else -> ELSE doElse funcBody .)
    RETURN          reduce using rule 84 (else -> ELSE doElse funcBody .)
    RIGHT_CURLY_BRACKET reduce using rule 84 (else -> ELSE doElse funcBody .)


state 275

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars
    (110) addConstantOperand -> .

    RIGHT_BRACKET   reduce using rule 110 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 277

state 276

    (83) else -> ELSE doElse IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody else endIF
    (51) logicExpression -> . exp doLogicExpression auxLogicExpression
    (55) exp -> . exp2 doCompExpression auxExp
    (63) exp2 -> . term doExpression exp2Aux
    (67) term -> . factor doTerm auxTerm
    (73) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (74) factor -> . constants
    (75) constants -> . CTE_ID addOperand
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 122
    CTE_ID          shift and go to state 131
    CTE_INT         shift and go to state 132
    CTE_FLOAT       shift and go to state 133
    CTE_STRING      shift and go to state 140
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135

    logicExpression                shift and go to state 278
    exp                            shift and go to state 126
    exp2                           shift and go to state 127
    term                           shift and go to state 128
    factor                         shift and go to state 129
    constants                      shift and go to state 130
    functionCall                   shift and go to state 136

state 277

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 279


state 278

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody else endIF
    (123) doIF -> .

    RIGHT_PAREN     reduce using rule 123 (doIF -> .)

    doIF                           shift and go to state 280

state 279

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 70


state 280

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody else endIF

    RIGHT_PAREN     shift and go to state 281


state 281

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody else endIF
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 66

    funcBody                       shift and go to state 282

state 282

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . else endIF
    (83) else -> . ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> . ELSE doElse funcBody
    (85) else -> . empty
    (135) empty -> .

    ELSE            shift and go to state 264
    VAR             reduce using rule 135 (empty -> .)
    CTE_ID          reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ_INPUT      reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 135 (empty -> .)

    else                           shift and go to state 283
    empty                          shift and go to state 265

state 283

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else . endIF
    (124) endIF -> .

    VAR             reduce using rule 124 (endIF -> .)
    CTE_ID          reduce using rule 124 (endIF -> .)
    PRINT           reduce using rule 124 (endIF -> .)
    READ_INPUT      reduce using rule 124 (endIF -> .)
    IF              reduce using rule 124 (endIF -> .)
    WHILE           reduce using rule 124 (endIF -> .)
    RETURN          reduce using rule 124 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 124 (endIF -> .)

    endIF                          shift and go to state 284

state 284

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .

    VAR             reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CTE_ID          reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    PRINT           reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    READ_INPUT      reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    IF              reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    WHILE           reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RETURN          reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTE_ID in state 66 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 66 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 66 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 75 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 101 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 101 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 101 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (globalVariables -> empty)
WARNING: rejected rule (auxVars -> empty) in state 8
WARNING: reduce/reduce conflict in state 76 resolved using rule (auxVars -> empty)
WARNING: rejected rule (auxFuncBody -> empty) in state 76
WARNING: reduce/reduce conflict in state 125 resolved using rule (addConstantOperand -> <empty>)
WARNING: rejected rule (doWriteString -> <empty>) in state 125
WARNING: Rule (auxFuncBody -> empty) is never reduced
WARNING: Rule (doWriteString -> <empty>) is never reduced
