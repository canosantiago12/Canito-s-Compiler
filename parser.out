Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BINOMIAL
    MEAN
    MEDIAN
    MODE
    PLOT
    POISSON
    STANDARD_DEVIATION
    VARIANCE

Grammar

Rule 0     S' -> program_main
Rule 1     program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
Rule 2     globalVariables -> vars
Rule 3     globalVariables -> empty
Rule 4     globalFunctions -> funcs
Rule 5     globalFunctions -> empty
Rule 6     vars -> auxVars
Rule 7     auxVars -> VAR type vars_type_single
Rule 8     auxVars -> VAR type vars_type_array
Rule 9     auxVars -> VAR type vars_type_matrix
Rule 10    auxVars -> empty
Rule 11    vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single
Rule 12    vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars
Rule 13    vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
Rule 14    vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
Rule 15    vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
Rule 16    vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
Rule 17    funcs -> funcs_aux globalFunctions
Rule 18    funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 19    funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 20    params -> auxParams
Rule 21    params -> empty
Rule 22    auxParams -> type CTE_ID multipleParams
Rule 23    multipleParams -> COMMA auxParams
Rule 24    multipleParams -> empty
Rule 25    funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET
Rule 26    auxFuncBody -> vars statements auxFuncBody
Rule 27    auxFuncBody -> statements auxFuncBody
Rule 28    auxFuncBody -> empty
Rule 29    return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
Rule 30    auxReturn -> logicExpression
Rule 31    auxReturn -> empty
Rule 32    type -> INT setCurrentType
Rule 33    type -> FLOAT setCurrentType
Rule 34    type -> BOOL setCurrentType
Rule 35    type -> STRING setCurrentType
Rule 36    statements -> assignment
Rule 37    statements -> writting
Rule 38    statements -> reading
Rule 39    statements -> if
Rule 40    statements -> while
Rule 41    statements -> return
Rule 42    writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
Rule 43    auxWritting -> logicExpression doWrite multipleWrite
Rule 44    auxWritting -> CTE_STRING doWriteString multipleWrite
Rule 45    multipleWrite -> COMMA auxWritting
Rule 46    multipleWrite -> empty
Rule 47    reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
Rule 48    auxReading -> CTE_ID addOperand doReading multipleRead
Rule 49    multipleRead -> COMMA auxReading
Rule 50    multipleRead -> empty
Rule 51    assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
Rule 52    logicExpression -> exp doLogicExpression auxLogicExpression
Rule 53    auxLogicExpression -> AND addOperator logicExpression
Rule 54    auxLogicExpression -> OR addOperator logicExpression
Rule 55    auxLogicExpression -> empty
Rule 56    exp -> exp2 doCompExpression auxExp
Rule 57    auxExp -> GREATER_THAN addOperator exp
Rule 58    auxExp -> GREATER_EQUAL_THAN addOperator exp
Rule 59    auxExp -> LESS_THAN addOperator exp
Rule 60    auxExp -> LESS_EQUAL_THAN addOperator exp
Rule 61    auxExp -> NOT_EQUALS addOperator exp
Rule 62    auxExp -> EQUALS addOperator exp
Rule 63    auxExp -> empty
Rule 64    exp2 -> term doExpression exp2Aux
Rule 65    exp2Aux -> PLUS addOperator exp2
Rule 66    exp2Aux -> MINUS addOperator exp2
Rule 67    exp2Aux -> empty
Rule 68    term -> factor doTerm auxTerm
Rule 69    auxTerm -> TIMES addOperator term
Rule 70    auxTerm -> DIV addOperator term
Rule 71    auxTerm -> MOD addOperator term
Rule 72    auxTerm -> EXP addOperator term
Rule 73    auxTerm -> empty
Rule 74    factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
Rule 75    factor -> constants
Rule 76    constants -> CTE_ID addOperand
Rule 77    constants -> CTE_INT addConstantOperand
Rule 78    constants -> CTE_FLOAT addConstantOperand
Rule 79    constants -> CTE_STRING addConstantOperand
Rule 80    constants -> TRUE addConstantBool
Rule 81    constants -> FALSE addConstantBool
Rule 82    if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
Rule 83    else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF
Rule 84    else -> ELSE doElse funcBody
Rule 85    else -> empty
Rule 86    while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
Rule 87    for -> FOR LEFT_PAREN CTE_ID COMMA auxFor COMMA auxFor RIGHT_PAREN funcBody
Rule 88    auxFor -> CTE_ID
Rule 89    auxFor -> CTE_INT
Rule 90    startup -> <empty>
Rule 91    setMain -> <empty>
Rule 92    endProgram -> <empty>
Rule 93    endPrint -> <empty>
Rule 94    saveFuncID -> <empty>
Rule 95    addMemoryInfo -> <empty>
Rule 96    endFunction -> <empty>
Rule 97    doIF -> <empty>
Rule 98    endIF -> <empty>
Rule 99    doElse -> <empty>
Rule 100   doWhile -> <empty>
Rule 101   endWhile -> <empty>
Rule 102   addCondStart -> <empty>
Rule 103   saveVariableID -> <empty>
Rule 104   setCurrentType -> <empty>
Rule 105   addOperand -> <empty>
Rule 106   addConstantOperand -> <empty>
Rule 107   addConstantBool -> <empty>
Rule 108   addOperator -> <empty>
Rule 109   addParenthesis -> <empty>
Rule 110   removeParenthesis -> <empty>
Rule 111   doLogicExpression -> <empty>
Rule 112   doCompExpression -> <empty>
Rule 113   doExpression -> <empty>
Rule 114   doTerm -> <empty>
Rule 115   doAssign -> <empty>
Rule 116   doWrite -> <empty>
Rule 117   doWriteString -> <empty>
Rule 118   doReading -> <empty>
Rule 119   empty -> <empty>

Terminals, with rules where they appear

AND                  : 53
BINOMIAL             : 
BOOL                 : 34
BTSProgam            : 1
COMMA                : 11 13 15 23 45 49 87 87
CTE_FLOAT            : 78
CTE_ID               : 1 11 12 13 14 15 16 18 19 22 48 51 76 87 88
CTE_INT              : 13 14 15 15 16 16 77 89
CTE_STRING           : 44 79
DIV                  : 70
ELSE                 : 83 84
EQUAL                : 51
EQUALS               : 62
EXP                  : 72
FALSE                : 81
FLOAT                : 33
FOR                  : 87
FUNC                 : 18 19
GREATER_EQUAL_THAN   : 58
GREATER_THAN         : 57
IF                   : 82 83
INT                  : 32
LEFT_BRACKET         : 13 14 15 15 16 16
LEFT_CURLY_BRACKET   : 25
LEFT_PAREN           : 1 18 19 29 42 47 74 82 83 86 87
LESS_EQUAL_THAN      : 60
LESS_THAN            : 59
MAIN                 : 1
MEAN                 : 
MEDIAN               : 
MINUS                : 66
MOD                  : 71
MODE                 : 
NOT_EQUALS           : 61
OR                   : 54
PLOT                 : 
PLUS                 : 65
POISSON              : 
PRINT                : 42
READ_INPUT           : 47
RETURN               : 29
RETURN_SIGN          : 29
RIGHT_BRACKET        : 13 14 15 15 16 16
RIGHT_CURLY_BRACKET  : 25
RIGHT_PAREN          : 1 18 19 29 42 47 74 82 83 86 87
SEMI_COLON           : 1 12 14 16 29 42 47 51
STANDARD_DEVIATION   : 
STRING               : 35
TIMES                : 69
TRUE                 : 80
VAR                  : 7 8 9
VARIANCE             : 
WHILE                : 86
error                : 

Nonterminals, with rules where they appear

addCondStart         : 86
addConstantBool      : 80 81
addConstantOperand   : 77 78 79
addMemoryInfo        : 1 18 19
addOperand           : 48 51 76
addOperator          : 47 51 53 54 57 58 59 60 61 62 65 66 69 70 71 72
addParenthesis       : 74
assignment           : 36
auxExp               : 56
auxFor               : 87 87
auxFuncBody          : 25 26 27
auxLogicExpression   : 52
auxParams            : 20 23
auxReading           : 47 49
auxReturn            : 29
auxTerm              : 68
auxVars              : 6 12 14 16
auxWritting          : 42 45
constants            : 75
doAssign             : 51
doCompExpression     : 56
doElse               : 83 84
doExpression         : 64
doIF                 : 82 83
doLogicExpression    : 52
doReading            : 48
doTerm               : 68
doWhile              : 86
doWrite              : 43
doWriteString        : 44
else                 : 82
empty                : 3 5 10 21 24 28 31 46 50 55 63 67 73 85
endFunction          : 1 18 19
endIF                : 82 83
endPrint             : 1
endProgram           : 1
endWhile             : 86
exp                  : 52 57 58 59 60 61 62
exp2                 : 56 65 66
exp2Aux              : 64
factor               : 68
for                  : 
funcBody             : 1 18 19 82 83 84 86 87
funcs                : 4
funcs_aux            : 17
globalFunctions      : 1 17
globalVariables      : 1
if                   : 39
logicExpression      : 30 43 51 53 54 74 82 83 86
multipleParams       : 22
multipleRead         : 48
multipleWrite        : 43 44
params               : 18 19
program_main         : 0
reading              : 38
removeParenthesis    : 74
return               : 41
saveFuncID           : 1 18 19
saveVariableID       : 11 12 13 14 15 16
setCurrentType       : 32 33 34 35
setMain              : 1
startup              : 1
statements           : 26 27
term                 : 64 69 70 71 72
type                 : 7 8 9 18 22
vars                 : 2 26
vars_type_array      : 8 13
vars_type_matrix     : 9 15
vars_type_single     : 7 11
while                : 40
writting             : 37

Parsing method: LALR

state 0

    (0) S' -> . program_main
    (1) program_main -> . BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    BTSProgam       shift and go to state 2

    program_main                   shift and go to state 1

state 1

    (0) S' -> program_main .



state 2

    (1) program_main -> BTSProgam . CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    CTE_ID          shift and go to state 3


state 3

    (1) program_main -> BTSProgam CTE_ID . startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (90) startup -> .

    SEMI_COLON      reduce using rule 90 (startup -> .)

    startup                        shift and go to state 4

state 4

    (1) program_main -> BTSProgam CTE_ID startup . SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    SEMI_COLON      shift and go to state 5


state 5

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON . globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (2) globalVariables -> . vars
    (3) globalVariables -> . empty
    (6) vars -> . auxVars
    (119) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty

    FUNC            reduce using rule 119 (empty -> .)
    MAIN            reduce using rule 119 (empty -> .)
    VAR             shift and go to state 10

    globalVariables                shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8
    auxVars                        shift and go to state 9

state 6

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables . globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (17) funcs -> . funcs_aux globalFunctions
    (119) empty -> .
    (18) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (19) funcs_aux -> . FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 119 (empty -> .)
    FUNC            shift and go to state 15

    globalFunctions                shift and go to state 11
    funcs                          shift and go to state 12
    empty                          shift and go to state 13
    funcs_aux                      shift and go to state 14

state 7

    (2) globalVariables -> vars .

    FUNC            reduce using rule 2 (globalVariables -> vars .)
    MAIN            reduce using rule 2 (globalVariables -> vars .)


state 8

    (3) globalVariables -> empty .
    (10) auxVars -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 3 (globalVariables -> empty .)
  ! reduce/reduce conflict for MAIN resolved using rule 3 (globalVariables -> empty .)
    FUNC            reduce using rule 3 (globalVariables -> empty .)
    MAIN            reduce using rule 3 (globalVariables -> empty .)

  ! FUNC            [ reduce using rule 10 (auxVars -> empty .) ]
  ! MAIN            [ reduce using rule 10 (auxVars -> empty .) ]


state 9

    (6) vars -> auxVars .

    FUNC            reduce using rule 6 (vars -> auxVars .)
    MAIN            reduce using rule 6 (vars -> auxVars .)
    CTE_ID          reduce using rule 6 (vars -> auxVars .)
    PRINT           reduce using rule 6 (vars -> auxVars .)
    READ_INPUT      reduce using rule 6 (vars -> auxVars .)
    IF              reduce using rule 6 (vars -> auxVars .)
    WHILE           reduce using rule 6 (vars -> auxVars .)
    RETURN          reduce using rule 6 (vars -> auxVars .)


state 10

    (7) auxVars -> VAR . type vars_type_single
    (8) auxVars -> VAR . type vars_type_array
    (9) auxVars -> VAR . type vars_type_matrix
    (32) type -> . INT setCurrentType
    (33) type -> . FLOAT setCurrentType
    (34) type -> . BOOL setCurrentType
    (35) type -> . STRING setCurrentType

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    type                           shift and go to state 16

state 11

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions . MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    MAIN            shift and go to state 21


state 12

    (4) globalFunctions -> funcs .

    MAIN            reduce using rule 4 (globalFunctions -> funcs .)


state 13

    (5) globalFunctions -> empty .

    MAIN            reduce using rule 5 (globalFunctions -> empty .)


state 14

    (17) funcs -> funcs_aux . globalFunctions
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (17) funcs -> . funcs_aux globalFunctions
    (119) empty -> .
    (18) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (19) funcs_aux -> . FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 119 (empty -> .)
    FUNC            shift and go to state 15

    funcs_aux                      shift and go to state 14
    globalFunctions                shift and go to state 22
    funcs                          shift and go to state 12
    empty                          shift and go to state 13

state 15

    (18) funcs_aux -> FUNC . type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (19) funcs_aux -> FUNC . CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (32) type -> . INT setCurrentType
    (33) type -> . FLOAT setCurrentType
    (34) type -> . BOOL setCurrentType
    (35) type -> . STRING setCurrentType

    CTE_ID          shift and go to state 24
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    type                           shift and go to state 23

state 16

    (7) auxVars -> VAR type . vars_type_single
    (8) auxVars -> VAR type . vars_type_array
    (9) auxVars -> VAR type . vars_type_matrix
    (11) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (12) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars
    (13) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_ID          shift and go to state 28

    vars_type_single               shift and go to state 25
    vars_type_array                shift and go to state 26
    vars_type_matrix               shift and go to state 27

state 17

    (32) type -> INT . setCurrentType
    (104) setCurrentType -> .

    CTE_ID          reduce using rule 104 (setCurrentType -> .)

    setCurrentType                 shift and go to state 29

state 18

    (33) type -> FLOAT . setCurrentType
    (104) setCurrentType -> .

    CTE_ID          reduce using rule 104 (setCurrentType -> .)

    setCurrentType                 shift and go to state 30

state 19

    (34) type -> BOOL . setCurrentType
    (104) setCurrentType -> .

    CTE_ID          reduce using rule 104 (setCurrentType -> .)

    setCurrentType                 shift and go to state 31

state 20

    (35) type -> STRING . setCurrentType
    (104) setCurrentType -> .

    CTE_ID          reduce using rule 104 (setCurrentType -> .)

    setCurrentType                 shift and go to state 32

state 21

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN . saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (94) saveFuncID -> .

    LEFT_PAREN      reduce using rule 94 (saveFuncID -> .)

    saveFuncID                     shift and go to state 33

state 22

    (17) funcs -> funcs_aux globalFunctions .

    MAIN            reduce using rule 17 (funcs -> funcs_aux globalFunctions .)


state 23

    (18) funcs_aux -> FUNC type . CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    CTE_ID          shift and go to state 34


state 24

    (19) funcs_aux -> FUNC CTE_ID . saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (94) saveFuncID -> .

    LEFT_PAREN      reduce using rule 94 (saveFuncID -> .)

    saveFuncID                     shift and go to state 35

state 25

    (7) auxVars -> VAR type vars_type_single .

    FUNC            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    MAIN            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    CTE_ID          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    PRINT           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    READ_INPUT      reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    IF              reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    WHILE           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    RETURN          reduce using rule 7 (auxVars -> VAR type vars_type_single .)


state 26

    (8) auxVars -> VAR type vars_type_array .

    FUNC            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    MAIN            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    CTE_ID          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    PRINT           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    READ_INPUT      reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    IF              reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    WHILE           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    RETURN          reduce using rule 8 (auxVars -> VAR type vars_type_array .)


state 27

    (9) auxVars -> VAR type vars_type_matrix .

    FUNC            reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    MAIN            reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    CTE_ID          reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    PRINT           reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    READ_INPUT      reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    IF              reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    WHILE           reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    RETURN          reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)


state 28

    (11) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (12) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (13) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (103) saveVariableID -> .

    COMMA           reduce using rule 103 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 103 (saveVariableID -> .)
    LEFT_BRACKET    reduce using rule 103 (saveVariableID -> .)

    saveVariableID                 shift and go to state 36

state 29

    (32) type -> INT setCurrentType .

    CTE_ID          reduce using rule 32 (type -> INT setCurrentType .)


state 30

    (33) type -> FLOAT setCurrentType .

    CTE_ID          reduce using rule 33 (type -> FLOAT setCurrentType .)


state 31

    (34) type -> BOOL setCurrentType .

    CTE_ID          reduce using rule 34 (type -> BOOL setCurrentType .)


state 32

    (35) type -> STRING setCurrentType .

    CTE_ID          reduce using rule 35 (type -> STRING setCurrentType .)


state 33

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID . addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (95) addMemoryInfo -> .

    LEFT_PAREN      reduce using rule 95 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 37

state 34

    (18) funcs_aux -> FUNC type CTE_ID . saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (94) saveFuncID -> .

    LEFT_PAREN      reduce using rule 94 (saveFuncID -> .)

    saveFuncID                     shift and go to state 38

state 35

    (19) funcs_aux -> FUNC CTE_ID saveFuncID . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 39


state 36

    (11) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (12) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars
    (13) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    COMMA           shift and go to state 40
    SEMI_COLON      shift and go to state 41
    LEFT_BRACKET    shift and go to state 42


state 37

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo . LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    LEFT_PAREN      shift and go to state 43


state 38

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 44


state 39

    (19) funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (20) params -> . auxParams
    (21) params -> . empty
    (22) auxParams -> . type CTE_ID multipleParams
    (119) empty -> .
    (32) type -> . INT setCurrentType
    (33) type -> . FLOAT setCurrentType
    (34) type -> . BOOL setCurrentType
    (35) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 119 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    params                         shift and go to state 45
    auxParams                      shift and go to state 46
    empty                          shift and go to state 47
    type                           shift and go to state 48

state 40

    (11) vars_type_single -> CTE_ID saveVariableID COMMA . vars_type_single
    (11) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (12) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars

    CTE_ID          shift and go to state 49

    vars_type_single               shift and go to state 50

state 41

    (12) vars_type_single -> CTE_ID saveVariableID SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (119) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 119 (empty -> .)
    MAIN            reduce using rule 119 (empty -> .)
    CTE_ID          reduce using rule 119 (empty -> .)
    PRINT           reduce using rule 119 (empty -> .)
    READ_INPUT      reduce using rule 119 (empty -> .)
    IF              reduce using rule 119 (empty -> .)
    WHILE           reduce using rule 119 (empty -> .)
    RETURN          reduce using rule 119 (empty -> .)

    auxVars                        shift and go to state 51
    empty                          shift and go to state 52

state 42

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 53


state 43

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN . RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    RIGHT_PAREN     shift and go to state 54


state 44

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (20) params -> . auxParams
    (21) params -> . empty
    (22) auxParams -> . type CTE_ID multipleParams
    (119) empty -> .
    (32) type -> . INT setCurrentType
    (33) type -> . FLOAT setCurrentType
    (34) type -> . BOOL setCurrentType
    (35) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 119 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    type                           shift and go to state 48
    params                         shift and go to state 55
    auxParams                      shift and go to state 46
    empty                          shift and go to state 47

state 45

    (19) funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 56


state 46

    (20) params -> auxParams .

    RIGHT_PAREN     reduce using rule 20 (params -> auxParams .)


state 47

    (21) params -> empty .

    RIGHT_PAREN     reduce using rule 21 (params -> empty .)


state 48

    (22) auxParams -> type . CTE_ID multipleParams

    CTE_ID          shift and go to state 57


state 49

    (11) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (12) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (103) saveVariableID -> .

    COMMA           reduce using rule 103 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 103 (saveVariableID -> .)

    saveVariableID                 shift and go to state 58

state 50

    (11) vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .

    FUNC            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    MAIN            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    CTE_ID          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    PRINT           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    READ_INPUT      reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    IF              reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    WHILE           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    RETURN          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)


state 51

    (12) vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .

    FUNC            reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    MAIN            reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    PRINT           reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    IF              reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    WHILE           reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    RETURN          reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)


state 52

    (10) auxVars -> empty .

    FUNC            reduce using rule 10 (auxVars -> empty .)
    MAIN            reduce using rule 10 (auxVars -> empty .)
    CTE_ID          reduce using rule 10 (auxVars -> empty .)
    PRINT           reduce using rule 10 (auxVars -> empty .)
    READ_INPUT      reduce using rule 10 (auxVars -> empty .)
    IF              reduce using rule 10 (auxVars -> empty .)
    WHILE           reduce using rule 10 (auxVars -> empty .)
    RETURN          reduce using rule 10 (auxVars -> empty .)


state 53

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 59


state 54

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN . setMain funcBody endFunction endProgram endPrint
    (91) setMain -> .

    LEFT_CURLY_BRACKET reduce using rule 91 (setMain -> .)

    setMain                        shift and go to state 60

state 55

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 61


state 56

    (19) funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 63

    funcBody                       shift and go to state 62

state 57

    (22) auxParams -> type CTE_ID . multipleParams
    (23) multipleParams -> . COMMA auxParams
    (24) multipleParams -> . empty
    (119) empty -> .

    COMMA           shift and go to state 65
    RIGHT_PAREN     reduce using rule 119 (empty -> .)

    multipleParams                 shift and go to state 64
    empty                          shift and go to state 66

state 58

    (11) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (12) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars

    COMMA           shift and go to state 40
    SEMI_COLON      shift and go to state 41


state 59

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    COMMA           shift and go to state 68
    SEMI_COLON      shift and go to state 69
    LEFT_BRACKET    shift and go to state 67


state 60

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain . funcBody endFunction endProgram endPrint
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 63

    funcBody                       shift and go to state 70

state 61

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 63

    funcBody                       shift and go to state 71

state 62

    (19) funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (95) addMemoryInfo -> .

    FUNC            reduce using rule 95 (addMemoryInfo -> .)
    MAIN            reduce using rule 95 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 72

state 63

    (25) funcBody -> LEFT_CURLY_BRACKET . auxFuncBody RIGHT_CURLY_BRACKET
    (26) auxFuncBody -> . vars statements auxFuncBody
    (27) auxFuncBody -> . statements auxFuncBody
    (28) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (36) statements -> . assignment
    (37) statements -> . writting
    (38) statements -> . reading
    (39) statements -> . if
    (40) statements -> . while
    (41) statements -> . return
    (119) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (51) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (29) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 119 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

  ! CTE_ID          [ reduce using rule 119 (empty -> .) ]
  ! PRINT           [ reduce using rule 119 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 119 (empty -> .) ]
  ! IF              [ reduce using rule 119 (empty -> .) ]
  ! WHILE           [ reduce using rule 119 (empty -> .) ]
  ! RETURN          [ reduce using rule 119 (empty -> .) ]

    auxFuncBody                    shift and go to state 73
    vars                           shift and go to state 74
    statements                     shift and go to state 75
    empty                          shift and go to state 76
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    return                         shift and go to state 82

state 64

    (22) auxParams -> type CTE_ID multipleParams .

    RIGHT_PAREN     reduce using rule 22 (auxParams -> type CTE_ID multipleParams .)


state 65

    (23) multipleParams -> COMMA . auxParams
    (22) auxParams -> . type CTE_ID multipleParams
    (32) type -> . INT setCurrentType
    (33) type -> . FLOAT setCurrentType
    (34) type -> . BOOL setCurrentType
    (35) type -> . STRING setCurrentType

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    auxParams                      shift and go to state 89
    type                           shift and go to state 48

state 66

    (24) multipleParams -> empty .

    RIGHT_PAREN     reduce using rule 24 (multipleParams -> empty .)


state 67

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET . CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET . CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 90


state 68

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA . vars_type_array
    (13) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_ID          shift and go to state 91

    vars_type_array                shift and go to state 92

state 69

    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (119) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 119 (empty -> .)
    MAIN            reduce using rule 119 (empty -> .)
    CTE_ID          reduce using rule 119 (empty -> .)
    PRINT           reduce using rule 119 (empty -> .)
    READ_INPUT      reduce using rule 119 (empty -> .)
    IF              reduce using rule 119 (empty -> .)
    WHILE           reduce using rule 119 (empty -> .)
    RETURN          reduce using rule 119 (empty -> .)

    auxVars                        shift and go to state 93
    empty                          shift and go to state 52

state 70

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody . endFunction endProgram endPrint
    (96) endFunction -> .

    $end            reduce using rule 96 (endFunction -> .)

    endFunction                    shift and go to state 94

state 71

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (95) addMemoryInfo -> .

    FUNC            reduce using rule 95 (addMemoryInfo -> .)
    MAIN            reduce using rule 95 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 95

state 72

    (19) funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (96) endFunction -> .

    FUNC            reduce using rule 96 (endFunction -> .)
    MAIN            reduce using rule 96 (endFunction -> .)

    endFunction                    shift and go to state 96

state 73

    (25) funcBody -> LEFT_CURLY_BRACKET auxFuncBody . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 97


state 74

    (26) auxFuncBody -> vars . statements auxFuncBody
    (36) statements -> . assignment
    (37) statements -> . writting
    (38) statements -> . reading
    (39) statements -> . if
    (40) statements -> . while
    (41) statements -> . return
    (51) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (29) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

    statements                     shift and go to state 98
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    return                         shift and go to state 82

state 75

    (27) auxFuncBody -> statements . auxFuncBody
    (26) auxFuncBody -> . vars statements auxFuncBody
    (27) auxFuncBody -> . statements auxFuncBody
    (28) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (36) statements -> . assignment
    (37) statements -> . writting
    (38) statements -> . reading
    (39) statements -> . if
    (40) statements -> . while
    (41) statements -> . return
    (119) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (51) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (29) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 119 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

  ! CTE_ID          [ reduce using rule 119 (empty -> .) ]
  ! PRINT           [ reduce using rule 119 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 119 (empty -> .) ]
  ! IF              [ reduce using rule 119 (empty -> .) ]
  ! WHILE           [ reduce using rule 119 (empty -> .) ]
  ! RETURN          [ reduce using rule 119 (empty -> .) ]

    statements                     shift and go to state 75
    auxFuncBody                    shift and go to state 99
    vars                           shift and go to state 74
    empty                          shift and go to state 76
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    return                         shift and go to state 82

state 76

    (28) auxFuncBody -> empty .
    (10) auxVars -> empty .

    RIGHT_CURLY_BRACKET reduce using rule 28 (auxFuncBody -> empty .)
    CTE_ID          reduce using rule 10 (auxVars -> empty .)
    PRINT           reduce using rule 10 (auxVars -> empty .)
    READ_INPUT      reduce using rule 10 (auxVars -> empty .)
    IF              reduce using rule 10 (auxVars -> empty .)
    WHILE           reduce using rule 10 (auxVars -> empty .)
    RETURN          reduce using rule 10 (auxVars -> empty .)


state 77

    (36) statements -> assignment .

    VAR             reduce using rule 36 (statements -> assignment .)
    CTE_ID          reduce using rule 36 (statements -> assignment .)
    PRINT           reduce using rule 36 (statements -> assignment .)
    READ_INPUT      reduce using rule 36 (statements -> assignment .)
    IF              reduce using rule 36 (statements -> assignment .)
    WHILE           reduce using rule 36 (statements -> assignment .)
    RETURN          reduce using rule 36 (statements -> assignment .)
    RIGHT_CURLY_BRACKET reduce using rule 36 (statements -> assignment .)


state 78

    (37) statements -> writting .

    VAR             reduce using rule 37 (statements -> writting .)
    CTE_ID          reduce using rule 37 (statements -> writting .)
    PRINT           reduce using rule 37 (statements -> writting .)
    READ_INPUT      reduce using rule 37 (statements -> writting .)
    IF              reduce using rule 37 (statements -> writting .)
    WHILE           reduce using rule 37 (statements -> writting .)
    RETURN          reduce using rule 37 (statements -> writting .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (statements -> writting .)


state 79

    (38) statements -> reading .

    VAR             reduce using rule 38 (statements -> reading .)
    CTE_ID          reduce using rule 38 (statements -> reading .)
    PRINT           reduce using rule 38 (statements -> reading .)
    READ_INPUT      reduce using rule 38 (statements -> reading .)
    IF              reduce using rule 38 (statements -> reading .)
    WHILE           reduce using rule 38 (statements -> reading .)
    RETURN          reduce using rule 38 (statements -> reading .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (statements -> reading .)


state 80

    (39) statements -> if .

    VAR             reduce using rule 39 (statements -> if .)
    CTE_ID          reduce using rule 39 (statements -> if .)
    PRINT           reduce using rule 39 (statements -> if .)
    READ_INPUT      reduce using rule 39 (statements -> if .)
    IF              reduce using rule 39 (statements -> if .)
    WHILE           reduce using rule 39 (statements -> if .)
    RETURN          reduce using rule 39 (statements -> if .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (statements -> if .)


state 81

    (40) statements -> while .

    VAR             reduce using rule 40 (statements -> while .)
    CTE_ID          reduce using rule 40 (statements -> while .)
    PRINT           reduce using rule 40 (statements -> while .)
    READ_INPUT      reduce using rule 40 (statements -> while .)
    IF              reduce using rule 40 (statements -> while .)
    WHILE           reduce using rule 40 (statements -> while .)
    RETURN          reduce using rule 40 (statements -> while .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (statements -> while .)


state 82

    (41) statements -> return .

    VAR             reduce using rule 41 (statements -> return .)
    CTE_ID          reduce using rule 41 (statements -> return .)
    PRINT           reduce using rule 41 (statements -> return .)
    READ_INPUT      reduce using rule 41 (statements -> return .)
    IF              reduce using rule 41 (statements -> return .)
    WHILE           reduce using rule 41 (statements -> return .)
    RETURN          reduce using rule 41 (statements -> return .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (statements -> return .)


state 83

    (51) assignment -> CTE_ID . addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (105) addOperand -> .

    EQUAL           reduce using rule 105 (addOperand -> .)

    addOperand                     shift and go to state 100

state 84

    (42) writting -> PRINT . LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 101


state 85

    (47) reading -> READ_INPUT . addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 102

state 86

    (82) if -> IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF

    LEFT_PAREN      shift and go to state 103


state 87

    (86) while -> WHILE . LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile

    LEFT_PAREN      shift and go to state 104


state 88

    (29) return -> RETURN . RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    RETURN_SIGN     shift and go to state 105


state 89

    (23) multipleParams -> COMMA auxParams .

    RIGHT_PAREN     reduce using rule 23 (multipleParams -> COMMA auxParams .)


state 90

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT . RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT . RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 106


state 91

    (13) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (103) saveVariableID -> .

    LEFT_BRACKET    reduce using rule 103 (saveVariableID -> .)

    saveVariableID                 shift and go to state 107

state 92

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .

    FUNC            reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    MAIN            reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    CTE_ID          reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    PRINT           reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    READ_INPUT      reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    IF              reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    WHILE           reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    RETURN          reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)


state 93

    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .

    FUNC            reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    MAIN            reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    PRINT           reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    IF              reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    WHILE           reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    RETURN          reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)


state 94

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction . endProgram endPrint
    (92) endProgram -> .

    $end            reduce using rule 92 (endProgram -> .)

    endProgram                     shift and go to state 108

state 95

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (96) endFunction -> .

    FUNC            reduce using rule 96 (endFunction -> .)
    MAIN            reduce using rule 96 (endFunction -> .)

    endFunction                    shift and go to state 109

state 96

    (19) funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 19 (funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 19 (funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 97

    (25) funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .

    FUNC            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    CTE_ID          reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    PRINT           reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    READ_INPUT      reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)


state 98

    (26) auxFuncBody -> vars statements . auxFuncBody
    (26) auxFuncBody -> . vars statements auxFuncBody
    (27) auxFuncBody -> . statements auxFuncBody
    (28) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (36) statements -> . assignment
    (37) statements -> . writting
    (38) statements -> . reading
    (39) statements -> . if
    (40) statements -> . while
    (41) statements -> . return
    (119) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (51) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (42) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (47) reading -> . READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (29) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 119 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

  ! CTE_ID          [ reduce using rule 119 (empty -> .) ]
  ! PRINT           [ reduce using rule 119 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 119 (empty -> .) ]
  ! IF              [ reduce using rule 119 (empty -> .) ]
  ! WHILE           [ reduce using rule 119 (empty -> .) ]
  ! RETURN          [ reduce using rule 119 (empty -> .) ]

    vars                           shift and go to state 74
    statements                     shift and go to state 75
    auxFuncBody                    shift and go to state 110
    empty                          shift and go to state 76
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 77
    writting                       shift and go to state 78
    reading                        shift and go to state 79
    if                             shift and go to state 80
    while                          shift and go to state 81
    return                         shift and go to state 82

state 99

    (27) auxFuncBody -> statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 27 (auxFuncBody -> statements auxFuncBody .)


state 100

    (51) assignment -> CTE_ID addOperand . EQUAL addOperator logicExpression doAssign SEMI_COLON

    EQUAL           shift and go to state 111


state 101

    (42) writting -> PRINT LEFT_PAREN . auxWritting RIGHT_PAREN SEMI_COLON
    (43) auxWritting -> . logicExpression doWrite multipleWrite
    (44) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    CTE_STRING      shift and go to state 115
    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    auxWritting                    shift and go to state 113
    logicExpression                shift and go to state 114
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 102

    (47) reading -> READ_INPUT addOperator . LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 126


state 103

    (82) if -> IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody else endIF
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    logicExpression                shift and go to state 127
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 104

    (86) while -> WHILE LEFT_PAREN . addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (102) addCondStart -> .

    LEFT_PAREN      reduce using rule 102 (addCondStart -> .)
    CTE_ID          reduce using rule 102 (addCondStart -> .)
    CTE_INT         reduce using rule 102 (addCondStart -> .)
    CTE_FLOAT       reduce using rule 102 (addCondStart -> .)
    CTE_STRING      reduce using rule 102 (addCondStart -> .)
    TRUE            reduce using rule 102 (addCondStart -> .)
    FALSE           reduce using rule 102 (addCondStart -> .)

    addCondStart                   shift and go to state 129

state 105

    (29) return -> RETURN RETURN_SIGN . LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 130


state 106

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET . COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET . SEMI_COLON auxVars

    COMMA           shift and go to state 131
    SEMI_COLON      shift and go to state 132


state 107

    (13) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 133


state 108

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram . endPrint
    (93) endPrint -> .

    $end            reduce using rule 93 (endPrint -> .)

    endPrint                       shift and go to state 134

state 109

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 18 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 18 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 110

    (26) auxFuncBody -> vars statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 26 (auxFuncBody -> vars statements auxFuncBody .)


state 111

    (51) assignment -> CTE_ID addOperand EQUAL . addOperator logicExpression doAssign SEMI_COLON
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 135

state 112

    (74) factor -> LEFT_PAREN . addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (109) addParenthesis -> .

    LEFT_PAREN      reduce using rule 109 (addParenthesis -> .)
    CTE_ID          reduce using rule 109 (addParenthesis -> .)
    CTE_INT         reduce using rule 109 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 109 (addParenthesis -> .)
    CTE_STRING      reduce using rule 109 (addParenthesis -> .)
    TRUE            reduce using rule 109 (addParenthesis -> .)
    FALSE           reduce using rule 109 (addParenthesis -> .)

    addParenthesis                 shift and go to state 136

state 113

    (42) writting -> PRINT LEFT_PAREN auxWritting . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 137


state 114

    (43) auxWritting -> logicExpression . doWrite multipleWrite
    (116) doWrite -> .

    COMMA           reduce using rule 116 (doWrite -> .)
    RIGHT_PAREN     reduce using rule 116 (doWrite -> .)

    doWrite                        shift and go to state 138

state 115

    (44) auxWritting -> CTE_STRING . doWriteString multipleWrite
    (79) constants -> CTE_STRING . addConstantOperand
    (117) doWriteString -> .
    (106) addConstantOperand -> .

  ! reduce/reduce conflict for COMMA resolved using rule 106 (addConstantOperand -> .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 106 (addConstantOperand -> .)
    TIMES           reduce using rule 106 (addConstantOperand -> .)
    DIV             reduce using rule 106 (addConstantOperand -> .)
    MOD             reduce using rule 106 (addConstantOperand -> .)
    EXP             reduce using rule 106 (addConstantOperand -> .)
    PLUS            reduce using rule 106 (addConstantOperand -> .)
    MINUS           reduce using rule 106 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 106 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 106 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 106 (addConstantOperand -> .)
    EQUALS          reduce using rule 106 (addConstantOperand -> .)
    AND             reduce using rule 106 (addConstantOperand -> .)
    OR              reduce using rule 106 (addConstantOperand -> .)
    COMMA           reduce using rule 106 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 106 (addConstantOperand -> .)

  ! COMMA           [ reduce using rule 117 (doWriteString -> .) ]
  ! RIGHT_PAREN     [ reduce using rule 117 (doWriteString -> .) ]

    doWriteString                  shift and go to state 139
    addConstantOperand             shift and go to state 140

state 116

    (52) logicExpression -> exp . doLogicExpression auxLogicExpression
    (111) doLogicExpression -> .

    AND             reduce using rule 111 (doLogicExpression -> .)
    OR              reduce using rule 111 (doLogicExpression -> .)
    COMMA           reduce using rule 111 (doLogicExpression -> .)
    RIGHT_PAREN     reduce using rule 111 (doLogicExpression -> .)
    SEMI_COLON      reduce using rule 111 (doLogicExpression -> .)

    doLogicExpression              shift and go to state 141

state 117

    (56) exp -> exp2 . doCompExpression auxExp
    (112) doCompExpression -> .

    GREATER_THAN    reduce using rule 112 (doCompExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (doCompExpression -> .)
    LESS_THAN       reduce using rule 112 (doCompExpression -> .)
    LESS_EQUAL_THAN reduce using rule 112 (doCompExpression -> .)
    NOT_EQUALS      reduce using rule 112 (doCompExpression -> .)
    EQUALS          reduce using rule 112 (doCompExpression -> .)
    AND             reduce using rule 112 (doCompExpression -> .)
    OR              reduce using rule 112 (doCompExpression -> .)
    COMMA           reduce using rule 112 (doCompExpression -> .)
    RIGHT_PAREN     reduce using rule 112 (doCompExpression -> .)
    SEMI_COLON      reduce using rule 112 (doCompExpression -> .)

    doCompExpression               shift and go to state 142

state 118

    (64) exp2 -> term . doExpression exp2Aux
    (113) doExpression -> .

    PLUS            reduce using rule 113 (doExpression -> .)
    MINUS           reduce using rule 113 (doExpression -> .)
    GREATER_THAN    reduce using rule 113 (doExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 113 (doExpression -> .)
    LESS_THAN       reduce using rule 113 (doExpression -> .)
    LESS_EQUAL_THAN reduce using rule 113 (doExpression -> .)
    NOT_EQUALS      reduce using rule 113 (doExpression -> .)
    EQUALS          reduce using rule 113 (doExpression -> .)
    AND             reduce using rule 113 (doExpression -> .)
    OR              reduce using rule 113 (doExpression -> .)
    COMMA           reduce using rule 113 (doExpression -> .)
    RIGHT_PAREN     reduce using rule 113 (doExpression -> .)
    SEMI_COLON      reduce using rule 113 (doExpression -> .)

    doExpression                   shift and go to state 143

state 119

    (68) term -> factor . doTerm auxTerm
    (114) doTerm -> .

    TIMES           reduce using rule 114 (doTerm -> .)
    DIV             reduce using rule 114 (doTerm -> .)
    MOD             reduce using rule 114 (doTerm -> .)
    EXP             reduce using rule 114 (doTerm -> .)
    PLUS            reduce using rule 114 (doTerm -> .)
    MINUS           reduce using rule 114 (doTerm -> .)
    GREATER_THAN    reduce using rule 114 (doTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 114 (doTerm -> .)
    LESS_THAN       reduce using rule 114 (doTerm -> .)
    LESS_EQUAL_THAN reduce using rule 114 (doTerm -> .)
    NOT_EQUALS      reduce using rule 114 (doTerm -> .)
    EQUALS          reduce using rule 114 (doTerm -> .)
    AND             reduce using rule 114 (doTerm -> .)
    OR              reduce using rule 114 (doTerm -> .)
    COMMA           reduce using rule 114 (doTerm -> .)
    RIGHT_PAREN     reduce using rule 114 (doTerm -> .)
    SEMI_COLON      reduce using rule 114 (doTerm -> .)

    doTerm                         shift and go to state 144

state 120

    (75) factor -> constants .

    TIMES           reduce using rule 75 (factor -> constants .)
    DIV             reduce using rule 75 (factor -> constants .)
    MOD             reduce using rule 75 (factor -> constants .)
    EXP             reduce using rule 75 (factor -> constants .)
    PLUS            reduce using rule 75 (factor -> constants .)
    MINUS           reduce using rule 75 (factor -> constants .)
    GREATER_THAN    reduce using rule 75 (factor -> constants .)
    GREATER_EQUAL_THAN reduce using rule 75 (factor -> constants .)
    LESS_THAN       reduce using rule 75 (factor -> constants .)
    LESS_EQUAL_THAN reduce using rule 75 (factor -> constants .)
    NOT_EQUALS      reduce using rule 75 (factor -> constants .)
    EQUALS          reduce using rule 75 (factor -> constants .)
    AND             reduce using rule 75 (factor -> constants .)
    OR              reduce using rule 75 (factor -> constants .)
    COMMA           reduce using rule 75 (factor -> constants .)
    RIGHT_PAREN     reduce using rule 75 (factor -> constants .)
    SEMI_COLON      reduce using rule 75 (factor -> constants .)


state 121

    (76) constants -> CTE_ID . addOperand
    (105) addOperand -> .

    TIMES           reduce using rule 105 (addOperand -> .)
    DIV             reduce using rule 105 (addOperand -> .)
    MOD             reduce using rule 105 (addOperand -> .)
    EXP             reduce using rule 105 (addOperand -> .)
    PLUS            reduce using rule 105 (addOperand -> .)
    MINUS           reduce using rule 105 (addOperand -> .)
    GREATER_THAN    reduce using rule 105 (addOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 105 (addOperand -> .)
    LESS_THAN       reduce using rule 105 (addOperand -> .)
    LESS_EQUAL_THAN reduce using rule 105 (addOperand -> .)
    NOT_EQUALS      reduce using rule 105 (addOperand -> .)
    EQUALS          reduce using rule 105 (addOperand -> .)
    AND             reduce using rule 105 (addOperand -> .)
    OR              reduce using rule 105 (addOperand -> .)
    COMMA           reduce using rule 105 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 105 (addOperand -> .)
    SEMI_COLON      reduce using rule 105 (addOperand -> .)

    addOperand                     shift and go to state 145

state 122

    (77) constants -> CTE_INT . addConstantOperand
    (106) addConstantOperand -> .

    TIMES           reduce using rule 106 (addConstantOperand -> .)
    DIV             reduce using rule 106 (addConstantOperand -> .)
    MOD             reduce using rule 106 (addConstantOperand -> .)
    EXP             reduce using rule 106 (addConstantOperand -> .)
    PLUS            reduce using rule 106 (addConstantOperand -> .)
    MINUS           reduce using rule 106 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 106 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 106 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 106 (addConstantOperand -> .)
    EQUALS          reduce using rule 106 (addConstantOperand -> .)
    AND             reduce using rule 106 (addConstantOperand -> .)
    OR              reduce using rule 106 (addConstantOperand -> .)
    COMMA           reduce using rule 106 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 106 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 106 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 146

state 123

    (78) constants -> CTE_FLOAT . addConstantOperand
    (106) addConstantOperand -> .

    TIMES           reduce using rule 106 (addConstantOperand -> .)
    DIV             reduce using rule 106 (addConstantOperand -> .)
    MOD             reduce using rule 106 (addConstantOperand -> .)
    EXP             reduce using rule 106 (addConstantOperand -> .)
    PLUS            reduce using rule 106 (addConstantOperand -> .)
    MINUS           reduce using rule 106 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 106 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 106 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 106 (addConstantOperand -> .)
    EQUALS          reduce using rule 106 (addConstantOperand -> .)
    AND             reduce using rule 106 (addConstantOperand -> .)
    OR              reduce using rule 106 (addConstantOperand -> .)
    COMMA           reduce using rule 106 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 106 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 106 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 147

state 124

    (80) constants -> TRUE . addConstantBool
    (107) addConstantBool -> .

    TIMES           reduce using rule 107 (addConstantBool -> .)
    DIV             reduce using rule 107 (addConstantBool -> .)
    MOD             reduce using rule 107 (addConstantBool -> .)
    EXP             reduce using rule 107 (addConstantBool -> .)
    PLUS            reduce using rule 107 (addConstantBool -> .)
    MINUS           reduce using rule 107 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 107 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (addConstantBool -> .)
    LESS_THAN       reduce using rule 107 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 107 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 107 (addConstantBool -> .)
    EQUALS          reduce using rule 107 (addConstantBool -> .)
    AND             reduce using rule 107 (addConstantBool -> .)
    OR              reduce using rule 107 (addConstantBool -> .)
    COMMA           reduce using rule 107 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 107 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 107 (addConstantBool -> .)

    addConstantBool                shift and go to state 148

state 125

    (81) constants -> FALSE . addConstantBool
    (107) addConstantBool -> .

    TIMES           reduce using rule 107 (addConstantBool -> .)
    DIV             reduce using rule 107 (addConstantBool -> .)
    MOD             reduce using rule 107 (addConstantBool -> .)
    EXP             reduce using rule 107 (addConstantBool -> .)
    PLUS            reduce using rule 107 (addConstantBool -> .)
    MINUS           reduce using rule 107 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 107 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (addConstantBool -> .)
    LESS_THAN       reduce using rule 107 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 107 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 107 (addConstantBool -> .)
    EQUALS          reduce using rule 107 (addConstantBool -> .)
    AND             reduce using rule 107 (addConstantBool -> .)
    OR              reduce using rule 107 (addConstantBool -> .)
    COMMA           reduce using rule 107 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 107 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 107 (addConstantBool -> .)

    addConstantBool                shift and go to state 149

state 126

    (47) reading -> READ_INPUT addOperator LEFT_PAREN . auxReading RIGHT_PAREN SEMI_COLON
    (48) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 151

    auxReading                     shift and go to state 150

state 127

    (82) if -> IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody else endIF
    (97) doIF -> .

    RIGHT_PAREN     reduce using rule 97 (doIF -> .)

    doIF                           shift and go to state 152

state 128

    (79) constants -> CTE_STRING . addConstantOperand
    (106) addConstantOperand -> .

    TIMES           reduce using rule 106 (addConstantOperand -> .)
    DIV             reduce using rule 106 (addConstantOperand -> .)
    MOD             reduce using rule 106 (addConstantOperand -> .)
    EXP             reduce using rule 106 (addConstantOperand -> .)
    PLUS            reduce using rule 106 (addConstantOperand -> .)
    MINUS           reduce using rule 106 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 106 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 106 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 106 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 106 (addConstantOperand -> .)
    EQUALS          reduce using rule 106 (addConstantOperand -> .)
    AND             reduce using rule 106 (addConstantOperand -> .)
    OR              reduce using rule 106 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 106 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 106 (addConstantOperand -> .)
    COMMA           reduce using rule 106 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 140

state 129

    (86) while -> WHILE LEFT_PAREN addCondStart . logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    logicExpression                shift and go to state 153
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 130

    (29) return -> RETURN RETURN_SIGN LEFT_PAREN . auxReturn RIGHT_PAREN SEMI_COLON
    (30) auxReturn -> . logicExpression
    (31) auxReturn -> . empty
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (119) empty -> .
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    RIGHT_PAREN     reduce using rule 119 (empty -> .)
    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    auxReturn                      shift and go to state 154
    logicExpression                shift and go to state 155
    empty                          shift and go to state 156
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 131

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA . vars_type_matrix
    (15) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_ID          shift and go to state 157

    vars_type_matrix               shift and go to state 158

state 132

    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (119) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 119 (empty -> .)
    MAIN            reduce using rule 119 (empty -> .)
    CTE_ID          reduce using rule 119 (empty -> .)
    PRINT           reduce using rule 119 (empty -> .)
    READ_INPUT      reduce using rule 119 (empty -> .)
    IF              reduce using rule 119 (empty -> .)
    WHILE           reduce using rule 119 (empty -> .)
    RETURN          reduce using rule 119 (empty -> .)

    auxVars                        shift and go to state 159
    empty                          shift and go to state 52

state 133

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 160


state 134

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .

    $end            reduce using rule 1 (program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .)


state 135

    (51) assignment -> CTE_ID addOperand EQUAL addOperator . logicExpression doAssign SEMI_COLON
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    logicExpression                shift and go to state 161
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 136

    (74) factor -> LEFT_PAREN addParenthesis . logicExpression RIGHT_PAREN removeParenthesis
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    logicExpression                shift and go to state 162
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 137

    (42) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 163


state 138

    (43) auxWritting -> logicExpression doWrite . multipleWrite
    (45) multipleWrite -> . COMMA auxWritting
    (46) multipleWrite -> . empty
    (119) empty -> .

    COMMA           shift and go to state 165
    RIGHT_PAREN     reduce using rule 119 (empty -> .)

    multipleWrite                  shift and go to state 164
    empty                          shift and go to state 166

state 139

    (44) auxWritting -> CTE_STRING doWriteString . multipleWrite
    (45) multipleWrite -> . COMMA auxWritting
    (46) multipleWrite -> . empty
    (119) empty -> .

    COMMA           shift and go to state 165
    RIGHT_PAREN     reduce using rule 119 (empty -> .)

    multipleWrite                  shift and go to state 167
    empty                          shift and go to state 166

state 140

    (79) constants -> CTE_STRING addConstantOperand .

    TIMES           reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    DIV             reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    MOD             reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    EXP             reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    PLUS            reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    MINUS           reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    GREATER_THAN    reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    LESS_THAN       reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    NOT_EQUALS      reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    EQUALS          reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    AND             reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    OR              reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    COMMA           reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    RIGHT_PAREN     reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)
    SEMI_COLON      reduce using rule 79 (constants -> CTE_STRING addConstantOperand .)


state 141

    (52) logicExpression -> exp doLogicExpression . auxLogicExpression
    (53) auxLogicExpression -> . AND addOperator logicExpression
    (54) auxLogicExpression -> . OR addOperator logicExpression
    (55) auxLogicExpression -> . empty
    (119) empty -> .

    AND             shift and go to state 169
    OR              shift and go to state 170
    COMMA           reduce using rule 119 (empty -> .)
    RIGHT_PAREN     reduce using rule 119 (empty -> .)
    SEMI_COLON      reduce using rule 119 (empty -> .)

    auxLogicExpression             shift and go to state 168
    empty                          shift and go to state 171

state 142

    (56) exp -> exp2 doCompExpression . auxExp
    (57) auxExp -> . GREATER_THAN addOperator exp
    (58) auxExp -> . GREATER_EQUAL_THAN addOperator exp
    (59) auxExp -> . LESS_THAN addOperator exp
    (60) auxExp -> . LESS_EQUAL_THAN addOperator exp
    (61) auxExp -> . NOT_EQUALS addOperator exp
    (62) auxExp -> . EQUALS addOperator exp
    (63) auxExp -> . empty
    (119) empty -> .

    GREATER_THAN    shift and go to state 173
    GREATER_EQUAL_THAN shift and go to state 174
    LESS_THAN       shift and go to state 175
    LESS_EQUAL_THAN shift and go to state 176
    NOT_EQUALS      shift and go to state 177
    EQUALS          shift and go to state 178
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    RIGHT_PAREN     reduce using rule 119 (empty -> .)
    SEMI_COLON      reduce using rule 119 (empty -> .)

    auxExp                         shift and go to state 172
    empty                          shift and go to state 179

state 143

    (64) exp2 -> term doExpression . exp2Aux
    (65) exp2Aux -> . PLUS addOperator exp2
    (66) exp2Aux -> . MINUS addOperator exp2
    (67) exp2Aux -> . empty
    (119) empty -> .

    PLUS            shift and go to state 181
    MINUS           shift and go to state 182
    GREATER_THAN    reduce using rule 119 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 119 (empty -> .)
    LESS_THAN       reduce using rule 119 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 119 (empty -> .)
    NOT_EQUALS      reduce using rule 119 (empty -> .)
    EQUALS          reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    RIGHT_PAREN     reduce using rule 119 (empty -> .)
    SEMI_COLON      reduce using rule 119 (empty -> .)

    exp2Aux                        shift and go to state 180
    empty                          shift and go to state 183

state 144

    (68) term -> factor doTerm . auxTerm
    (69) auxTerm -> . TIMES addOperator term
    (70) auxTerm -> . DIV addOperator term
    (71) auxTerm -> . MOD addOperator term
    (72) auxTerm -> . EXP addOperator term
    (73) auxTerm -> . empty
    (119) empty -> .

    TIMES           shift and go to state 185
    DIV             shift and go to state 186
    MOD             shift and go to state 187
    EXP             shift and go to state 188
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GREATER_THAN    reduce using rule 119 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 119 (empty -> .)
    LESS_THAN       reduce using rule 119 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 119 (empty -> .)
    NOT_EQUALS      reduce using rule 119 (empty -> .)
    EQUALS          reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    RIGHT_PAREN     reduce using rule 119 (empty -> .)
    SEMI_COLON      reduce using rule 119 (empty -> .)

    auxTerm                        shift and go to state 184
    empty                          shift and go to state 189

state 145

    (76) constants -> CTE_ID addOperand .

    TIMES           reduce using rule 76 (constants -> CTE_ID addOperand .)
    DIV             reduce using rule 76 (constants -> CTE_ID addOperand .)
    MOD             reduce using rule 76 (constants -> CTE_ID addOperand .)
    EXP             reduce using rule 76 (constants -> CTE_ID addOperand .)
    PLUS            reduce using rule 76 (constants -> CTE_ID addOperand .)
    MINUS           reduce using rule 76 (constants -> CTE_ID addOperand .)
    GREATER_THAN    reduce using rule 76 (constants -> CTE_ID addOperand .)
    GREATER_EQUAL_THAN reduce using rule 76 (constants -> CTE_ID addOperand .)
    LESS_THAN       reduce using rule 76 (constants -> CTE_ID addOperand .)
    LESS_EQUAL_THAN reduce using rule 76 (constants -> CTE_ID addOperand .)
    NOT_EQUALS      reduce using rule 76 (constants -> CTE_ID addOperand .)
    EQUALS          reduce using rule 76 (constants -> CTE_ID addOperand .)
    AND             reduce using rule 76 (constants -> CTE_ID addOperand .)
    OR              reduce using rule 76 (constants -> CTE_ID addOperand .)
    COMMA           reduce using rule 76 (constants -> CTE_ID addOperand .)
    RIGHT_PAREN     reduce using rule 76 (constants -> CTE_ID addOperand .)
    SEMI_COLON      reduce using rule 76 (constants -> CTE_ID addOperand .)


state 146

    (77) constants -> CTE_INT addConstantOperand .

    TIMES           reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    DIV             reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    MOD             reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    EXP             reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    PLUS            reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    MINUS           reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    GREATER_THAN    reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    LESS_THAN       reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    NOT_EQUALS      reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    EQUALS          reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    AND             reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    OR              reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    COMMA           reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 77 (constants -> CTE_INT addConstantOperand .)
    SEMI_COLON      reduce using rule 77 (constants -> CTE_INT addConstantOperand .)


state 147

    (78) constants -> CTE_FLOAT addConstantOperand .

    TIMES           reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    DIV             reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    MOD             reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    EXP             reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    PLUS            reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    MINUS           reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_THAN    reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_THAN       reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    NOT_EQUALS      reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    EQUALS          reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    AND             reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    OR              reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    COMMA           reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)
    SEMI_COLON      reduce using rule 78 (constants -> CTE_FLOAT addConstantOperand .)


state 148

    (80) constants -> TRUE addConstantBool .

    TIMES           reduce using rule 80 (constants -> TRUE addConstantBool .)
    DIV             reduce using rule 80 (constants -> TRUE addConstantBool .)
    MOD             reduce using rule 80 (constants -> TRUE addConstantBool .)
    EXP             reduce using rule 80 (constants -> TRUE addConstantBool .)
    PLUS            reduce using rule 80 (constants -> TRUE addConstantBool .)
    MINUS           reduce using rule 80 (constants -> TRUE addConstantBool .)
    GREATER_THAN    reduce using rule 80 (constants -> TRUE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 80 (constants -> TRUE addConstantBool .)
    LESS_THAN       reduce using rule 80 (constants -> TRUE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 80 (constants -> TRUE addConstantBool .)
    NOT_EQUALS      reduce using rule 80 (constants -> TRUE addConstantBool .)
    EQUALS          reduce using rule 80 (constants -> TRUE addConstantBool .)
    AND             reduce using rule 80 (constants -> TRUE addConstantBool .)
    OR              reduce using rule 80 (constants -> TRUE addConstantBool .)
    COMMA           reduce using rule 80 (constants -> TRUE addConstantBool .)
    RIGHT_PAREN     reduce using rule 80 (constants -> TRUE addConstantBool .)
    SEMI_COLON      reduce using rule 80 (constants -> TRUE addConstantBool .)


state 149

    (81) constants -> FALSE addConstantBool .

    TIMES           reduce using rule 81 (constants -> FALSE addConstantBool .)
    DIV             reduce using rule 81 (constants -> FALSE addConstantBool .)
    MOD             reduce using rule 81 (constants -> FALSE addConstantBool .)
    EXP             reduce using rule 81 (constants -> FALSE addConstantBool .)
    PLUS            reduce using rule 81 (constants -> FALSE addConstantBool .)
    MINUS           reduce using rule 81 (constants -> FALSE addConstantBool .)
    GREATER_THAN    reduce using rule 81 (constants -> FALSE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 81 (constants -> FALSE addConstantBool .)
    LESS_THAN       reduce using rule 81 (constants -> FALSE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 81 (constants -> FALSE addConstantBool .)
    NOT_EQUALS      reduce using rule 81 (constants -> FALSE addConstantBool .)
    EQUALS          reduce using rule 81 (constants -> FALSE addConstantBool .)
    AND             reduce using rule 81 (constants -> FALSE addConstantBool .)
    OR              reduce using rule 81 (constants -> FALSE addConstantBool .)
    COMMA           reduce using rule 81 (constants -> FALSE addConstantBool .)
    RIGHT_PAREN     reduce using rule 81 (constants -> FALSE addConstantBool .)
    SEMI_COLON      reduce using rule 81 (constants -> FALSE addConstantBool .)


state 150

    (47) reading -> READ_INPUT addOperator LEFT_PAREN auxReading . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 190


state 151

    (48) auxReading -> CTE_ID . addOperand doReading multipleRead
    (105) addOperand -> .

    COMMA           reduce using rule 105 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 105 (addOperand -> .)

    addOperand                     shift and go to state 191

state 152

    (82) if -> IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody else endIF

    RIGHT_PAREN     shift and go to state 192


state 153

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression . doWhile RIGHT_PAREN funcBody endWhile
    (100) doWhile -> .

    RIGHT_PAREN     reduce using rule 100 (doWhile -> .)

    doWhile                        shift and go to state 193

state 154

    (29) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 194


state 155

    (30) auxReturn -> logicExpression .

    RIGHT_PAREN     reduce using rule 30 (auxReturn -> logicExpression .)


state 156

    (31) auxReturn -> empty .

    RIGHT_PAREN     reduce using rule 31 (auxReturn -> empty .)


state 157

    (15) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (103) saveVariableID -> .

    LEFT_BRACKET    reduce using rule 103 (saveVariableID -> .)

    saveVariableID                 shift and go to state 195

state 158

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .

    FUNC            reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    MAIN            reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    CTE_ID          reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    PRINT           reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    READ_INPUT      reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    IF              reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    WHILE           reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    RETURN          reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)


state 159

    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .

    FUNC            reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    MAIN            reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    PRINT           reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    IF              reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    WHILE           reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    RETURN          reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)


state 160

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 196


state 161

    (51) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression . doAssign SEMI_COLON
    (115) doAssign -> .

    SEMI_COLON      reduce using rule 115 (doAssign -> .)

    doAssign                       shift and go to state 197

state 162

    (74) factor -> LEFT_PAREN addParenthesis logicExpression . RIGHT_PAREN removeParenthesis

    RIGHT_PAREN     shift and go to state 198


state 163

    (42) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)


state 164

    (43) auxWritting -> logicExpression doWrite multipleWrite .

    RIGHT_PAREN     reduce using rule 43 (auxWritting -> logicExpression doWrite multipleWrite .)


state 165

    (45) multipleWrite -> COMMA . auxWritting
    (43) auxWritting -> . logicExpression doWrite multipleWrite
    (44) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    CTE_STRING      shift and go to state 115
    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    auxWritting                    shift and go to state 199
    logicExpression                shift and go to state 114
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 166

    (46) multipleWrite -> empty .

    RIGHT_PAREN     reduce using rule 46 (multipleWrite -> empty .)


state 167

    (44) auxWritting -> CTE_STRING doWriteString multipleWrite .

    RIGHT_PAREN     reduce using rule 44 (auxWritting -> CTE_STRING doWriteString multipleWrite .)


state 168

    (52) logicExpression -> exp doLogicExpression auxLogicExpression .

    COMMA           reduce using rule 52 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    RIGHT_PAREN     reduce using rule 52 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    SEMI_COLON      reduce using rule 52 (logicExpression -> exp doLogicExpression auxLogicExpression .)


state 169

    (53) auxLogicExpression -> AND . addOperator logicExpression
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 200

state 170

    (54) auxLogicExpression -> OR . addOperator logicExpression
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 201

state 171

    (55) auxLogicExpression -> empty .

    COMMA           reduce using rule 55 (auxLogicExpression -> empty .)
    RIGHT_PAREN     reduce using rule 55 (auxLogicExpression -> empty .)
    SEMI_COLON      reduce using rule 55 (auxLogicExpression -> empty .)


state 172

    (56) exp -> exp2 doCompExpression auxExp .

    AND             reduce using rule 56 (exp -> exp2 doCompExpression auxExp .)
    OR              reduce using rule 56 (exp -> exp2 doCompExpression auxExp .)
    COMMA           reduce using rule 56 (exp -> exp2 doCompExpression auxExp .)
    RIGHT_PAREN     reduce using rule 56 (exp -> exp2 doCompExpression auxExp .)
    SEMI_COLON      reduce using rule 56 (exp -> exp2 doCompExpression auxExp .)


state 173

    (57) auxExp -> GREATER_THAN . addOperator exp
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 202

state 174

    (58) auxExp -> GREATER_EQUAL_THAN . addOperator exp
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 203

state 175

    (59) auxExp -> LESS_THAN . addOperator exp
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 204

state 176

    (60) auxExp -> LESS_EQUAL_THAN . addOperator exp
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 205

state 177

    (61) auxExp -> NOT_EQUALS . addOperator exp
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 206

state 178

    (62) auxExp -> EQUALS . addOperator exp
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 207

state 179

    (63) auxExp -> empty .

    AND             reduce using rule 63 (auxExp -> empty .)
    OR              reduce using rule 63 (auxExp -> empty .)
    COMMA           reduce using rule 63 (auxExp -> empty .)
    RIGHT_PAREN     reduce using rule 63 (auxExp -> empty .)
    SEMI_COLON      reduce using rule 63 (auxExp -> empty .)


state 180

    (64) exp2 -> term doExpression exp2Aux .

    GREATER_THAN    reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    GREATER_EQUAL_THAN reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    LESS_THAN       reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    LESS_EQUAL_THAN reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    NOT_EQUALS      reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    EQUALS          reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    AND             reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    OR              reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    COMMA           reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    RIGHT_PAREN     reduce using rule 64 (exp2 -> term doExpression exp2Aux .)
    SEMI_COLON      reduce using rule 64 (exp2 -> term doExpression exp2Aux .)


state 181

    (65) exp2Aux -> PLUS . addOperator exp2
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 208

state 182

    (66) exp2Aux -> MINUS . addOperator exp2
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 209

state 183

    (67) exp2Aux -> empty .

    GREATER_THAN    reduce using rule 67 (exp2Aux -> empty .)
    GREATER_EQUAL_THAN reduce using rule 67 (exp2Aux -> empty .)
    LESS_THAN       reduce using rule 67 (exp2Aux -> empty .)
    LESS_EQUAL_THAN reduce using rule 67 (exp2Aux -> empty .)
    NOT_EQUALS      reduce using rule 67 (exp2Aux -> empty .)
    EQUALS          reduce using rule 67 (exp2Aux -> empty .)
    AND             reduce using rule 67 (exp2Aux -> empty .)
    OR              reduce using rule 67 (exp2Aux -> empty .)
    COMMA           reduce using rule 67 (exp2Aux -> empty .)
    RIGHT_PAREN     reduce using rule 67 (exp2Aux -> empty .)
    SEMI_COLON      reduce using rule 67 (exp2Aux -> empty .)


state 184

    (68) term -> factor doTerm auxTerm .

    PLUS            reduce using rule 68 (term -> factor doTerm auxTerm .)
    MINUS           reduce using rule 68 (term -> factor doTerm auxTerm .)
    GREATER_THAN    reduce using rule 68 (term -> factor doTerm auxTerm .)
    GREATER_EQUAL_THAN reduce using rule 68 (term -> factor doTerm auxTerm .)
    LESS_THAN       reduce using rule 68 (term -> factor doTerm auxTerm .)
    LESS_EQUAL_THAN reduce using rule 68 (term -> factor doTerm auxTerm .)
    NOT_EQUALS      reduce using rule 68 (term -> factor doTerm auxTerm .)
    EQUALS          reduce using rule 68 (term -> factor doTerm auxTerm .)
    AND             reduce using rule 68 (term -> factor doTerm auxTerm .)
    OR              reduce using rule 68 (term -> factor doTerm auxTerm .)
    COMMA           reduce using rule 68 (term -> factor doTerm auxTerm .)
    RIGHT_PAREN     reduce using rule 68 (term -> factor doTerm auxTerm .)
    SEMI_COLON      reduce using rule 68 (term -> factor doTerm auxTerm .)


state 185

    (69) auxTerm -> TIMES . addOperator term
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 210

state 186

    (70) auxTerm -> DIV . addOperator term
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 211

state 187

    (71) auxTerm -> MOD . addOperator term
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 212

state 188

    (72) auxTerm -> EXP . addOperator term
    (108) addOperator -> .

    LEFT_PAREN      reduce using rule 108 (addOperator -> .)
    CTE_ID          reduce using rule 108 (addOperator -> .)
    CTE_INT         reduce using rule 108 (addOperator -> .)
    CTE_FLOAT       reduce using rule 108 (addOperator -> .)
    CTE_STRING      reduce using rule 108 (addOperator -> .)
    TRUE            reduce using rule 108 (addOperator -> .)
    FALSE           reduce using rule 108 (addOperator -> .)

    addOperator                    shift and go to state 213

state 189

    (73) auxTerm -> empty .

    PLUS            reduce using rule 73 (auxTerm -> empty .)
    MINUS           reduce using rule 73 (auxTerm -> empty .)
    GREATER_THAN    reduce using rule 73 (auxTerm -> empty .)
    GREATER_EQUAL_THAN reduce using rule 73 (auxTerm -> empty .)
    LESS_THAN       reduce using rule 73 (auxTerm -> empty .)
    LESS_EQUAL_THAN reduce using rule 73 (auxTerm -> empty .)
    NOT_EQUALS      reduce using rule 73 (auxTerm -> empty .)
    EQUALS          reduce using rule 73 (auxTerm -> empty .)
    AND             reduce using rule 73 (auxTerm -> empty .)
    OR              reduce using rule 73 (auxTerm -> empty .)
    COMMA           reduce using rule 73 (auxTerm -> empty .)
    RIGHT_PAREN     reduce using rule 73 (auxTerm -> empty .)
    SEMI_COLON      reduce using rule 73 (auxTerm -> empty .)


state 190

    (47) reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 214


state 191

    (48) auxReading -> CTE_ID addOperand . doReading multipleRead
    (118) doReading -> .

    COMMA           reduce using rule 118 (doReading -> .)
    RIGHT_PAREN     reduce using rule 118 (doReading -> .)

    doReading                      shift and go to state 215

state 192

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody else endIF
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 63

    funcBody                       shift and go to state 216

state 193

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile . RIGHT_PAREN funcBody endWhile

    RIGHT_PAREN     shift and go to state 217


state 194

    (29) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 218


state 195

    (15) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 219


state 196

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . SEMI_COLON auxVars

    COMMA           shift and go to state 68
    SEMI_COLON      shift and go to state 69


state 197

    (51) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign . SEMI_COLON

    SEMI_COLON      shift and go to state 220


state 198

    (74) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN . removeParenthesis
    (110) removeParenthesis -> .

    TIMES           reduce using rule 110 (removeParenthesis -> .)
    DIV             reduce using rule 110 (removeParenthesis -> .)
    MOD             reduce using rule 110 (removeParenthesis -> .)
    EXP             reduce using rule 110 (removeParenthesis -> .)
    PLUS            reduce using rule 110 (removeParenthesis -> .)
    MINUS           reduce using rule 110 (removeParenthesis -> .)
    GREATER_THAN    reduce using rule 110 (removeParenthesis -> .)
    GREATER_EQUAL_THAN reduce using rule 110 (removeParenthesis -> .)
    LESS_THAN       reduce using rule 110 (removeParenthesis -> .)
    LESS_EQUAL_THAN reduce using rule 110 (removeParenthesis -> .)
    NOT_EQUALS      reduce using rule 110 (removeParenthesis -> .)
    EQUALS          reduce using rule 110 (removeParenthesis -> .)
    AND             reduce using rule 110 (removeParenthesis -> .)
    OR              reduce using rule 110 (removeParenthesis -> .)
    COMMA           reduce using rule 110 (removeParenthesis -> .)
    RIGHT_PAREN     reduce using rule 110 (removeParenthesis -> .)
    SEMI_COLON      reduce using rule 110 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 221

state 199

    (45) multipleWrite -> COMMA auxWritting .

    RIGHT_PAREN     reduce using rule 45 (multipleWrite -> COMMA auxWritting .)


state 200

    (53) auxLogicExpression -> AND addOperator . logicExpression
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    logicExpression                shift and go to state 222
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 201

    (54) auxLogicExpression -> OR addOperator . logicExpression
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    logicExpression                shift and go to state 223
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 202

    (57) auxExp -> GREATER_THAN addOperator . exp
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp                            shift and go to state 224
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 203

    (58) auxExp -> GREATER_EQUAL_THAN addOperator . exp
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp                            shift and go to state 225
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 204

    (59) auxExp -> LESS_THAN addOperator . exp
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp                            shift and go to state 226
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 205

    (60) auxExp -> LESS_EQUAL_THAN addOperator . exp
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp                            shift and go to state 227
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 206

    (61) auxExp -> NOT_EQUALS addOperator . exp
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp                            shift and go to state 228
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 207

    (62) auxExp -> EQUALS addOperator . exp
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp                            shift and go to state 229
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 208

    (65) exp2Aux -> PLUS addOperator . exp2
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp2                           shift and go to state 230
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 209

    (66) exp2Aux -> MINUS addOperator . exp2
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    exp2                           shift and go to state 231
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 210

    (69) auxTerm -> TIMES addOperator . term
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    term                           shift and go to state 232
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 211

    (70) auxTerm -> DIV addOperator . term
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    term                           shift and go to state 233
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 212

    (71) auxTerm -> MOD addOperator . term
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    term                           shift and go to state 234
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 213

    (72) auxTerm -> EXP addOperator . term
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    term                           shift and go to state 235
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 214

    (47) reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 47 (reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)


state 215

    (48) auxReading -> CTE_ID addOperand doReading . multipleRead
    (49) multipleRead -> . COMMA auxReading
    (50) multipleRead -> . empty
    (119) empty -> .

    COMMA           shift and go to state 237
    RIGHT_PAREN     reduce using rule 119 (empty -> .)

    multipleRead                   shift and go to state 236
    empty                          shift and go to state 238

state 216

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . else endIF
    (83) else -> . ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF
    (84) else -> . ELSE doElse funcBody
    (85) else -> . empty
    (119) empty -> .

    ELSE            shift and go to state 240
    VAR             reduce using rule 119 (empty -> .)
    CTE_ID          reduce using rule 119 (empty -> .)
    PRINT           reduce using rule 119 (empty -> .)
    READ_INPUT      reduce using rule 119 (empty -> .)
    IF              reduce using rule 119 (empty -> .)
    WHILE           reduce using rule 119 (empty -> .)
    RETURN          reduce using rule 119 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 119 (empty -> .)

    else                           shift and go to state 239
    empty                          shift and go to state 241

state 217

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN . funcBody endWhile
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 63

    funcBody                       shift and go to state 242

state 218

    (29) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 29 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)


state 219

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 243


state 220

    (51) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .

    VAR             reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CTE_ID          reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    PRINT           reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    READ_INPUT      reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    IF              reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    WHILE           reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RETURN          reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)


state 221

    (74) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .

    TIMES           reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    DIV             reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MOD             reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EXP             reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    PLUS            reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MINUS           reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_THAN    reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_EQUAL_THAN reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_THAN       reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_EQUAL_THAN reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    NOT_EQUALS      reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EQUALS          reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    AND             reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    OR              reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    COMMA           reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    RIGHT_PAREN     reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    SEMI_COLON      reduce using rule 74 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)


state 222

    (53) auxLogicExpression -> AND addOperator logicExpression .

    COMMA           reduce using rule 53 (auxLogicExpression -> AND addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 53 (auxLogicExpression -> AND addOperator logicExpression .)
    SEMI_COLON      reduce using rule 53 (auxLogicExpression -> AND addOperator logicExpression .)


state 223

    (54) auxLogicExpression -> OR addOperator logicExpression .

    COMMA           reduce using rule 54 (auxLogicExpression -> OR addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 54 (auxLogicExpression -> OR addOperator logicExpression .)
    SEMI_COLON      reduce using rule 54 (auxLogicExpression -> OR addOperator logicExpression .)


state 224

    (57) auxExp -> GREATER_THAN addOperator exp .

    AND             reduce using rule 57 (auxExp -> GREATER_THAN addOperator exp .)
    OR              reduce using rule 57 (auxExp -> GREATER_THAN addOperator exp .)
    COMMA           reduce using rule 57 (auxExp -> GREATER_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 57 (auxExp -> GREATER_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 57 (auxExp -> GREATER_THAN addOperator exp .)


state 225

    (58) auxExp -> GREATER_EQUAL_THAN addOperator exp .

    AND             reduce using rule 58 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 58 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 58 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 58 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 58 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)


state 226

    (59) auxExp -> LESS_THAN addOperator exp .

    AND             reduce using rule 59 (auxExp -> LESS_THAN addOperator exp .)
    OR              reduce using rule 59 (auxExp -> LESS_THAN addOperator exp .)
    COMMA           reduce using rule 59 (auxExp -> LESS_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 59 (auxExp -> LESS_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 59 (auxExp -> LESS_THAN addOperator exp .)


state 227

    (60) auxExp -> LESS_EQUAL_THAN addOperator exp .

    AND             reduce using rule 60 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 60 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 60 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 60 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 60 (auxExp -> LESS_EQUAL_THAN addOperator exp .)


state 228

    (61) auxExp -> NOT_EQUALS addOperator exp .

    AND             reduce using rule 61 (auxExp -> NOT_EQUALS addOperator exp .)
    OR              reduce using rule 61 (auxExp -> NOT_EQUALS addOperator exp .)
    COMMA           reduce using rule 61 (auxExp -> NOT_EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 61 (auxExp -> NOT_EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 61 (auxExp -> NOT_EQUALS addOperator exp .)


state 229

    (62) auxExp -> EQUALS addOperator exp .

    AND             reduce using rule 62 (auxExp -> EQUALS addOperator exp .)
    OR              reduce using rule 62 (auxExp -> EQUALS addOperator exp .)
    COMMA           reduce using rule 62 (auxExp -> EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 62 (auxExp -> EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 62 (auxExp -> EQUALS addOperator exp .)


state 230

    (65) exp2Aux -> PLUS addOperator exp2 .

    GREATER_THAN    reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_THAN       reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    EQUALS          reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    AND             reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    OR              reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    COMMA           reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 65 (exp2Aux -> PLUS addOperator exp2 .)


state 231

    (66) exp2Aux -> MINUS addOperator exp2 .

    GREATER_THAN    reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_THAN       reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    EQUALS          reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    AND             reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    OR              reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    COMMA           reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 66 (exp2Aux -> MINUS addOperator exp2 .)


state 232

    (69) auxTerm -> TIMES addOperator term .

    PLUS            reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    MINUS           reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    GREATER_THAN    reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    LESS_THAN       reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    LESS_EQUAL_THAN reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    NOT_EQUALS      reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    EQUALS          reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    AND             reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    OR              reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    COMMA           reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    RIGHT_PAREN     reduce using rule 69 (auxTerm -> TIMES addOperator term .)
    SEMI_COLON      reduce using rule 69 (auxTerm -> TIMES addOperator term .)


state 233

    (70) auxTerm -> DIV addOperator term .

    PLUS            reduce using rule 70 (auxTerm -> DIV addOperator term .)
    MINUS           reduce using rule 70 (auxTerm -> DIV addOperator term .)
    GREATER_THAN    reduce using rule 70 (auxTerm -> DIV addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 70 (auxTerm -> DIV addOperator term .)
    LESS_THAN       reduce using rule 70 (auxTerm -> DIV addOperator term .)
    LESS_EQUAL_THAN reduce using rule 70 (auxTerm -> DIV addOperator term .)
    NOT_EQUALS      reduce using rule 70 (auxTerm -> DIV addOperator term .)
    EQUALS          reduce using rule 70 (auxTerm -> DIV addOperator term .)
    AND             reduce using rule 70 (auxTerm -> DIV addOperator term .)
    OR              reduce using rule 70 (auxTerm -> DIV addOperator term .)
    COMMA           reduce using rule 70 (auxTerm -> DIV addOperator term .)
    RIGHT_PAREN     reduce using rule 70 (auxTerm -> DIV addOperator term .)
    SEMI_COLON      reduce using rule 70 (auxTerm -> DIV addOperator term .)


state 234

    (71) auxTerm -> MOD addOperator term .

    PLUS            reduce using rule 71 (auxTerm -> MOD addOperator term .)
    MINUS           reduce using rule 71 (auxTerm -> MOD addOperator term .)
    GREATER_THAN    reduce using rule 71 (auxTerm -> MOD addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 71 (auxTerm -> MOD addOperator term .)
    LESS_THAN       reduce using rule 71 (auxTerm -> MOD addOperator term .)
    LESS_EQUAL_THAN reduce using rule 71 (auxTerm -> MOD addOperator term .)
    NOT_EQUALS      reduce using rule 71 (auxTerm -> MOD addOperator term .)
    EQUALS          reduce using rule 71 (auxTerm -> MOD addOperator term .)
    AND             reduce using rule 71 (auxTerm -> MOD addOperator term .)
    OR              reduce using rule 71 (auxTerm -> MOD addOperator term .)
    COMMA           reduce using rule 71 (auxTerm -> MOD addOperator term .)
    RIGHT_PAREN     reduce using rule 71 (auxTerm -> MOD addOperator term .)
    SEMI_COLON      reduce using rule 71 (auxTerm -> MOD addOperator term .)


state 235

    (72) auxTerm -> EXP addOperator term .

    PLUS            reduce using rule 72 (auxTerm -> EXP addOperator term .)
    MINUS           reduce using rule 72 (auxTerm -> EXP addOperator term .)
    GREATER_THAN    reduce using rule 72 (auxTerm -> EXP addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 72 (auxTerm -> EXP addOperator term .)
    LESS_THAN       reduce using rule 72 (auxTerm -> EXP addOperator term .)
    LESS_EQUAL_THAN reduce using rule 72 (auxTerm -> EXP addOperator term .)
    NOT_EQUALS      reduce using rule 72 (auxTerm -> EXP addOperator term .)
    EQUALS          reduce using rule 72 (auxTerm -> EXP addOperator term .)
    AND             reduce using rule 72 (auxTerm -> EXP addOperator term .)
    OR              reduce using rule 72 (auxTerm -> EXP addOperator term .)
    COMMA           reduce using rule 72 (auxTerm -> EXP addOperator term .)
    RIGHT_PAREN     reduce using rule 72 (auxTerm -> EXP addOperator term .)
    SEMI_COLON      reduce using rule 72 (auxTerm -> EXP addOperator term .)


state 236

    (48) auxReading -> CTE_ID addOperand doReading multipleRead .

    RIGHT_PAREN     reduce using rule 48 (auxReading -> CTE_ID addOperand doReading multipleRead .)


state 237

    (49) multipleRead -> COMMA . auxReading
    (48) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 151

    auxReading                     shift and go to state 244

state 238

    (50) multipleRead -> empty .

    RIGHT_PAREN     reduce using rule 50 (multipleRead -> empty .)


state 239

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else . endIF
    (98) endIF -> .

    VAR             reduce using rule 98 (endIF -> .)
    CTE_ID          reduce using rule 98 (endIF -> .)
    PRINT           reduce using rule 98 (endIF -> .)
    READ_INPUT      reduce using rule 98 (endIF -> .)
    IF              reduce using rule 98 (endIF -> .)
    WHILE           reduce using rule 98 (endIF -> .)
    RETURN          reduce using rule 98 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 98 (endIF -> .)

    endIF                          shift and go to state 245

state 240

    (83) else -> ELSE . doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF
    (84) else -> ELSE . doElse funcBody
    (99) doElse -> .

    IF              reduce using rule 99 (doElse -> .)
    LEFT_CURLY_BRACKET reduce using rule 99 (doElse -> .)

    doElse                         shift and go to state 246

state 241

    (85) else -> empty .

    VAR             reduce using rule 85 (else -> empty .)
    CTE_ID          reduce using rule 85 (else -> empty .)
    PRINT           reduce using rule 85 (else -> empty .)
    READ_INPUT      reduce using rule 85 (else -> empty .)
    IF              reduce using rule 85 (else -> empty .)
    WHILE           reduce using rule 85 (else -> empty .)
    RETURN          reduce using rule 85 (else -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 85 (else -> empty .)


state 242

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody . endWhile
    (101) endWhile -> .

    VAR             reduce using rule 101 (endWhile -> .)
    CTE_ID          reduce using rule 101 (endWhile -> .)
    PRINT           reduce using rule 101 (endWhile -> .)
    READ_INPUT      reduce using rule 101 (endWhile -> .)
    IF              reduce using rule 101 (endWhile -> .)
    WHILE           reduce using rule 101 (endWhile -> .)
    RETURN          reduce using rule 101 (endWhile -> .)
    RIGHT_CURLY_BRACKET reduce using rule 101 (endWhile -> .)

    endWhile                       shift and go to state 247

state 243

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 248


state 244

    (49) multipleRead -> COMMA auxReading .

    RIGHT_PAREN     reduce using rule 49 (multipleRead -> COMMA auxReading .)


state 245

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .

    VAR             reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CTE_ID          reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    PRINT           reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    READ_INPUT      reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    IF              reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    WHILE           reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RETURN          reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)


state 246

    (83) else -> ELSE doElse . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF
    (84) else -> ELSE doElse . funcBody
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    IF              shift and go to state 249
    LEFT_CURLY_BRACKET shift and go to state 63

    funcBody                       shift and go to state 250

state 247

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .

    VAR             reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    CTE_ID          reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    PRINT           reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    READ_INPUT      reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    IF              reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    WHILE           reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RETURN          reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RIGHT_CURLY_BRACKET reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)


state 248

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 67


state 249

    (83) else -> ELSE doElse IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF

    LEFT_PAREN      shift and go to state 251


state 250

    (84) else -> ELSE doElse funcBody .

    VAR             reduce using rule 84 (else -> ELSE doElse funcBody .)
    CTE_ID          reduce using rule 84 (else -> ELSE doElse funcBody .)
    PRINT           reduce using rule 84 (else -> ELSE doElse funcBody .)
    READ_INPUT      reduce using rule 84 (else -> ELSE doElse funcBody .)
    IF              reduce using rule 84 (else -> ELSE doElse funcBody .)
    WHILE           reduce using rule 84 (else -> ELSE doElse funcBody .)
    RETURN          reduce using rule 84 (else -> ELSE doElse funcBody .)
    RIGHT_CURLY_BRACKET reduce using rule 84 (else -> ELSE doElse funcBody .)


state 251

    (83) else -> ELSE doElse IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody endIF
    (52) logicExpression -> . exp doLogicExpression auxLogicExpression
    (56) exp -> . exp2 doCompExpression auxExp
    (64) exp2 -> . term doExpression exp2Aux
    (68) term -> . factor doTerm auxTerm
    (74) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (75) factor -> . constants
    (76) constants -> . CTE_ID addOperand
    (77) constants -> . CTE_INT addConstantOperand
    (78) constants -> . CTE_FLOAT addConstantOperand
    (79) constants -> . CTE_STRING addConstantOperand
    (80) constants -> . TRUE addConstantBool
    (81) constants -> . FALSE addConstantBool

    LEFT_PAREN      shift and go to state 112
    CTE_ID          shift and go to state 121
    CTE_INT         shift and go to state 122
    CTE_FLOAT       shift and go to state 123
    CTE_STRING      shift and go to state 128
    TRUE            shift and go to state 124
    FALSE           shift and go to state 125

    logicExpression                shift and go to state 252
    exp                            shift and go to state 116
    exp2                           shift and go to state 117
    term                           shift and go to state 118
    factor                         shift and go to state 119
    constants                      shift and go to state 120

state 252

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody endIF
    (97) doIF -> .

    RIGHT_PAREN     reduce using rule 97 (doIF -> .)

    doIF                           shift and go to state 253

state 253

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody endIF

    RIGHT_PAREN     shift and go to state 254


state 254

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody endIF
    (25) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 63

    funcBody                       shift and go to state 255

state 255

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . endIF
    (98) endIF -> .

    VAR             reduce using rule 98 (endIF -> .)
    CTE_ID          reduce using rule 98 (endIF -> .)
    PRINT           reduce using rule 98 (endIF -> .)
    READ_INPUT      reduce using rule 98 (endIF -> .)
    IF              reduce using rule 98 (endIF -> .)
    WHILE           reduce using rule 98 (endIF -> .)
    RETURN          reduce using rule 98 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 98 (endIF -> .)

    endIF                          shift and go to state 256

state 256

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .

    VAR             reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)
    CTE_ID          reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)
    PRINT           reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)
    READ_INPUT      reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)
    IF              reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)
    WHILE           reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)
    RETURN          reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTE_ID in state 63 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 63 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 63 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 75 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 98 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 98 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 98 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (globalVariables -> empty)
WARNING: rejected rule (auxVars -> empty) in state 8
WARNING: reduce/reduce conflict in state 115 resolved using rule (addConstantOperand -> <empty>)
WARNING: rejected rule (doWriteString -> <empty>) in state 115
WARNING: Rule (doWriteString -> <empty>) is never reduced
