Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FOR

Grammar

Rule 0     S' -> program_main
Rule 1     program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
Rule 2     globalVariables -> vars addMemoryInfo
Rule 3     globalVariables -> empty
Rule 4     globalFunctions -> funcs
Rule 5     globalFunctions -> empty
Rule 6     vars -> auxVars
Rule 7     auxVars -> VAR type vars_type_single
Rule 8     auxVars -> VAR type vars_type_array
Rule 9     auxVars -> empty
Rule 10    vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single
Rule 11    vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars
Rule 12    vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
Rule 13    vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
Rule 14    funcs -> funcs_aux globalFunctions
Rule 15    funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 16    funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 17    params -> auxParams
Rule 18    params -> empty
Rule 19    auxParams -> type CTE_ID addParam multipleParams
Rule 20    auxParams -> type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams
Rule 21    multipleParams -> COMMA auxParams
Rule 22    multipleParams -> empty
Rule 23    funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET
Rule 24    auxFuncBody -> vars statements auxFuncBody
Rule 25    auxFuncBody -> statements auxFuncBody
Rule 26    auxFuncBody -> vars
Rule 27    auxFuncBody -> empty
Rule 28    type -> INT setCurrentType
Rule 29    type -> FLOAT setCurrentType
Rule 30    type -> BOOL setCurrentType
Rule 31    type -> STRING setCurrentType
Rule 32    statements -> assignment
Rule 33    statements -> writting
Rule 34    statements -> reading
Rule 35    statements -> if
Rule 36    statements -> while
Rule 37    statements -> auxFuncCall
Rule 38    statements -> return
Rule 39    assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
Rule 40    assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
Rule 41    writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
Rule 42    auxWritting -> logicExpression doWrite multipleWrite
Rule 43    auxWritting -> CTE_STRING doWriteString multipleWrite
Rule 44    multipleWrite -> COMMA auxWritting
Rule 45    multipleWrite -> empty
Rule 46    reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
Rule 47    auxReading -> CTE_ID addOperand doReading multipleRead
Rule 48    multipleRead -> COMMA auxReading
Rule 49    multipleRead -> empty
Rule 50    logicExpression -> exp doLogicExpression auxLogicExpression
Rule 51    auxLogicExpression -> AND addOperator logicExpression
Rule 52    auxLogicExpression -> OR addOperator logicExpression
Rule 53    auxLogicExpression -> empty
Rule 54    exp -> exp2 doCompExpression auxExp
Rule 55    auxExp -> GREATER_THAN addOperator exp
Rule 56    auxExp -> GREATER_EQUAL_THAN addOperator exp
Rule 57    auxExp -> LESS_THAN addOperator exp
Rule 58    auxExp -> LESS_EQUAL_THAN addOperator exp
Rule 59    auxExp -> NOT_EQUALS addOperator exp
Rule 60    auxExp -> EQUALS addOperator exp
Rule 61    auxExp -> empty
Rule 62    exp2 -> term doExpression exp2Aux
Rule 63    exp2Aux -> PLUS addOperator exp2
Rule 64    exp2Aux -> MINUS addOperator exp2
Rule 65    exp2Aux -> empty
Rule 66    term -> factor doTerm auxTerm
Rule 67    auxTerm -> TIMES addOperator term
Rule 68    auxTerm -> DIV addOperator term
Rule 69    auxTerm -> MOD addOperator term
Rule 70    auxTerm -> EXP addOperator term
Rule 71    auxTerm -> empty
Rule 72    factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
Rule 73    factor -> constants
Rule 74    constants -> CTE_ID addOperand
Rule 75    constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
Rule 76    constants -> CTE_INT addConstantOperand
Rule 77    constants -> CTE_FLOAT addConstantOperand
Rule 78    constants -> CTE_STRING addConstantOperand
Rule 79    constants -> TRUE addConstantBool
Rule 80    constants -> FALSE addConstantBool
Rule 81    constants -> functionCall
Rule 82    if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
Rule 83    else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
Rule 84    else -> ELSE doElse funcBody
Rule 85    else -> empty
Rule 86    while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
Rule 87    functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
Rule 88    functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 89    functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 90    functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 91    functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 92    functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 93    functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 94    functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 95    functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
Rule 96    auxFuncCall -> functionCall SEMI_COLON
Rule 97    arguments -> auxArguments
Rule 98    arguments -> empty
Rule 99    auxArguments -> logicExpression checkType multipleArguments
Rule 100   multipleArguments -> COMMA auxArguments
Rule 101   multipleArguments -> empty
Rule 102   return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
Rule 103   auxReturn -> logicExpression doReturn
Rule 104   auxReturn -> empty
Rule 105   startup -> <empty>
Rule 106   setMain -> <empty>
Rule 107   endProgram -> <empty>
Rule 108   endPrint -> <empty>
Rule 109   saveFuncID -> <empty>
Rule 110   addParam -> <empty>
Rule 111   addMemoryInfo -> <empty>
Rule 112   endFunction -> <empty>
Rule 113   saveVariableID -> <empty>
Rule 114   saveArray -> <empty>
Rule 115   setCurrentType -> <empty>
Rule 116   addOperand -> <empty>
Rule 117   addConstantOperand -> <empty>
Rule 118   addConstantBool -> <empty>
Rule 119   addOperator -> <empty>
Rule 120   addParenthesis -> <empty>
Rule 121   removeParenthesis -> <empty>
Rule 122   doLogicExpression -> <empty>
Rule 123   doCompExpression -> <empty>
Rule 124   doExpression -> <empty>
Rule 125   doTerm -> <empty>
Rule 126   doAssign -> <empty>
Rule 127   doWrite -> <empty>
Rule 128   doWriteString -> <empty>
Rule 129   doReading -> <empty>
Rule 130   doIF -> <empty>
Rule 131   endIF -> <empty>
Rule 132   doElse -> <empty>
Rule 133   doWhile -> <empty>
Rule 134   endWhile -> <empty>
Rule 135   addCondStart -> <empty>
Rule 136   doFuncCall -> <empty>
Rule 137   setVoidType -> <empty>
Rule 138   checkParams -> <empty>
Rule 139   checkType -> <empty>
Rule 140   doReturn -> <empty>
Rule 141   doGoSub -> <empty>
Rule 142   doGoSubS -> <empty>
Rule 143   empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
BINOMIAL             : 88
BOOL                 : 30
BTSProgam            : 1
CHISQUARE            : 95
COMMA                : 10 12 21 44 48 100
COMPARE              : 90
CTE_FLOAT            : 77
CTE_ID               : 1 10 11 12 13 15 16 19 20 39 40 47 74 75 87
CTE_INT              : 12 13 20 76
CTE_STRING           : 43 78
DIV                  : 68
ELSE                 : 83 84
EQUAL                : 39 40
EQUALS               : 60
EXP                  : 70
EXPONENTIAL          : 94
FALSE                : 80
FLOAT                : 29
FOR                  : 
FUNC                 : 15 16
GREATER_EQUAL_THAN   : 56
GREATER_THAN         : 55
IF                   : 82 83
INT                  : 28
LEFT_BRACKET         : 12 13 20 40 75
LEFT_CURLY_BRACKET   : 23
LEFT_PAREN           : 1 15 16 41 46 72 82 83 86 87 88 89 90 91 92 93 94 95 102
LESS_EQUAL_THAN      : 58
LESS_THAN            : 57
LOGISTIC             : 93
MAIN                 : 1
MINUS                : 64
MOD                  : 69
NORMAL               : 91
NOT_EQUALS           : 59
OR                   : 52
PLUS                 : 63
POISSON              : 89
PRINT                : 41
READ_INPUT           : 46
RETURN               : 102
RETURN_SIGN          : 102
RIGHT_BRACKET        : 12 13 20 40 75
RIGHT_CURLY_BRACKET  : 23
RIGHT_PAREN          : 1 15 16 41 46 72 82 83 86 87 88 89 90 91 92 93 94 95 102
SEMI_COLON           : 1 11 13 39 40 41 46 96 102
STRING               : 31
TIMES                : 67
TRUE                 : 79
UNIFORM              : 92
VAR                  : 7 8
WHILE                : 86
error                : 

Nonterminals, with rules where they appear

addCondStart         : 86
addConstantBool      : 79 80
addConstantOperand   : 12 13 76 77 78
addMemoryInfo        : 1 2 15 16
addOperand           : 39 40 47 74 75
addOperator          : 39 40 51 52 55 56 57 58 59 60 63 64 67 68 69 70
addParam             : 19 20
addParenthesis       : 40 72 75
arguments            : 87 88 89 90 91 92 93 94 95
assignment           : 32
auxArguments         : 97 100
auxExp               : 54
auxFuncBody          : 23 24 25
auxFuncCall          : 37
auxLogicExpression   : 50
auxParams            : 17 21
auxReading           : 46 48
auxReturn            : 102
auxTerm              : 66
auxVars              : 6 11 13
auxWritting          : 41 44
checkParams          : 87 88 89 90 91 92 93 94 95
checkType            : 99
constants            : 73
doAssign             : 39 40
doCompExpression     : 54
doElse               : 83 84
doExpression         : 62
doFuncCall           : 87 88 89 90 91 92 93 94 95
doGoSub              : 87
doGoSubS             : 88 89 90 91 92 93 94 95
doIF                 : 82 83
doLogicExpression    : 50
doReading            : 47
doReturn             : 103
doTerm               : 66
doWhile              : 86
doWrite              : 42
doWriteString        : 43
else                 : 82 83
empty                : 3 5 9 18 22 27 45 49 53 61 65 71 85 98 101 104
endFunction          : 1 15 16
endIF                : 82 83
endPrint             : 1
endProgram           : 1
endWhile             : 86
exp                  : 50 55 56 57 58 59 60
exp2                 : 54 63 64
exp2Aux              : 62
factor               : 66
funcBody             : 1 15 16 82 83 84 86
funcs                : 4
funcs_aux            : 14
functionCall         : 81 96
globalFunctions      : 1 14
globalVariables      : 1
if                   : 35
logicExpression      : 39 40 40 42 51 52 72 75 82 83 86 99 103
multipleArguments    : 99
multipleParams       : 19 20
multipleRead         : 47
multipleWrite        : 42 43
params               : 15 16
program_main         : 0
reading              : 34
removeParenthesis    : 40 72 75
return               : 38
saveArray            : 12 13
saveFuncID           : 1 15 16
saveVariableID       : 10 11
setCurrentType       : 28 29 30 31
setMain              : 1
setVoidType          : 16
startup              : 1
statements           : 24 25
term                 : 62 67 68 69 70
type                 : 7 8 15 19 20
vars                 : 2 24 26
vars_type_array      : 8 12
vars_type_single     : 7 10
while                : 36
writting             : 33

Parsing method: LALR

state 0

    (0) S' -> . program_main
    (1) program_main -> . BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    BTSProgam       shift and go to state 2

    program_main                   shift and go to state 1

state 1

    (0) S' -> program_main .



state 2

    (1) program_main -> BTSProgam . CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    CTE_ID          shift and go to state 3


state 3

    (1) program_main -> BTSProgam CTE_ID . startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (105) startup -> .

    SEMI_COLON      reduce using rule 105 (startup -> .)

    startup                        shift and go to state 4

state 4

    (1) program_main -> BTSProgam CTE_ID startup . SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    SEMI_COLON      shift and go to state 5


state 5

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON . globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (2) globalVariables -> . vars addMemoryInfo
    (3) globalVariables -> . empty
    (6) vars -> . auxVars
    (143) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty

    FUNC            reduce using rule 143 (empty -> .)
    MAIN            reduce using rule 143 (empty -> .)
    VAR             shift and go to state 10

    globalVariables                shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8
    auxVars                        shift and go to state 9

state 6

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables . globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (14) funcs -> . funcs_aux globalFunctions
    (143) empty -> .
    (15) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (16) funcs_aux -> . FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 143 (empty -> .)
    FUNC            shift and go to state 15

    globalFunctions                shift and go to state 11
    funcs                          shift and go to state 12
    empty                          shift and go to state 13
    funcs_aux                      shift and go to state 14

state 7

    (2) globalVariables -> vars . addMemoryInfo
    (111) addMemoryInfo -> .

    FUNC            reduce using rule 111 (addMemoryInfo -> .)
    MAIN            reduce using rule 111 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 16

state 8

    (3) globalVariables -> empty .
    (9) auxVars -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 3 (globalVariables -> empty .)
  ! reduce/reduce conflict for MAIN resolved using rule 3 (globalVariables -> empty .)
    FUNC            reduce using rule 3 (globalVariables -> empty .)
    MAIN            reduce using rule 3 (globalVariables -> empty .)

  ! FUNC            [ reduce using rule 9 (auxVars -> empty .) ]
  ! MAIN            [ reduce using rule 9 (auxVars -> empty .) ]


state 9

    (6) vars -> auxVars .

    FUNC            reduce using rule 6 (vars -> auxVars .)
    MAIN            reduce using rule 6 (vars -> auxVars .)
    CTE_ID          reduce using rule 6 (vars -> auxVars .)
    PRINT           reduce using rule 6 (vars -> auxVars .)
    READ_INPUT      reduce using rule 6 (vars -> auxVars .)
    IF              reduce using rule 6 (vars -> auxVars .)
    WHILE           reduce using rule 6 (vars -> auxVars .)
    RETURN          reduce using rule 6 (vars -> auxVars .)
    BINOMIAL        reduce using rule 6 (vars -> auxVars .)
    POISSON         reduce using rule 6 (vars -> auxVars .)
    COMPARE         reduce using rule 6 (vars -> auxVars .)
    NORMAL          reduce using rule 6 (vars -> auxVars .)
    UNIFORM         reduce using rule 6 (vars -> auxVars .)
    LOGISTIC        reduce using rule 6 (vars -> auxVars .)
    EXPONENTIAL     reduce using rule 6 (vars -> auxVars .)
    CHISQUARE       reduce using rule 6 (vars -> auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (vars -> auxVars .)


state 10

    (7) auxVars -> VAR . type vars_type_single
    (8) auxVars -> VAR . type vars_type_array
    (28) type -> . INT setCurrentType
    (29) type -> . FLOAT setCurrentType
    (30) type -> . BOOL setCurrentType
    (31) type -> . STRING setCurrentType

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 17

state 11

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions . MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    MAIN            shift and go to state 22


state 12

    (4) globalFunctions -> funcs .

    MAIN            reduce using rule 4 (globalFunctions -> funcs .)


state 13

    (5) globalFunctions -> empty .

    MAIN            reduce using rule 5 (globalFunctions -> empty .)


state 14

    (14) funcs -> funcs_aux . globalFunctions
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (14) funcs -> . funcs_aux globalFunctions
    (143) empty -> .
    (15) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (16) funcs_aux -> . FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 143 (empty -> .)
    FUNC            shift and go to state 15

    funcs_aux                      shift and go to state 14
    globalFunctions                shift and go to state 23
    funcs                          shift and go to state 12
    empty                          shift and go to state 13

state 15

    (15) funcs_aux -> FUNC . type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (16) funcs_aux -> FUNC . CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (28) type -> . INT setCurrentType
    (29) type -> . FLOAT setCurrentType
    (30) type -> . BOOL setCurrentType
    (31) type -> . STRING setCurrentType

    CTE_ID          shift and go to state 25
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 24

state 16

    (2) globalVariables -> vars addMemoryInfo .

    FUNC            reduce using rule 2 (globalVariables -> vars addMemoryInfo .)
    MAIN            reduce using rule 2 (globalVariables -> vars addMemoryInfo .)


state 17

    (7) auxVars -> VAR type . vars_type_single
    (8) auxVars -> VAR type . vars_type_array
    (10) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (11) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars
    (12) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_ID          shift and go to state 28

    vars_type_single               shift and go to state 26
    vars_type_array                shift and go to state 27

state 18

    (28) type -> INT . setCurrentType
    (115) setCurrentType -> .

    CTE_ID          reduce using rule 115 (setCurrentType -> .)

    setCurrentType                 shift and go to state 29

state 19

    (29) type -> FLOAT . setCurrentType
    (115) setCurrentType -> .

    CTE_ID          reduce using rule 115 (setCurrentType -> .)

    setCurrentType                 shift and go to state 30

state 20

    (30) type -> BOOL . setCurrentType
    (115) setCurrentType -> .

    CTE_ID          reduce using rule 115 (setCurrentType -> .)

    setCurrentType                 shift and go to state 31

state 21

    (31) type -> STRING . setCurrentType
    (115) setCurrentType -> .

    CTE_ID          reduce using rule 115 (setCurrentType -> .)

    setCurrentType                 shift and go to state 32

state 22

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN . saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (109) saveFuncID -> .

    LEFT_PAREN      reduce using rule 109 (saveFuncID -> .)

    saveFuncID                     shift and go to state 33

state 23

    (14) funcs -> funcs_aux globalFunctions .

    MAIN            reduce using rule 14 (funcs -> funcs_aux globalFunctions .)


state 24

    (15) funcs_aux -> FUNC type . CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    CTE_ID          shift and go to state 34


state 25

    (16) funcs_aux -> FUNC CTE_ID . saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (109) saveFuncID -> .

    LEFT_PAREN      reduce using rule 109 (saveFuncID -> .)

    saveFuncID                     shift and go to state 35

state 26

    (7) auxVars -> VAR type vars_type_single .

    FUNC            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    MAIN            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    CTE_ID          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    PRINT           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    READ_INPUT      reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    IF              reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    WHILE           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    RETURN          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    BINOMIAL        reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    POISSON         reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    COMPARE         reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    NORMAL          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    UNIFORM         reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    LOGISTIC        reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    EXPONENTIAL     reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    CHISQUARE       reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (auxVars -> VAR type vars_type_single .)


state 27

    (8) auxVars -> VAR type vars_type_array .

    FUNC            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    MAIN            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    CTE_ID          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    PRINT           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    READ_INPUT      reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    IF              reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    WHILE           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    RETURN          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    BINOMIAL        reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    POISSON         reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    COMPARE         reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    NORMAL          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    UNIFORM         reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    LOGISTIC        reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    EXPONENTIAL     reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    CHISQUARE       reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (auxVars -> VAR type vars_type_array .)


state 28

    (10) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (11) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (12) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (113) saveVariableID -> .

    LEFT_BRACKET    shift and go to state 37
    COMMA           reduce using rule 113 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 113 (saveVariableID -> .)

    saveVariableID                 shift and go to state 36

state 29

    (28) type -> INT setCurrentType .

    CTE_ID          reduce using rule 28 (type -> INT setCurrentType .)


state 30

    (29) type -> FLOAT setCurrentType .

    CTE_ID          reduce using rule 29 (type -> FLOAT setCurrentType .)


state 31

    (30) type -> BOOL setCurrentType .

    CTE_ID          reduce using rule 30 (type -> BOOL setCurrentType .)


state 32

    (31) type -> STRING setCurrentType .

    CTE_ID          reduce using rule 31 (type -> STRING setCurrentType .)


state 33

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID . addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (111) addMemoryInfo -> .

    LEFT_PAREN      reduce using rule 111 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 38

state 34

    (15) funcs_aux -> FUNC type CTE_ID . saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (109) saveFuncID -> .

    LEFT_PAREN      reduce using rule 109 (saveFuncID -> .)

    saveFuncID                     shift and go to state 39

state 35

    (16) funcs_aux -> FUNC CTE_ID saveFuncID . setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (137) setVoidType -> .

    LEFT_PAREN      reduce using rule 137 (setVoidType -> .)

    setVoidType                    shift and go to state 40

state 36

    (10) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (11) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars

    COMMA           shift and go to state 41
    SEMI_COLON      shift and go to state 42


state 37

    (12) vars_type_array -> CTE_ID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_INT         shift and go to state 43


state 38

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo . LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    LEFT_PAREN      shift and go to state 44


state 39

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 45


state 40

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 46


state 41

    (10) vars_type_single -> CTE_ID saveVariableID COMMA . vars_type_single
    (10) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (11) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars

    CTE_ID          shift and go to state 47

    vars_type_single               shift and go to state 48

state 42

    (11) vars_type_single -> CTE_ID saveVariableID SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (143) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 143 (empty -> .)
    MAIN            reduce using rule 143 (empty -> .)
    CTE_ID          reduce using rule 143 (empty -> .)
    PRINT           reduce using rule 143 (empty -> .)
    READ_INPUT      reduce using rule 143 (empty -> .)
    IF              reduce using rule 143 (empty -> .)
    WHILE           reduce using rule 143 (empty -> .)
    RETURN          reduce using rule 143 (empty -> .)
    BINOMIAL        reduce using rule 143 (empty -> .)
    POISSON         reduce using rule 143 (empty -> .)
    COMPARE         reduce using rule 143 (empty -> .)
    NORMAL          reduce using rule 143 (empty -> .)
    UNIFORM         reduce using rule 143 (empty -> .)
    LOGISTIC        reduce using rule 143 (empty -> .)
    EXPONENTIAL     reduce using rule 143 (empty -> .)
    CHISQUARE       reduce using rule 143 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 143 (empty -> .)

    auxVars                        shift and go to state 49
    empty                          shift and go to state 50

state 43

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (117) addConstantOperand -> .

    RIGHT_BRACKET   reduce using rule 117 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 51

state 44

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN . RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    RIGHT_PAREN     shift and go to state 52


state 45

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (17) params -> . auxParams
    (18) params -> . empty
    (19) auxParams -> . type CTE_ID addParam multipleParams
    (20) auxParams -> . type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams
    (143) empty -> .
    (28) type -> . INT setCurrentType
    (29) type -> . FLOAT setCurrentType
    (30) type -> . BOOL setCurrentType
    (31) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 53
    params                         shift and go to state 54
    auxParams                      shift and go to state 55
    empty                          shift and go to state 56

state 46

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (17) params -> . auxParams
    (18) params -> . empty
    (19) auxParams -> . type CTE_ID addParam multipleParams
    (20) auxParams -> . type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams
    (143) empty -> .
    (28) type -> . INT setCurrentType
    (29) type -> . FLOAT setCurrentType
    (30) type -> . BOOL setCurrentType
    (31) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    params                         shift and go to state 57
    auxParams                      shift and go to state 55
    empty                          shift and go to state 56
    type                           shift and go to state 53

state 47

    (10) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (11) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (113) saveVariableID -> .

    COMMA           reduce using rule 113 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 113 (saveVariableID -> .)

    saveVariableID                 shift and go to state 36

state 48

    (10) vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .

    FUNC            reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    MAIN            reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    CTE_ID          reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    PRINT           reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    READ_INPUT      reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    IF              reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    WHILE           reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    RETURN          reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    BINOMIAL        reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    POISSON         reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    COMPARE         reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    NORMAL          reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    UNIFORM         reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    LOGISTIC        reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    EXPONENTIAL     reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    CHISQUARE       reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)


state 49

    (11) vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .

    FUNC            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    MAIN            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    PRINT           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    IF              reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    WHILE           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    RETURN          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    BINOMIAL        reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    POISSON         reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    COMPARE         reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    NORMAL          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    UNIFORM         reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    LOGISTIC        reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    EXPONENTIAL     reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    CHISQUARE       reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)


state 50

    (9) auxVars -> empty .

    FUNC            reduce using rule 9 (auxVars -> empty .)
    MAIN            reduce using rule 9 (auxVars -> empty .)
    CTE_ID          reduce using rule 9 (auxVars -> empty .)
    PRINT           reduce using rule 9 (auxVars -> empty .)
    READ_INPUT      reduce using rule 9 (auxVars -> empty .)
    IF              reduce using rule 9 (auxVars -> empty .)
    WHILE           reduce using rule 9 (auxVars -> empty .)
    RETURN          reduce using rule 9 (auxVars -> empty .)
    BINOMIAL        reduce using rule 9 (auxVars -> empty .)
    POISSON         reduce using rule 9 (auxVars -> empty .)
    COMPARE         reduce using rule 9 (auxVars -> empty .)
    NORMAL          reduce using rule 9 (auxVars -> empty .)
    UNIFORM         reduce using rule 9 (auxVars -> empty .)
    LOGISTIC        reduce using rule 9 (auxVars -> empty .)
    EXPONENTIAL     reduce using rule 9 (auxVars -> empty .)
    CHISQUARE       reduce using rule 9 (auxVars -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (auxVars -> empty .)


state 51

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 58


state 52

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN . setMain funcBody endFunction endProgram endPrint
    (106) setMain -> .

    LEFT_CURLY_BRACKET reduce using rule 106 (setMain -> .)

    setMain                        shift and go to state 59

state 53

    (19) auxParams -> type . CTE_ID addParam multipleParams
    (20) auxParams -> type . CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams

    CTE_ID          shift and go to state 60


state 54

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 61


state 55

    (17) params -> auxParams .

    RIGHT_PAREN     reduce using rule 17 (params -> auxParams .)


state 56

    (18) params -> empty .

    RIGHT_PAREN     reduce using rule 18 (params -> empty .)


state 57

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 62


state 58

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray SEMI_COLON auxVars
    (114) saveArray -> .

    COMMA           reduce using rule 114 (saveArray -> .)
    SEMI_COLON      reduce using rule 114 (saveArray -> .)

    saveArray                      shift and go to state 63

state 59

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain . funcBody endFunction endProgram endPrint
    (23) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 64

state 60

    (19) auxParams -> type CTE_ID . addParam multipleParams
    (20) auxParams -> type CTE_ID . addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams
    (110) addParam -> .

    LEFT_BRACKET    reduce using rule 110 (addParam -> .)
    COMMA           reduce using rule 110 (addParam -> .)
    RIGHT_PAREN     reduce using rule 110 (addParam -> .)

    addParam                       shift and go to state 66

state 61

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (23) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 67

state 62

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (23) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 68

state 63

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray . COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray . SEMI_COLON auxVars

    COMMA           shift and go to state 69
    SEMI_COLON      shift and go to state 70


state 64

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody . endFunction endProgram endPrint
    (112) endFunction -> .

    $end            reduce using rule 112 (endFunction -> .)

    endFunction                    shift and go to state 71

state 65

    (23) funcBody -> LEFT_CURLY_BRACKET . auxFuncBody RIGHT_CURLY_BRACKET
    (24) auxFuncBody -> . vars statements auxFuncBody
    (25) auxFuncBody -> . statements auxFuncBody
    (26) auxFuncBody -> . vars
    (27) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (32) statements -> . assignment
    (33) statements -> . writting
    (34) statements -> . reading
    (35) statements -> . if
    (36) statements -> . while
    (37) statements -> . auxFuncCall
    (38) statements -> . return
    (143) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (39) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (41) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (46) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (96) auxFuncCall -> . functionCall SEMI_COLON
    (102) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BINOMIAL resolved as shift
  ! shift/reduce conflict for POISSON resolved as shift
  ! shift/reduce conflict for COMPARE resolved as shift
  ! shift/reduce conflict for NORMAL resolved as shift
  ! shift/reduce conflict for UNIFORM resolved as shift
  ! shift/reduce conflict for LOGISTIC resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for CHISQUARE resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 143 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

  ! CTE_ID          [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! BINOMIAL        [ reduce using rule 143 (empty -> .) ]
  ! POISSON         [ reduce using rule 143 (empty -> .) ]
  ! COMPARE         [ reduce using rule 143 (empty -> .) ]
  ! NORMAL          [ reduce using rule 143 (empty -> .) ]
  ! UNIFORM         [ reduce using rule 143 (empty -> .) ]
  ! LOGISTIC        [ reduce using rule 143 (empty -> .) ]
  ! EXPONENTIAL     [ reduce using rule 143 (empty -> .) ]
  ! CHISQUARE       [ reduce using rule 143 (empty -> .) ]

    auxFuncBody                    shift and go to state 72
    vars                           shift and go to state 73
    statements                     shift and go to state 74
    empty                          shift and go to state 75
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 66

    (19) auxParams -> type CTE_ID addParam . multipleParams
    (20) auxParams -> type CTE_ID addParam . LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams
    (21) multipleParams -> . COMMA auxParams
    (22) multipleParams -> . empty
    (143) empty -> .

    LEFT_BRACKET    shift and go to state 99
    COMMA           shift and go to state 100
    RIGHT_PAREN     reduce using rule 143 (empty -> .)

    multipleParams                 shift and go to state 98
    empty                          shift and go to state 101

state 67

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (111) addMemoryInfo -> .

    FUNC            reduce using rule 111 (addMemoryInfo -> .)
    MAIN            reduce using rule 111 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 102

state 68

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (111) addMemoryInfo -> .

    FUNC            reduce using rule 111 (addMemoryInfo -> .)
    MAIN            reduce using rule 111 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 103

state 69

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA . vars_type_array
    (12) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_ID          shift and go to state 104

    vars_type_array                shift and go to state 105

state 70

    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (143) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 143 (empty -> .)
    MAIN            reduce using rule 143 (empty -> .)
    CTE_ID          reduce using rule 143 (empty -> .)
    PRINT           reduce using rule 143 (empty -> .)
    READ_INPUT      reduce using rule 143 (empty -> .)
    IF              reduce using rule 143 (empty -> .)
    WHILE           reduce using rule 143 (empty -> .)
    RETURN          reduce using rule 143 (empty -> .)
    BINOMIAL        reduce using rule 143 (empty -> .)
    POISSON         reduce using rule 143 (empty -> .)
    COMPARE         reduce using rule 143 (empty -> .)
    NORMAL          reduce using rule 143 (empty -> .)
    UNIFORM         reduce using rule 143 (empty -> .)
    LOGISTIC        reduce using rule 143 (empty -> .)
    EXPONENTIAL     reduce using rule 143 (empty -> .)
    CHISQUARE       reduce using rule 143 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 143 (empty -> .)

    auxVars                        shift and go to state 106
    empty                          shift and go to state 50

state 71

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction . endProgram endPrint
    (107) endProgram -> .

    $end            reduce using rule 107 (endProgram -> .)

    endProgram                     shift and go to state 107

state 72

    (23) funcBody -> LEFT_CURLY_BRACKET auxFuncBody . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 108


state 73

    (24) auxFuncBody -> vars . statements auxFuncBody
    (26) auxFuncBody -> vars .
    (32) statements -> . assignment
    (33) statements -> . writting
    (34) statements -> . reading
    (35) statements -> . if
    (36) statements -> . while
    (37) statements -> . auxFuncCall
    (38) statements -> . return
    (39) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (41) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (46) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (96) auxFuncCall -> . functionCall SEMI_COLON
    (102) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_CURLY_BRACKET reduce using rule 26 (auxFuncBody -> vars .)
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    statements                     shift and go to state 109
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 74

    (25) auxFuncBody -> statements . auxFuncBody
    (24) auxFuncBody -> . vars statements auxFuncBody
    (25) auxFuncBody -> . statements auxFuncBody
    (26) auxFuncBody -> . vars
    (27) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (32) statements -> . assignment
    (33) statements -> . writting
    (34) statements -> . reading
    (35) statements -> . if
    (36) statements -> . while
    (37) statements -> . auxFuncCall
    (38) statements -> . return
    (143) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (39) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (41) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (46) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (96) auxFuncCall -> . functionCall SEMI_COLON
    (102) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BINOMIAL resolved as shift
  ! shift/reduce conflict for POISSON resolved as shift
  ! shift/reduce conflict for COMPARE resolved as shift
  ! shift/reduce conflict for NORMAL resolved as shift
  ! shift/reduce conflict for UNIFORM resolved as shift
  ! shift/reduce conflict for LOGISTIC resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for CHISQUARE resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 143 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

  ! CTE_ID          [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! BINOMIAL        [ reduce using rule 143 (empty -> .) ]
  ! POISSON         [ reduce using rule 143 (empty -> .) ]
  ! COMPARE         [ reduce using rule 143 (empty -> .) ]
  ! NORMAL          [ reduce using rule 143 (empty -> .) ]
  ! UNIFORM         [ reduce using rule 143 (empty -> .) ]
  ! LOGISTIC        [ reduce using rule 143 (empty -> .) ]
  ! EXPONENTIAL     [ reduce using rule 143 (empty -> .) ]
  ! CHISQUARE       [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 74
    auxFuncBody                    shift and go to state 110
    vars                           shift and go to state 73
    empty                          shift and go to state 75
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 75

    (27) auxFuncBody -> empty .
    (9) auxVars -> empty .

  ! reduce/reduce conflict for RIGHT_CURLY_BRACKET resolved using rule 9 (auxVars -> empty .)
    CTE_ID          reduce using rule 9 (auxVars -> empty .)
    PRINT           reduce using rule 9 (auxVars -> empty .)
    READ_INPUT      reduce using rule 9 (auxVars -> empty .)
    IF              reduce using rule 9 (auxVars -> empty .)
    WHILE           reduce using rule 9 (auxVars -> empty .)
    RETURN          reduce using rule 9 (auxVars -> empty .)
    BINOMIAL        reduce using rule 9 (auxVars -> empty .)
    POISSON         reduce using rule 9 (auxVars -> empty .)
    COMPARE         reduce using rule 9 (auxVars -> empty .)
    NORMAL          reduce using rule 9 (auxVars -> empty .)
    UNIFORM         reduce using rule 9 (auxVars -> empty .)
    LOGISTIC        reduce using rule 9 (auxVars -> empty .)
    EXPONENTIAL     reduce using rule 9 (auxVars -> empty .)
    CHISQUARE       reduce using rule 9 (auxVars -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (auxVars -> empty .)

  ! RIGHT_CURLY_BRACKET [ reduce using rule 27 (auxFuncBody -> empty .) ]


state 76

    (32) statements -> assignment .

    VAR             reduce using rule 32 (statements -> assignment .)
    CTE_ID          reduce using rule 32 (statements -> assignment .)
    PRINT           reduce using rule 32 (statements -> assignment .)
    READ_INPUT      reduce using rule 32 (statements -> assignment .)
    IF              reduce using rule 32 (statements -> assignment .)
    WHILE           reduce using rule 32 (statements -> assignment .)
    RETURN          reduce using rule 32 (statements -> assignment .)
    BINOMIAL        reduce using rule 32 (statements -> assignment .)
    POISSON         reduce using rule 32 (statements -> assignment .)
    COMPARE         reduce using rule 32 (statements -> assignment .)
    NORMAL          reduce using rule 32 (statements -> assignment .)
    UNIFORM         reduce using rule 32 (statements -> assignment .)
    LOGISTIC        reduce using rule 32 (statements -> assignment .)
    EXPONENTIAL     reduce using rule 32 (statements -> assignment .)
    CHISQUARE       reduce using rule 32 (statements -> assignment .)
    RIGHT_CURLY_BRACKET reduce using rule 32 (statements -> assignment .)


state 77

    (33) statements -> writting .

    VAR             reduce using rule 33 (statements -> writting .)
    CTE_ID          reduce using rule 33 (statements -> writting .)
    PRINT           reduce using rule 33 (statements -> writting .)
    READ_INPUT      reduce using rule 33 (statements -> writting .)
    IF              reduce using rule 33 (statements -> writting .)
    WHILE           reduce using rule 33 (statements -> writting .)
    RETURN          reduce using rule 33 (statements -> writting .)
    BINOMIAL        reduce using rule 33 (statements -> writting .)
    POISSON         reduce using rule 33 (statements -> writting .)
    COMPARE         reduce using rule 33 (statements -> writting .)
    NORMAL          reduce using rule 33 (statements -> writting .)
    UNIFORM         reduce using rule 33 (statements -> writting .)
    LOGISTIC        reduce using rule 33 (statements -> writting .)
    EXPONENTIAL     reduce using rule 33 (statements -> writting .)
    CHISQUARE       reduce using rule 33 (statements -> writting .)
    RIGHT_CURLY_BRACKET reduce using rule 33 (statements -> writting .)


state 78

    (34) statements -> reading .

    VAR             reduce using rule 34 (statements -> reading .)
    CTE_ID          reduce using rule 34 (statements -> reading .)
    PRINT           reduce using rule 34 (statements -> reading .)
    READ_INPUT      reduce using rule 34 (statements -> reading .)
    IF              reduce using rule 34 (statements -> reading .)
    WHILE           reduce using rule 34 (statements -> reading .)
    RETURN          reduce using rule 34 (statements -> reading .)
    BINOMIAL        reduce using rule 34 (statements -> reading .)
    POISSON         reduce using rule 34 (statements -> reading .)
    COMPARE         reduce using rule 34 (statements -> reading .)
    NORMAL          reduce using rule 34 (statements -> reading .)
    UNIFORM         reduce using rule 34 (statements -> reading .)
    LOGISTIC        reduce using rule 34 (statements -> reading .)
    EXPONENTIAL     reduce using rule 34 (statements -> reading .)
    CHISQUARE       reduce using rule 34 (statements -> reading .)
    RIGHT_CURLY_BRACKET reduce using rule 34 (statements -> reading .)


state 79

    (35) statements -> if .

    VAR             reduce using rule 35 (statements -> if .)
    CTE_ID          reduce using rule 35 (statements -> if .)
    PRINT           reduce using rule 35 (statements -> if .)
    READ_INPUT      reduce using rule 35 (statements -> if .)
    IF              reduce using rule 35 (statements -> if .)
    WHILE           reduce using rule 35 (statements -> if .)
    RETURN          reduce using rule 35 (statements -> if .)
    BINOMIAL        reduce using rule 35 (statements -> if .)
    POISSON         reduce using rule 35 (statements -> if .)
    COMPARE         reduce using rule 35 (statements -> if .)
    NORMAL          reduce using rule 35 (statements -> if .)
    UNIFORM         reduce using rule 35 (statements -> if .)
    LOGISTIC        reduce using rule 35 (statements -> if .)
    EXPONENTIAL     reduce using rule 35 (statements -> if .)
    CHISQUARE       reduce using rule 35 (statements -> if .)
    RIGHT_CURLY_BRACKET reduce using rule 35 (statements -> if .)


state 80

    (36) statements -> while .

    VAR             reduce using rule 36 (statements -> while .)
    CTE_ID          reduce using rule 36 (statements -> while .)
    PRINT           reduce using rule 36 (statements -> while .)
    READ_INPUT      reduce using rule 36 (statements -> while .)
    IF              reduce using rule 36 (statements -> while .)
    WHILE           reduce using rule 36 (statements -> while .)
    RETURN          reduce using rule 36 (statements -> while .)
    BINOMIAL        reduce using rule 36 (statements -> while .)
    POISSON         reduce using rule 36 (statements -> while .)
    COMPARE         reduce using rule 36 (statements -> while .)
    NORMAL          reduce using rule 36 (statements -> while .)
    UNIFORM         reduce using rule 36 (statements -> while .)
    LOGISTIC        reduce using rule 36 (statements -> while .)
    EXPONENTIAL     reduce using rule 36 (statements -> while .)
    CHISQUARE       reduce using rule 36 (statements -> while .)
    RIGHT_CURLY_BRACKET reduce using rule 36 (statements -> while .)


state 81

    (37) statements -> auxFuncCall .

    VAR             reduce using rule 37 (statements -> auxFuncCall .)
    CTE_ID          reduce using rule 37 (statements -> auxFuncCall .)
    PRINT           reduce using rule 37 (statements -> auxFuncCall .)
    READ_INPUT      reduce using rule 37 (statements -> auxFuncCall .)
    IF              reduce using rule 37 (statements -> auxFuncCall .)
    WHILE           reduce using rule 37 (statements -> auxFuncCall .)
    RETURN          reduce using rule 37 (statements -> auxFuncCall .)
    BINOMIAL        reduce using rule 37 (statements -> auxFuncCall .)
    POISSON         reduce using rule 37 (statements -> auxFuncCall .)
    COMPARE         reduce using rule 37 (statements -> auxFuncCall .)
    NORMAL          reduce using rule 37 (statements -> auxFuncCall .)
    UNIFORM         reduce using rule 37 (statements -> auxFuncCall .)
    LOGISTIC        reduce using rule 37 (statements -> auxFuncCall .)
    EXPONENTIAL     reduce using rule 37 (statements -> auxFuncCall .)
    CHISQUARE       reduce using rule 37 (statements -> auxFuncCall .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (statements -> auxFuncCall .)


state 82

    (38) statements -> return .

    VAR             reduce using rule 38 (statements -> return .)
    CTE_ID          reduce using rule 38 (statements -> return .)
    PRINT           reduce using rule 38 (statements -> return .)
    READ_INPUT      reduce using rule 38 (statements -> return .)
    IF              reduce using rule 38 (statements -> return .)
    WHILE           reduce using rule 38 (statements -> return .)
    RETURN          reduce using rule 38 (statements -> return .)
    BINOMIAL        reduce using rule 38 (statements -> return .)
    POISSON         reduce using rule 38 (statements -> return .)
    COMPARE         reduce using rule 38 (statements -> return .)
    NORMAL          reduce using rule 38 (statements -> return .)
    UNIFORM         reduce using rule 38 (statements -> return .)
    LOGISTIC        reduce using rule 38 (statements -> return .)
    EXPONENTIAL     reduce using rule 38 (statements -> return .)
    CHISQUARE       reduce using rule 38 (statements -> return .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (statements -> return .)


state 83

    (39) assignment -> CTE_ID . addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) assignment -> CTE_ID . LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (87) functionCall -> CTE_ID . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (116) addOperand -> .
    (136) doFuncCall -> .

    LEFT_BRACKET    shift and go to state 112
    EQUAL           reduce using rule 116 (addOperand -> .)
    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    addOperand                     shift and go to state 111
    doFuncCall                     shift and go to state 113

state 84

    (41) writting -> PRINT . LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 114


state 85

    (46) reading -> READ_INPUT . LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 115


state 86

    (82) if -> IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF

    LEFT_PAREN      shift and go to state 116


state 87

    (86) while -> WHILE . LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile

    LEFT_PAREN      shift and go to state 117


state 88

    (96) auxFuncCall -> functionCall . SEMI_COLON

    SEMI_COLON      shift and go to state 118


state 89

    (102) return -> RETURN . RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    RETURN_SIGN     shift and go to state 119


state 90

    (88) functionCall -> BINOMIAL . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 120

state 91

    (89) functionCall -> POISSON . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 121

state 92

    (90) functionCall -> COMPARE . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 122

state 93

    (91) functionCall -> NORMAL . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 123

state 94

    (92) functionCall -> UNIFORM . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 124

state 95

    (93) functionCall -> LOGISTIC . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 125

state 96

    (94) functionCall -> EXPONENTIAL . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 126

state 97

    (95) functionCall -> CHISQUARE . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (136) doFuncCall -> .

    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    doFuncCall                     shift and go to state 127

state 98

    (19) auxParams -> type CTE_ID addParam multipleParams .

    RIGHT_PAREN     reduce using rule 19 (auxParams -> type CTE_ID addParam multipleParams .)


state 99

    (20) auxParams -> type CTE_ID addParam LEFT_BRACKET . CTE_INT RIGHT_BRACKET multipleParams

    CTE_INT         shift and go to state 128


state 100

    (21) multipleParams -> COMMA . auxParams
    (19) auxParams -> . type CTE_ID addParam multipleParams
    (20) auxParams -> . type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams
    (28) type -> . INT setCurrentType
    (29) type -> . FLOAT setCurrentType
    (30) type -> . BOOL setCurrentType
    (31) type -> . STRING setCurrentType

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    auxParams                      shift and go to state 129
    type                           shift and go to state 53

state 101

    (22) multipleParams -> empty .

    RIGHT_PAREN     reduce using rule 22 (multipleParams -> empty .)


state 102

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (112) endFunction -> .

    FUNC            reduce using rule 112 (endFunction -> .)
    MAIN            reduce using rule 112 (endFunction -> .)

    endFunction                    shift and go to state 130

state 103

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (112) endFunction -> .

    FUNC            reduce using rule 112 (endFunction -> .)
    MAIN            reduce using rule 112 (endFunction -> .)

    endFunction                    shift and go to state 131

state 104

    (12) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 37


state 105

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .

    FUNC            reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    MAIN            reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    CTE_ID          reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    PRINT           reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    READ_INPUT      reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    IF              reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    WHILE           reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    RETURN          reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    BINOMIAL        reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    POISSON         reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    COMPARE         reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    NORMAL          reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    UNIFORM         reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    LOGISTIC        reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    EXPONENTIAL     reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    CHISQUARE       reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)


state 106

    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .

    FUNC            reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    MAIN            reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    PRINT           reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    IF              reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    WHILE           reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    RETURN          reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    BINOMIAL        reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    POISSON         reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    COMPARE         reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    NORMAL          reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    UNIFORM         reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    LOGISTIC        reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    EXPONENTIAL     reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    CHISQUARE       reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)


state 107

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram . endPrint
    (108) endPrint -> .

    $end            reduce using rule 108 (endPrint -> .)

    endPrint                       shift and go to state 132

state 108

    (23) funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .

    $end            reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    FUNC            reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    CTE_ID          reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    PRINT           reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    READ_INPUT      reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    BINOMIAL        reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    POISSON         reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    COMPARE         reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    NORMAL          reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    UNIFORM         reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    LOGISTIC        reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    EXPONENTIAL     reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    CHISQUARE       reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)


state 109

    (24) auxFuncBody -> vars statements . auxFuncBody
    (24) auxFuncBody -> . vars statements auxFuncBody
    (25) auxFuncBody -> . statements auxFuncBody
    (26) auxFuncBody -> . vars
    (27) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (32) statements -> . assignment
    (33) statements -> . writting
    (34) statements -> . reading
    (35) statements -> . if
    (36) statements -> . while
    (37) statements -> . auxFuncCall
    (38) statements -> . return
    (143) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (39) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (41) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (46) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (82) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (86) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (96) auxFuncCall -> . functionCall SEMI_COLON
    (102) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BINOMIAL resolved as shift
  ! shift/reduce conflict for POISSON resolved as shift
  ! shift/reduce conflict for COMPARE resolved as shift
  ! shift/reduce conflict for NORMAL resolved as shift
  ! shift/reduce conflict for UNIFORM resolved as shift
  ! shift/reduce conflict for LOGISTIC resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for CHISQUARE resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 143 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

  ! CTE_ID          [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! BINOMIAL        [ reduce using rule 143 (empty -> .) ]
  ! POISSON         [ reduce using rule 143 (empty -> .) ]
  ! COMPARE         [ reduce using rule 143 (empty -> .) ]
  ! NORMAL          [ reduce using rule 143 (empty -> .) ]
  ! UNIFORM         [ reduce using rule 143 (empty -> .) ]
  ! LOGISTIC        [ reduce using rule 143 (empty -> .) ]
  ! EXPONENTIAL     [ reduce using rule 143 (empty -> .) ]
  ! CHISQUARE       [ reduce using rule 143 (empty -> .) ]

    vars                           shift and go to state 73
    statements                     shift and go to state 74
    auxFuncBody                    shift and go to state 133
    empty                          shift and go to state 75
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 110

    (25) auxFuncBody -> statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 25 (auxFuncBody -> statements auxFuncBody .)


state 111

    (39) assignment -> CTE_ID addOperand . EQUAL addOperator logicExpression doAssign SEMI_COLON

    EQUAL           shift and go to state 134


state 112

    (40) assignment -> CTE_ID LEFT_BRACKET . addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (120) addParenthesis -> .

    LEFT_PAREN      reduce using rule 120 (addParenthesis -> .)
    CTE_ID          reduce using rule 120 (addParenthesis -> .)
    CTE_INT         reduce using rule 120 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 120 (addParenthesis -> .)
    CTE_STRING      reduce using rule 120 (addParenthesis -> .)
    TRUE            reduce using rule 120 (addParenthesis -> .)
    FALSE           reduce using rule 120 (addParenthesis -> .)
    BINOMIAL        reduce using rule 120 (addParenthesis -> .)
    POISSON         reduce using rule 120 (addParenthesis -> .)
    COMPARE         reduce using rule 120 (addParenthesis -> .)
    NORMAL          reduce using rule 120 (addParenthesis -> .)
    UNIFORM         reduce using rule 120 (addParenthesis -> .)
    LOGISTIC        reduce using rule 120 (addParenthesis -> .)
    EXPONENTIAL     reduce using rule 120 (addParenthesis -> .)
    CHISQUARE       reduce using rule 120 (addParenthesis -> .)

    addParenthesis                 shift and go to state 135

state 113

    (87) functionCall -> CTE_ID doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 136


state 114

    (41) writting -> PRINT LEFT_PAREN . auxWritting RIGHT_PAREN SEMI_COLON
    (42) auxWritting -> . logicExpression doWrite multipleWrite
    (43) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    CTE_STRING      shift and go to state 140
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    auxWritting                    shift and go to state 138
    logicExpression                shift and go to state 139
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 115

    (46) reading -> READ_INPUT LEFT_PAREN . auxReading RIGHT_PAREN SEMI_COLON
    (47) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 153

    auxReading                     shift and go to state 152

state 116

    (82) if -> IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody else endIF
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 154
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 117

    (86) while -> WHILE LEFT_PAREN . addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (135) addCondStart -> .

    LEFT_PAREN      reduce using rule 135 (addCondStart -> .)
    CTE_ID          reduce using rule 135 (addCondStart -> .)
    CTE_INT         reduce using rule 135 (addCondStart -> .)
    CTE_FLOAT       reduce using rule 135 (addCondStart -> .)
    CTE_STRING      reduce using rule 135 (addCondStart -> .)
    TRUE            reduce using rule 135 (addCondStart -> .)
    FALSE           reduce using rule 135 (addCondStart -> .)
    BINOMIAL        reduce using rule 135 (addCondStart -> .)
    POISSON         reduce using rule 135 (addCondStart -> .)
    COMPARE         reduce using rule 135 (addCondStart -> .)
    NORMAL          reduce using rule 135 (addCondStart -> .)
    UNIFORM         reduce using rule 135 (addCondStart -> .)
    LOGISTIC        reduce using rule 135 (addCondStart -> .)
    EXPONENTIAL     reduce using rule 135 (addCondStart -> .)
    CHISQUARE       reduce using rule 135 (addCondStart -> .)

    addCondStart                   shift and go to state 156

state 118

    (96) auxFuncCall -> functionCall SEMI_COLON .

    VAR             reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    CTE_ID          reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    PRINT           reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    READ_INPUT      reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    IF              reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    WHILE           reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    RETURN          reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    BINOMIAL        reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    POISSON         reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    COMPARE         reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    NORMAL          reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    UNIFORM         reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    LOGISTIC        reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    EXPONENTIAL     reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    CHISQUARE       reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 96 (auxFuncCall -> functionCall SEMI_COLON .)


state 119

    (102) return -> RETURN RETURN_SIGN . LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 157


state 120

    (88) functionCall -> BINOMIAL doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 158


state 121

    (89) functionCall -> POISSON doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 159


state 122

    (90) functionCall -> COMPARE doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 160


state 123

    (91) functionCall -> NORMAL doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 161


state 124

    (92) functionCall -> UNIFORM doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 162


state 125

    (93) functionCall -> LOGISTIC doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 163


state 126

    (94) functionCall -> EXPONENTIAL doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 164


state 127

    (95) functionCall -> CHISQUARE doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 165


state 128

    (20) auxParams -> type CTE_ID addParam LEFT_BRACKET CTE_INT . RIGHT_BRACKET multipleParams

    RIGHT_BRACKET   shift and go to state 166


state 129

    (21) multipleParams -> COMMA auxParams .

    RIGHT_PAREN     reduce using rule 21 (multipleParams -> COMMA auxParams .)


state 130

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 15 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 15 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 131

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 16 (funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 16 (funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 132

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .

    $end            reduce using rule 1 (program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .)


state 133

    (24) auxFuncBody -> vars statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 24 (auxFuncBody -> vars statements auxFuncBody .)


state 134

    (39) assignment -> CTE_ID addOperand EQUAL . addOperator logicExpression doAssign SEMI_COLON
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 167

state 135

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis . logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 168
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 136

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSub
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 169
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 137

    (72) factor -> LEFT_PAREN . addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (120) addParenthesis -> .

    LEFT_PAREN      reduce using rule 120 (addParenthesis -> .)
    CTE_ID          reduce using rule 120 (addParenthesis -> .)
    CTE_INT         reduce using rule 120 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 120 (addParenthesis -> .)
    CTE_STRING      reduce using rule 120 (addParenthesis -> .)
    TRUE            reduce using rule 120 (addParenthesis -> .)
    FALSE           reduce using rule 120 (addParenthesis -> .)
    BINOMIAL        reduce using rule 120 (addParenthesis -> .)
    POISSON         reduce using rule 120 (addParenthesis -> .)
    COMPARE         reduce using rule 120 (addParenthesis -> .)
    NORMAL          reduce using rule 120 (addParenthesis -> .)
    UNIFORM         reduce using rule 120 (addParenthesis -> .)
    LOGISTIC        reduce using rule 120 (addParenthesis -> .)
    EXPONENTIAL     reduce using rule 120 (addParenthesis -> .)
    CHISQUARE       reduce using rule 120 (addParenthesis -> .)

    addParenthesis                 shift and go to state 173

state 138

    (41) writting -> PRINT LEFT_PAREN auxWritting . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 174


state 139

    (42) auxWritting -> logicExpression . doWrite multipleWrite
    (127) doWrite -> .

    COMMA           reduce using rule 127 (doWrite -> .)
    RIGHT_PAREN     reduce using rule 127 (doWrite -> .)

    doWrite                        shift and go to state 175

state 140

    (43) auxWritting -> CTE_STRING . doWriteString multipleWrite
    (78) constants -> CTE_STRING . addConstantOperand
    (128) doWriteString -> .
    (117) addConstantOperand -> .

  ! reduce/reduce conflict for COMMA resolved using rule 117 (addConstantOperand -> .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 117 (addConstantOperand -> .)
    TIMES           reduce using rule 117 (addConstantOperand -> .)
    DIV             reduce using rule 117 (addConstantOperand -> .)
    MOD             reduce using rule 117 (addConstantOperand -> .)
    EXP             reduce using rule 117 (addConstantOperand -> .)
    PLUS            reduce using rule 117 (addConstantOperand -> .)
    MINUS           reduce using rule 117 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 117 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 117 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 117 (addConstantOperand -> .)
    EQUALS          reduce using rule 117 (addConstantOperand -> .)
    AND             reduce using rule 117 (addConstantOperand -> .)
    OR              reduce using rule 117 (addConstantOperand -> .)
    COMMA           reduce using rule 117 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 117 (addConstantOperand -> .)

  ! COMMA           [ reduce using rule 128 (doWriteString -> .) ]
  ! RIGHT_PAREN     [ reduce using rule 128 (doWriteString -> .) ]

    doWriteString                  shift and go to state 176
    addConstantOperand             shift and go to state 177

state 141

    (50) logicExpression -> exp . doLogicExpression auxLogicExpression
    (122) doLogicExpression -> .

    AND             reduce using rule 122 (doLogicExpression -> .)
    OR              reduce using rule 122 (doLogicExpression -> .)
    COMMA           reduce using rule 122 (doLogicExpression -> .)
    RIGHT_PAREN     reduce using rule 122 (doLogicExpression -> .)
    RIGHT_BRACKET   reduce using rule 122 (doLogicExpression -> .)
    SEMI_COLON      reduce using rule 122 (doLogicExpression -> .)

    doLogicExpression              shift and go to state 178

state 142

    (54) exp -> exp2 . doCompExpression auxExp
    (123) doCompExpression -> .

    GREATER_THAN    reduce using rule 123 (doCompExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 123 (doCompExpression -> .)
    LESS_THAN       reduce using rule 123 (doCompExpression -> .)
    LESS_EQUAL_THAN reduce using rule 123 (doCompExpression -> .)
    NOT_EQUALS      reduce using rule 123 (doCompExpression -> .)
    EQUALS          reduce using rule 123 (doCompExpression -> .)
    AND             reduce using rule 123 (doCompExpression -> .)
    OR              reduce using rule 123 (doCompExpression -> .)
    COMMA           reduce using rule 123 (doCompExpression -> .)
    RIGHT_PAREN     reduce using rule 123 (doCompExpression -> .)
    RIGHT_BRACKET   reduce using rule 123 (doCompExpression -> .)
    SEMI_COLON      reduce using rule 123 (doCompExpression -> .)

    doCompExpression               shift and go to state 179

state 143

    (62) exp2 -> term . doExpression exp2Aux
    (124) doExpression -> .

    PLUS            reduce using rule 124 (doExpression -> .)
    MINUS           reduce using rule 124 (doExpression -> .)
    GREATER_THAN    reduce using rule 124 (doExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 124 (doExpression -> .)
    LESS_THAN       reduce using rule 124 (doExpression -> .)
    LESS_EQUAL_THAN reduce using rule 124 (doExpression -> .)
    NOT_EQUALS      reduce using rule 124 (doExpression -> .)
    EQUALS          reduce using rule 124 (doExpression -> .)
    AND             reduce using rule 124 (doExpression -> .)
    OR              reduce using rule 124 (doExpression -> .)
    COMMA           reduce using rule 124 (doExpression -> .)
    RIGHT_PAREN     reduce using rule 124 (doExpression -> .)
    RIGHT_BRACKET   reduce using rule 124 (doExpression -> .)
    SEMI_COLON      reduce using rule 124 (doExpression -> .)

    doExpression                   shift and go to state 180

state 144

    (66) term -> factor . doTerm auxTerm
    (125) doTerm -> .

    TIMES           reduce using rule 125 (doTerm -> .)
    DIV             reduce using rule 125 (doTerm -> .)
    MOD             reduce using rule 125 (doTerm -> .)
    EXP             reduce using rule 125 (doTerm -> .)
    PLUS            reduce using rule 125 (doTerm -> .)
    MINUS           reduce using rule 125 (doTerm -> .)
    GREATER_THAN    reduce using rule 125 (doTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 125 (doTerm -> .)
    LESS_THAN       reduce using rule 125 (doTerm -> .)
    LESS_EQUAL_THAN reduce using rule 125 (doTerm -> .)
    NOT_EQUALS      reduce using rule 125 (doTerm -> .)
    EQUALS          reduce using rule 125 (doTerm -> .)
    AND             reduce using rule 125 (doTerm -> .)
    OR              reduce using rule 125 (doTerm -> .)
    COMMA           reduce using rule 125 (doTerm -> .)
    RIGHT_PAREN     reduce using rule 125 (doTerm -> .)
    RIGHT_BRACKET   reduce using rule 125 (doTerm -> .)
    SEMI_COLON      reduce using rule 125 (doTerm -> .)

    doTerm                         shift and go to state 181

state 145

    (73) factor -> constants .

    TIMES           reduce using rule 73 (factor -> constants .)
    DIV             reduce using rule 73 (factor -> constants .)
    MOD             reduce using rule 73 (factor -> constants .)
    EXP             reduce using rule 73 (factor -> constants .)
    PLUS            reduce using rule 73 (factor -> constants .)
    MINUS           reduce using rule 73 (factor -> constants .)
    GREATER_THAN    reduce using rule 73 (factor -> constants .)
    GREATER_EQUAL_THAN reduce using rule 73 (factor -> constants .)
    LESS_THAN       reduce using rule 73 (factor -> constants .)
    LESS_EQUAL_THAN reduce using rule 73 (factor -> constants .)
    NOT_EQUALS      reduce using rule 73 (factor -> constants .)
    EQUALS          reduce using rule 73 (factor -> constants .)
    AND             reduce using rule 73 (factor -> constants .)
    OR              reduce using rule 73 (factor -> constants .)
    COMMA           reduce using rule 73 (factor -> constants .)
    RIGHT_PAREN     reduce using rule 73 (factor -> constants .)
    RIGHT_BRACKET   reduce using rule 73 (factor -> constants .)
    SEMI_COLON      reduce using rule 73 (factor -> constants .)


state 146

    (74) constants -> CTE_ID . addOperand
    (75) constants -> CTE_ID . LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (87) functionCall -> CTE_ID . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (116) addOperand -> .
    (136) doFuncCall -> .

    LEFT_BRACKET    shift and go to state 183
    TIMES           reduce using rule 116 (addOperand -> .)
    DIV             reduce using rule 116 (addOperand -> .)
    MOD             reduce using rule 116 (addOperand -> .)
    EXP             reduce using rule 116 (addOperand -> .)
    PLUS            reduce using rule 116 (addOperand -> .)
    MINUS           reduce using rule 116 (addOperand -> .)
    GREATER_THAN    reduce using rule 116 (addOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 116 (addOperand -> .)
    LESS_THAN       reduce using rule 116 (addOperand -> .)
    LESS_EQUAL_THAN reduce using rule 116 (addOperand -> .)
    NOT_EQUALS      reduce using rule 116 (addOperand -> .)
    EQUALS          reduce using rule 116 (addOperand -> .)
    AND             reduce using rule 116 (addOperand -> .)
    OR              reduce using rule 116 (addOperand -> .)
    COMMA           reduce using rule 116 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 116 (addOperand -> .)
    RIGHT_BRACKET   reduce using rule 116 (addOperand -> .)
    SEMI_COLON      reduce using rule 116 (addOperand -> .)
    LEFT_PAREN      reduce using rule 136 (doFuncCall -> .)

    addOperand                     shift and go to state 182
    doFuncCall                     shift and go to state 113

state 147

    (76) constants -> CTE_INT . addConstantOperand
    (117) addConstantOperand -> .

    TIMES           reduce using rule 117 (addConstantOperand -> .)
    DIV             reduce using rule 117 (addConstantOperand -> .)
    MOD             reduce using rule 117 (addConstantOperand -> .)
    EXP             reduce using rule 117 (addConstantOperand -> .)
    PLUS            reduce using rule 117 (addConstantOperand -> .)
    MINUS           reduce using rule 117 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 117 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 117 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 117 (addConstantOperand -> .)
    EQUALS          reduce using rule 117 (addConstantOperand -> .)
    AND             reduce using rule 117 (addConstantOperand -> .)
    OR              reduce using rule 117 (addConstantOperand -> .)
    COMMA           reduce using rule 117 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 117 (addConstantOperand -> .)
    RIGHT_BRACKET   reduce using rule 117 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 117 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 184

state 148

    (77) constants -> CTE_FLOAT . addConstantOperand
    (117) addConstantOperand -> .

    TIMES           reduce using rule 117 (addConstantOperand -> .)
    DIV             reduce using rule 117 (addConstantOperand -> .)
    MOD             reduce using rule 117 (addConstantOperand -> .)
    EXP             reduce using rule 117 (addConstantOperand -> .)
    PLUS            reduce using rule 117 (addConstantOperand -> .)
    MINUS           reduce using rule 117 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 117 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 117 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 117 (addConstantOperand -> .)
    EQUALS          reduce using rule 117 (addConstantOperand -> .)
    AND             reduce using rule 117 (addConstantOperand -> .)
    OR              reduce using rule 117 (addConstantOperand -> .)
    COMMA           reduce using rule 117 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 117 (addConstantOperand -> .)
    RIGHT_BRACKET   reduce using rule 117 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 117 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 185

state 149

    (79) constants -> TRUE . addConstantBool
    (118) addConstantBool -> .

    TIMES           reduce using rule 118 (addConstantBool -> .)
    DIV             reduce using rule 118 (addConstantBool -> .)
    MOD             reduce using rule 118 (addConstantBool -> .)
    EXP             reduce using rule 118 (addConstantBool -> .)
    PLUS            reduce using rule 118 (addConstantBool -> .)
    MINUS           reduce using rule 118 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 118 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 118 (addConstantBool -> .)
    LESS_THAN       reduce using rule 118 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 118 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 118 (addConstantBool -> .)
    EQUALS          reduce using rule 118 (addConstantBool -> .)
    AND             reduce using rule 118 (addConstantBool -> .)
    OR              reduce using rule 118 (addConstantBool -> .)
    COMMA           reduce using rule 118 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 118 (addConstantBool -> .)
    RIGHT_BRACKET   reduce using rule 118 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 118 (addConstantBool -> .)

    addConstantBool                shift and go to state 186

state 150

    (80) constants -> FALSE . addConstantBool
    (118) addConstantBool -> .

    TIMES           reduce using rule 118 (addConstantBool -> .)
    DIV             reduce using rule 118 (addConstantBool -> .)
    MOD             reduce using rule 118 (addConstantBool -> .)
    EXP             reduce using rule 118 (addConstantBool -> .)
    PLUS            reduce using rule 118 (addConstantBool -> .)
    MINUS           reduce using rule 118 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 118 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 118 (addConstantBool -> .)
    LESS_THAN       reduce using rule 118 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 118 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 118 (addConstantBool -> .)
    EQUALS          reduce using rule 118 (addConstantBool -> .)
    AND             reduce using rule 118 (addConstantBool -> .)
    OR              reduce using rule 118 (addConstantBool -> .)
    COMMA           reduce using rule 118 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 118 (addConstantBool -> .)
    RIGHT_BRACKET   reduce using rule 118 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 118 (addConstantBool -> .)

    addConstantBool                shift and go to state 187

state 151

    (81) constants -> functionCall .

    TIMES           reduce using rule 81 (constants -> functionCall .)
    DIV             reduce using rule 81 (constants -> functionCall .)
    MOD             reduce using rule 81 (constants -> functionCall .)
    EXP             reduce using rule 81 (constants -> functionCall .)
    PLUS            reduce using rule 81 (constants -> functionCall .)
    MINUS           reduce using rule 81 (constants -> functionCall .)
    GREATER_THAN    reduce using rule 81 (constants -> functionCall .)
    GREATER_EQUAL_THAN reduce using rule 81 (constants -> functionCall .)
    LESS_THAN       reduce using rule 81 (constants -> functionCall .)
    LESS_EQUAL_THAN reduce using rule 81 (constants -> functionCall .)
    NOT_EQUALS      reduce using rule 81 (constants -> functionCall .)
    EQUALS          reduce using rule 81 (constants -> functionCall .)
    AND             reduce using rule 81 (constants -> functionCall .)
    OR              reduce using rule 81 (constants -> functionCall .)
    COMMA           reduce using rule 81 (constants -> functionCall .)
    RIGHT_PAREN     reduce using rule 81 (constants -> functionCall .)
    RIGHT_BRACKET   reduce using rule 81 (constants -> functionCall .)
    SEMI_COLON      reduce using rule 81 (constants -> functionCall .)


state 152

    (46) reading -> READ_INPUT LEFT_PAREN auxReading . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 188


state 153

    (47) auxReading -> CTE_ID . addOperand doReading multipleRead
    (116) addOperand -> .

    COMMA           reduce using rule 116 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 116 (addOperand -> .)

    addOperand                     shift and go to state 189

state 154

    (82) if -> IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody else endIF
    (130) doIF -> .

    RIGHT_PAREN     reduce using rule 130 (doIF -> .)

    doIF                           shift and go to state 190

state 155

    (78) constants -> CTE_STRING . addConstantOperand
    (117) addConstantOperand -> .

    TIMES           reduce using rule 117 (addConstantOperand -> .)
    DIV             reduce using rule 117 (addConstantOperand -> .)
    MOD             reduce using rule 117 (addConstantOperand -> .)
    EXP             reduce using rule 117 (addConstantOperand -> .)
    PLUS            reduce using rule 117 (addConstantOperand -> .)
    MINUS           reduce using rule 117 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 117 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 117 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 117 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 117 (addConstantOperand -> .)
    EQUALS          reduce using rule 117 (addConstantOperand -> .)
    AND             reduce using rule 117 (addConstantOperand -> .)
    OR              reduce using rule 117 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 117 (addConstantOperand -> .)
    RIGHT_BRACKET   reduce using rule 117 (addConstantOperand -> .)
    COMMA           reduce using rule 117 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 117 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 177

state 156

    (86) while -> WHILE LEFT_PAREN addCondStart . logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 191
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 157

    (102) return -> RETURN RETURN_SIGN LEFT_PAREN . auxReturn RIGHT_PAREN SEMI_COLON
    (103) auxReturn -> . logicExpression doReturn
    (104) auxReturn -> . empty
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (143) empty -> .
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    auxReturn                      shift and go to state 192
    logicExpression                shift and go to state 193
    empty                          shift and go to state 194
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 158

    (88) functionCall -> BINOMIAL doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 195
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 159

    (89) functionCall -> POISSON doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 196
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 160

    (90) functionCall -> COMPARE doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 197
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 161

    (91) functionCall -> NORMAL doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 198
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 162

    (92) functionCall -> UNIFORM doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 199
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 163

    (93) functionCall -> LOGISTIC doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 200
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 164

    (94) functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 201
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 165

    (95) functionCall -> CHISQUARE doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSubS
    (97) arguments -> . auxArguments
    (98) arguments -> . empty
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (143) empty -> .
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    arguments                      shift and go to state 202
    auxArguments                   shift and go to state 170
    empty                          shift and go to state 171
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 166

    (20) auxParams -> type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET . multipleParams
    (21) multipleParams -> . COMMA auxParams
    (22) multipleParams -> . empty
    (143) empty -> .

    COMMA           shift and go to state 100
    RIGHT_PAREN     reduce using rule 143 (empty -> .)

    multipleParams                 shift and go to state 203
    empty                          shift and go to state 101

state 167

    (39) assignment -> CTE_ID addOperand EQUAL addOperator . logicExpression doAssign SEMI_COLON
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 204
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 168

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression . RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON

    RIGHT_BRACKET   shift and go to state 205


state 169

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSub
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 206

state 170

    (97) arguments -> auxArguments .

    RIGHT_PAREN     reduce using rule 97 (arguments -> auxArguments .)


state 171

    (98) arguments -> empty .

    RIGHT_PAREN     reduce using rule 98 (arguments -> empty .)


state 172

    (99) auxArguments -> logicExpression . checkType multipleArguments
    (139) checkType -> .

    COMMA           reduce using rule 139 (checkType -> .)
    RIGHT_PAREN     reduce using rule 139 (checkType -> .)

    checkType                      shift and go to state 207

state 173

    (72) factor -> LEFT_PAREN addParenthesis . logicExpression RIGHT_PAREN removeParenthesis
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 208
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 174

    (41) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 209


state 175

    (42) auxWritting -> logicExpression doWrite . multipleWrite
    (44) multipleWrite -> . COMMA auxWritting
    (45) multipleWrite -> . empty
    (143) empty -> .

    COMMA           shift and go to state 211
    RIGHT_PAREN     reduce using rule 143 (empty -> .)

    multipleWrite                  shift and go to state 210
    empty                          shift and go to state 212

state 176

    (43) auxWritting -> CTE_STRING doWriteString . multipleWrite
    (44) multipleWrite -> . COMMA auxWritting
    (45) multipleWrite -> . empty
    (143) empty -> .

    COMMA           shift and go to state 211
    RIGHT_PAREN     reduce using rule 143 (empty -> .)

    multipleWrite                  shift and go to state 213
    empty                          shift and go to state 212

state 177

    (78) constants -> CTE_STRING addConstantOperand .

    TIMES           reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    DIV             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    MOD             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    EXP             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    PLUS            reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    MINUS           reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    GREATER_THAN    reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    LESS_THAN       reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    NOT_EQUALS      reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    EQUALS          reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    AND             reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    OR              reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    COMMA           reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    RIGHT_PAREN     reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    RIGHT_BRACKET   reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)
    SEMI_COLON      reduce using rule 78 (constants -> CTE_STRING addConstantOperand .)


state 178

    (50) logicExpression -> exp doLogicExpression . auxLogicExpression
    (51) auxLogicExpression -> . AND addOperator logicExpression
    (52) auxLogicExpression -> . OR addOperator logicExpression
    (53) auxLogicExpression -> . empty
    (143) empty -> .

    AND             shift and go to state 215
    OR              shift and go to state 216
    COMMA           reduce using rule 143 (empty -> .)
    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    RIGHT_BRACKET   reduce using rule 143 (empty -> .)
    SEMI_COLON      reduce using rule 143 (empty -> .)

    auxLogicExpression             shift and go to state 214
    empty                          shift and go to state 217

state 179

    (54) exp -> exp2 doCompExpression . auxExp
    (55) auxExp -> . GREATER_THAN addOperator exp
    (56) auxExp -> . GREATER_EQUAL_THAN addOperator exp
    (57) auxExp -> . LESS_THAN addOperator exp
    (58) auxExp -> . LESS_EQUAL_THAN addOperator exp
    (59) auxExp -> . NOT_EQUALS addOperator exp
    (60) auxExp -> . EQUALS addOperator exp
    (61) auxExp -> . empty
    (143) empty -> .

    GREATER_THAN    shift and go to state 219
    GREATER_EQUAL_THAN shift and go to state 220
    LESS_THAN       shift and go to state 221
    LESS_EQUAL_THAN shift and go to state 222
    NOT_EQUALS      shift and go to state 223
    EQUALS          shift and go to state 224
    AND             reduce using rule 143 (empty -> .)
    OR              reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    RIGHT_BRACKET   reduce using rule 143 (empty -> .)
    SEMI_COLON      reduce using rule 143 (empty -> .)

    auxExp                         shift and go to state 218
    empty                          shift and go to state 225

state 180

    (62) exp2 -> term doExpression . exp2Aux
    (63) exp2Aux -> . PLUS addOperator exp2
    (64) exp2Aux -> . MINUS addOperator exp2
    (65) exp2Aux -> . empty
    (143) empty -> .

    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    GREATER_THAN    reduce using rule 143 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 143 (empty -> .)
    LESS_THAN       reduce using rule 143 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 143 (empty -> .)
    NOT_EQUALS      reduce using rule 143 (empty -> .)
    EQUALS          reduce using rule 143 (empty -> .)
    AND             reduce using rule 143 (empty -> .)
    OR              reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    RIGHT_BRACKET   reduce using rule 143 (empty -> .)
    SEMI_COLON      reduce using rule 143 (empty -> .)

    exp2Aux                        shift and go to state 226
    empty                          shift and go to state 229

state 181

    (66) term -> factor doTerm . auxTerm
    (67) auxTerm -> . TIMES addOperator term
    (68) auxTerm -> . DIV addOperator term
    (69) auxTerm -> . MOD addOperator term
    (70) auxTerm -> . EXP addOperator term
    (71) auxTerm -> . empty
    (143) empty -> .

    TIMES           shift and go to state 231
    DIV             shift and go to state 232
    MOD             shift and go to state 233
    EXP             shift and go to state 234
    PLUS            reduce using rule 143 (empty -> .)
    MINUS           reduce using rule 143 (empty -> .)
    GREATER_THAN    reduce using rule 143 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 143 (empty -> .)
    LESS_THAN       reduce using rule 143 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 143 (empty -> .)
    NOT_EQUALS      reduce using rule 143 (empty -> .)
    EQUALS          reduce using rule 143 (empty -> .)
    AND             reduce using rule 143 (empty -> .)
    OR              reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    RIGHT_PAREN     reduce using rule 143 (empty -> .)
    RIGHT_BRACKET   reduce using rule 143 (empty -> .)
    SEMI_COLON      reduce using rule 143 (empty -> .)

    auxTerm                        shift and go to state 230
    empty                          shift and go to state 235

state 182

    (74) constants -> CTE_ID addOperand .

    TIMES           reduce using rule 74 (constants -> CTE_ID addOperand .)
    DIV             reduce using rule 74 (constants -> CTE_ID addOperand .)
    MOD             reduce using rule 74 (constants -> CTE_ID addOperand .)
    EXP             reduce using rule 74 (constants -> CTE_ID addOperand .)
    PLUS            reduce using rule 74 (constants -> CTE_ID addOperand .)
    MINUS           reduce using rule 74 (constants -> CTE_ID addOperand .)
    GREATER_THAN    reduce using rule 74 (constants -> CTE_ID addOperand .)
    GREATER_EQUAL_THAN reduce using rule 74 (constants -> CTE_ID addOperand .)
    LESS_THAN       reduce using rule 74 (constants -> CTE_ID addOperand .)
    LESS_EQUAL_THAN reduce using rule 74 (constants -> CTE_ID addOperand .)
    NOT_EQUALS      reduce using rule 74 (constants -> CTE_ID addOperand .)
    EQUALS          reduce using rule 74 (constants -> CTE_ID addOperand .)
    AND             reduce using rule 74 (constants -> CTE_ID addOperand .)
    OR              reduce using rule 74 (constants -> CTE_ID addOperand .)
    COMMA           reduce using rule 74 (constants -> CTE_ID addOperand .)
    RIGHT_PAREN     reduce using rule 74 (constants -> CTE_ID addOperand .)
    RIGHT_BRACKET   reduce using rule 74 (constants -> CTE_ID addOperand .)
    SEMI_COLON      reduce using rule 74 (constants -> CTE_ID addOperand .)


state 183

    (75) constants -> CTE_ID LEFT_BRACKET . addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (120) addParenthesis -> .

    LEFT_PAREN      reduce using rule 120 (addParenthesis -> .)
    CTE_ID          reduce using rule 120 (addParenthesis -> .)
    CTE_INT         reduce using rule 120 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 120 (addParenthesis -> .)
    CTE_STRING      reduce using rule 120 (addParenthesis -> .)
    TRUE            reduce using rule 120 (addParenthesis -> .)
    FALSE           reduce using rule 120 (addParenthesis -> .)
    BINOMIAL        reduce using rule 120 (addParenthesis -> .)
    POISSON         reduce using rule 120 (addParenthesis -> .)
    COMPARE         reduce using rule 120 (addParenthesis -> .)
    NORMAL          reduce using rule 120 (addParenthesis -> .)
    UNIFORM         reduce using rule 120 (addParenthesis -> .)
    LOGISTIC        reduce using rule 120 (addParenthesis -> .)
    EXPONENTIAL     reduce using rule 120 (addParenthesis -> .)
    CHISQUARE       reduce using rule 120 (addParenthesis -> .)

    addParenthesis                 shift and go to state 236

state 184

    (76) constants -> CTE_INT addConstantOperand .

    TIMES           reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    DIV             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    MOD             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    EXP             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    PLUS            reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    MINUS           reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    GREATER_THAN    reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    LESS_THAN       reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    NOT_EQUALS      reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    EQUALS          reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    AND             reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    OR              reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    COMMA           reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    RIGHT_BRACKET   reduce using rule 76 (constants -> CTE_INT addConstantOperand .)
    SEMI_COLON      reduce using rule 76 (constants -> CTE_INT addConstantOperand .)


state 185

    (77) constants -> CTE_FLOAT addConstantOperand .

    TIMES           reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    DIV             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    MOD             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    EXP             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    PLUS            reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    MINUS           reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_THAN    reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_THAN       reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    NOT_EQUALS      reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    EQUALS          reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    AND             reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    OR              reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    COMMA           reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    RIGHT_BRACKET   reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)
    SEMI_COLON      reduce using rule 77 (constants -> CTE_FLOAT addConstantOperand .)


state 186

    (79) constants -> TRUE addConstantBool .

    TIMES           reduce using rule 79 (constants -> TRUE addConstantBool .)
    DIV             reduce using rule 79 (constants -> TRUE addConstantBool .)
    MOD             reduce using rule 79 (constants -> TRUE addConstantBool .)
    EXP             reduce using rule 79 (constants -> TRUE addConstantBool .)
    PLUS            reduce using rule 79 (constants -> TRUE addConstantBool .)
    MINUS           reduce using rule 79 (constants -> TRUE addConstantBool .)
    GREATER_THAN    reduce using rule 79 (constants -> TRUE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 79 (constants -> TRUE addConstantBool .)
    LESS_THAN       reduce using rule 79 (constants -> TRUE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 79 (constants -> TRUE addConstantBool .)
    NOT_EQUALS      reduce using rule 79 (constants -> TRUE addConstantBool .)
    EQUALS          reduce using rule 79 (constants -> TRUE addConstantBool .)
    AND             reduce using rule 79 (constants -> TRUE addConstantBool .)
    OR              reduce using rule 79 (constants -> TRUE addConstantBool .)
    COMMA           reduce using rule 79 (constants -> TRUE addConstantBool .)
    RIGHT_PAREN     reduce using rule 79 (constants -> TRUE addConstantBool .)
    RIGHT_BRACKET   reduce using rule 79 (constants -> TRUE addConstantBool .)
    SEMI_COLON      reduce using rule 79 (constants -> TRUE addConstantBool .)


state 187

    (80) constants -> FALSE addConstantBool .

    TIMES           reduce using rule 80 (constants -> FALSE addConstantBool .)
    DIV             reduce using rule 80 (constants -> FALSE addConstantBool .)
    MOD             reduce using rule 80 (constants -> FALSE addConstantBool .)
    EXP             reduce using rule 80 (constants -> FALSE addConstantBool .)
    PLUS            reduce using rule 80 (constants -> FALSE addConstantBool .)
    MINUS           reduce using rule 80 (constants -> FALSE addConstantBool .)
    GREATER_THAN    reduce using rule 80 (constants -> FALSE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 80 (constants -> FALSE addConstantBool .)
    LESS_THAN       reduce using rule 80 (constants -> FALSE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 80 (constants -> FALSE addConstantBool .)
    NOT_EQUALS      reduce using rule 80 (constants -> FALSE addConstantBool .)
    EQUALS          reduce using rule 80 (constants -> FALSE addConstantBool .)
    AND             reduce using rule 80 (constants -> FALSE addConstantBool .)
    OR              reduce using rule 80 (constants -> FALSE addConstantBool .)
    COMMA           reduce using rule 80 (constants -> FALSE addConstantBool .)
    RIGHT_PAREN     reduce using rule 80 (constants -> FALSE addConstantBool .)
    RIGHT_BRACKET   reduce using rule 80 (constants -> FALSE addConstantBool .)
    SEMI_COLON      reduce using rule 80 (constants -> FALSE addConstantBool .)


state 188

    (46) reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 237


state 189

    (47) auxReading -> CTE_ID addOperand . doReading multipleRead
    (129) doReading -> .

    COMMA           reduce using rule 129 (doReading -> .)
    RIGHT_PAREN     reduce using rule 129 (doReading -> .)

    doReading                      shift and go to state 238

state 190

    (82) if -> IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody else endIF

    RIGHT_PAREN     shift and go to state 239


state 191

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression . doWhile RIGHT_PAREN funcBody endWhile
    (133) doWhile -> .

    RIGHT_PAREN     reduce using rule 133 (doWhile -> .)

    doWhile                        shift and go to state 240

state 192

    (102) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 241


state 193

    (103) auxReturn -> logicExpression . doReturn
    (140) doReturn -> .

    RIGHT_PAREN     reduce using rule 140 (doReturn -> .)

    doReturn                       shift and go to state 242

state 194

    (104) auxReturn -> empty .

    RIGHT_PAREN     reduce using rule 104 (auxReturn -> empty .)


state 195

    (88) functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 243

state 196

    (89) functionCall -> POISSON doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 244

state 197

    (90) functionCall -> COMPARE doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 245

state 198

    (91) functionCall -> NORMAL doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 246

state 199

    (92) functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 247

state 200

    (93) functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 248

state 201

    (94) functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 249

state 202

    (95) functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSubS
    (138) checkParams -> .

    RIGHT_PAREN     reduce using rule 138 (checkParams -> .)

    checkParams                    shift and go to state 250

state 203

    (20) auxParams -> type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams .

    RIGHT_PAREN     reduce using rule 20 (auxParams -> type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams .)


state 204

    (39) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression . doAssign SEMI_COLON
    (126) doAssign -> .

    SEMI_COLON      reduce using rule 126 (doAssign -> .)

    doAssign                       shift and go to state 251

state 205

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET . addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (116) addOperand -> .

    EQUAL           reduce using rule 116 (addOperand -> .)

    addOperand                     shift and go to state 252

state 206

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSub

    RIGHT_PAREN     shift and go to state 253


state 207

    (99) auxArguments -> logicExpression checkType . multipleArguments
    (100) multipleArguments -> . COMMA auxArguments
    (101) multipleArguments -> . empty
    (143) empty -> .

    COMMA           shift and go to state 255
    RIGHT_PAREN     reduce using rule 143 (empty -> .)

    multipleArguments              shift and go to state 254
    empty                          shift and go to state 256

state 208

    (72) factor -> LEFT_PAREN addParenthesis logicExpression . RIGHT_PAREN removeParenthesis

    RIGHT_PAREN     shift and go to state 257


state 209

    (41) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    BINOMIAL        reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    POISSON         reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    COMPARE         reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    NORMAL          reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    UNIFORM         reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    LOGISTIC        reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    EXPONENTIAL     reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    CHISQUARE       reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)


state 210

    (42) auxWritting -> logicExpression doWrite multipleWrite .

    RIGHT_PAREN     reduce using rule 42 (auxWritting -> logicExpression doWrite multipleWrite .)


state 211

    (44) multipleWrite -> COMMA . auxWritting
    (42) auxWritting -> . logicExpression doWrite multipleWrite
    (43) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    CTE_STRING      shift and go to state 140
    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    auxWritting                    shift and go to state 258
    logicExpression                shift and go to state 139
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 212

    (45) multipleWrite -> empty .

    RIGHT_PAREN     reduce using rule 45 (multipleWrite -> empty .)


state 213

    (43) auxWritting -> CTE_STRING doWriteString multipleWrite .

    RIGHT_PAREN     reduce using rule 43 (auxWritting -> CTE_STRING doWriteString multipleWrite .)


state 214

    (50) logicExpression -> exp doLogicExpression auxLogicExpression .

    COMMA           reduce using rule 50 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    RIGHT_PAREN     reduce using rule 50 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    RIGHT_BRACKET   reduce using rule 50 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    SEMI_COLON      reduce using rule 50 (logicExpression -> exp doLogicExpression auxLogicExpression .)


state 215

    (51) auxLogicExpression -> AND . addOperator logicExpression
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 259

state 216

    (52) auxLogicExpression -> OR . addOperator logicExpression
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 260

state 217

    (53) auxLogicExpression -> empty .

    COMMA           reduce using rule 53 (auxLogicExpression -> empty .)
    RIGHT_PAREN     reduce using rule 53 (auxLogicExpression -> empty .)
    RIGHT_BRACKET   reduce using rule 53 (auxLogicExpression -> empty .)
    SEMI_COLON      reduce using rule 53 (auxLogicExpression -> empty .)


state 218

    (54) exp -> exp2 doCompExpression auxExp .

    AND             reduce using rule 54 (exp -> exp2 doCompExpression auxExp .)
    OR              reduce using rule 54 (exp -> exp2 doCompExpression auxExp .)
    COMMA           reduce using rule 54 (exp -> exp2 doCompExpression auxExp .)
    RIGHT_PAREN     reduce using rule 54 (exp -> exp2 doCompExpression auxExp .)
    RIGHT_BRACKET   reduce using rule 54 (exp -> exp2 doCompExpression auxExp .)
    SEMI_COLON      reduce using rule 54 (exp -> exp2 doCompExpression auxExp .)


state 219

    (55) auxExp -> GREATER_THAN . addOperator exp
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 261

state 220

    (56) auxExp -> GREATER_EQUAL_THAN . addOperator exp
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 262

state 221

    (57) auxExp -> LESS_THAN . addOperator exp
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 263

state 222

    (58) auxExp -> LESS_EQUAL_THAN . addOperator exp
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 264

state 223

    (59) auxExp -> NOT_EQUALS . addOperator exp
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 265

state 224

    (60) auxExp -> EQUALS . addOperator exp
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 266

state 225

    (61) auxExp -> empty .

    AND             reduce using rule 61 (auxExp -> empty .)
    OR              reduce using rule 61 (auxExp -> empty .)
    COMMA           reduce using rule 61 (auxExp -> empty .)
    RIGHT_PAREN     reduce using rule 61 (auxExp -> empty .)
    RIGHT_BRACKET   reduce using rule 61 (auxExp -> empty .)
    SEMI_COLON      reduce using rule 61 (auxExp -> empty .)


state 226

    (62) exp2 -> term doExpression exp2Aux .

    GREATER_THAN    reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    GREATER_EQUAL_THAN reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    LESS_THAN       reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    LESS_EQUAL_THAN reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    NOT_EQUALS      reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    EQUALS          reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    AND             reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    OR              reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    COMMA           reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    RIGHT_PAREN     reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    RIGHT_BRACKET   reduce using rule 62 (exp2 -> term doExpression exp2Aux .)
    SEMI_COLON      reduce using rule 62 (exp2 -> term doExpression exp2Aux .)


state 227

    (63) exp2Aux -> PLUS . addOperator exp2
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 267

state 228

    (64) exp2Aux -> MINUS . addOperator exp2
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 268

state 229

    (65) exp2Aux -> empty .

    GREATER_THAN    reduce using rule 65 (exp2Aux -> empty .)
    GREATER_EQUAL_THAN reduce using rule 65 (exp2Aux -> empty .)
    LESS_THAN       reduce using rule 65 (exp2Aux -> empty .)
    LESS_EQUAL_THAN reduce using rule 65 (exp2Aux -> empty .)
    NOT_EQUALS      reduce using rule 65 (exp2Aux -> empty .)
    EQUALS          reduce using rule 65 (exp2Aux -> empty .)
    AND             reduce using rule 65 (exp2Aux -> empty .)
    OR              reduce using rule 65 (exp2Aux -> empty .)
    COMMA           reduce using rule 65 (exp2Aux -> empty .)
    RIGHT_PAREN     reduce using rule 65 (exp2Aux -> empty .)
    RIGHT_BRACKET   reduce using rule 65 (exp2Aux -> empty .)
    SEMI_COLON      reduce using rule 65 (exp2Aux -> empty .)


state 230

    (66) term -> factor doTerm auxTerm .

    PLUS            reduce using rule 66 (term -> factor doTerm auxTerm .)
    MINUS           reduce using rule 66 (term -> factor doTerm auxTerm .)
    GREATER_THAN    reduce using rule 66 (term -> factor doTerm auxTerm .)
    GREATER_EQUAL_THAN reduce using rule 66 (term -> factor doTerm auxTerm .)
    LESS_THAN       reduce using rule 66 (term -> factor doTerm auxTerm .)
    LESS_EQUAL_THAN reduce using rule 66 (term -> factor doTerm auxTerm .)
    NOT_EQUALS      reduce using rule 66 (term -> factor doTerm auxTerm .)
    EQUALS          reduce using rule 66 (term -> factor doTerm auxTerm .)
    AND             reduce using rule 66 (term -> factor doTerm auxTerm .)
    OR              reduce using rule 66 (term -> factor doTerm auxTerm .)
    COMMA           reduce using rule 66 (term -> factor doTerm auxTerm .)
    RIGHT_PAREN     reduce using rule 66 (term -> factor doTerm auxTerm .)
    RIGHT_BRACKET   reduce using rule 66 (term -> factor doTerm auxTerm .)
    SEMI_COLON      reduce using rule 66 (term -> factor doTerm auxTerm .)


state 231

    (67) auxTerm -> TIMES . addOperator term
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 269

state 232

    (68) auxTerm -> DIV . addOperator term
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 270

state 233

    (69) auxTerm -> MOD . addOperator term
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 271

state 234

    (70) auxTerm -> EXP . addOperator term
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 272

state 235

    (71) auxTerm -> empty .

    PLUS            reduce using rule 71 (auxTerm -> empty .)
    MINUS           reduce using rule 71 (auxTerm -> empty .)
    GREATER_THAN    reduce using rule 71 (auxTerm -> empty .)
    GREATER_EQUAL_THAN reduce using rule 71 (auxTerm -> empty .)
    LESS_THAN       reduce using rule 71 (auxTerm -> empty .)
    LESS_EQUAL_THAN reduce using rule 71 (auxTerm -> empty .)
    NOT_EQUALS      reduce using rule 71 (auxTerm -> empty .)
    EQUALS          reduce using rule 71 (auxTerm -> empty .)
    AND             reduce using rule 71 (auxTerm -> empty .)
    OR              reduce using rule 71 (auxTerm -> empty .)
    COMMA           reduce using rule 71 (auxTerm -> empty .)
    RIGHT_PAREN     reduce using rule 71 (auxTerm -> empty .)
    RIGHT_BRACKET   reduce using rule 71 (auxTerm -> empty .)
    SEMI_COLON      reduce using rule 71 (auxTerm -> empty .)


state 236

    (75) constants -> CTE_ID LEFT_BRACKET addParenthesis . logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 273
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 237

    (46) reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    BINOMIAL        reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    POISSON         reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    COMPARE         reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    NORMAL          reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    UNIFORM         reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    LOGISTIC        reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    EXPONENTIAL     reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    CHISQUARE       reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 46 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)


state 238

    (47) auxReading -> CTE_ID addOperand doReading . multipleRead
    (48) multipleRead -> . COMMA auxReading
    (49) multipleRead -> . empty
    (143) empty -> .

    COMMA           shift and go to state 275
    RIGHT_PAREN     reduce using rule 143 (empty -> .)

    multipleRead                   shift and go to state 274
    empty                          shift and go to state 276

state 239

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody else endIF
    (23) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 277

state 240

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile . RIGHT_PAREN funcBody endWhile

    RIGHT_PAREN     shift and go to state 278


state 241

    (102) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 279


state 242

    (103) auxReturn -> logicExpression doReturn .

    RIGHT_PAREN     reduce using rule 103 (auxReturn -> logicExpression doReturn .)


state 243

    (88) functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 280


state 244

    (89) functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 281


state 245

    (90) functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 282


state 246

    (91) functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 283


state 247

    (92) functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 284


state 248

    (93) functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 285


state 249

    (94) functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 286


state 250

    (95) functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSubS

    RIGHT_PAREN     shift and go to state 287


state 251

    (39) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign . SEMI_COLON

    SEMI_COLON      shift and go to state 288


state 252

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand . removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (121) removeParenthesis -> .

    EQUAL           reduce using rule 121 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 289

state 253

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSub
    (141) doGoSub -> .

    SEMI_COLON      reduce using rule 141 (doGoSub -> .)
    TIMES           reduce using rule 141 (doGoSub -> .)
    DIV             reduce using rule 141 (doGoSub -> .)
    MOD             reduce using rule 141 (doGoSub -> .)
    EXP             reduce using rule 141 (doGoSub -> .)
    PLUS            reduce using rule 141 (doGoSub -> .)
    MINUS           reduce using rule 141 (doGoSub -> .)
    GREATER_THAN    reduce using rule 141 (doGoSub -> .)
    GREATER_EQUAL_THAN reduce using rule 141 (doGoSub -> .)
    LESS_THAN       reduce using rule 141 (doGoSub -> .)
    LESS_EQUAL_THAN reduce using rule 141 (doGoSub -> .)
    NOT_EQUALS      reduce using rule 141 (doGoSub -> .)
    EQUALS          reduce using rule 141 (doGoSub -> .)
    AND             reduce using rule 141 (doGoSub -> .)
    OR              reduce using rule 141 (doGoSub -> .)
    COMMA           reduce using rule 141 (doGoSub -> .)
    RIGHT_PAREN     reduce using rule 141 (doGoSub -> .)
    RIGHT_BRACKET   reduce using rule 141 (doGoSub -> .)

    doGoSub                        shift and go to state 290

state 254

    (99) auxArguments -> logicExpression checkType multipleArguments .

    RIGHT_PAREN     reduce using rule 99 (auxArguments -> logicExpression checkType multipleArguments .)


state 255

    (100) multipleArguments -> COMMA . auxArguments
    (99) auxArguments -> . logicExpression checkType multipleArguments
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    auxArguments                   shift and go to state 291
    logicExpression                shift and go to state 172
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 256

    (101) multipleArguments -> empty .

    RIGHT_PAREN     reduce using rule 101 (multipleArguments -> empty .)


state 257

    (72) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN . removeParenthesis
    (121) removeParenthesis -> .

    TIMES           reduce using rule 121 (removeParenthesis -> .)
    DIV             reduce using rule 121 (removeParenthesis -> .)
    MOD             reduce using rule 121 (removeParenthesis -> .)
    EXP             reduce using rule 121 (removeParenthesis -> .)
    PLUS            reduce using rule 121 (removeParenthesis -> .)
    MINUS           reduce using rule 121 (removeParenthesis -> .)
    GREATER_THAN    reduce using rule 121 (removeParenthesis -> .)
    GREATER_EQUAL_THAN reduce using rule 121 (removeParenthesis -> .)
    LESS_THAN       reduce using rule 121 (removeParenthesis -> .)
    LESS_EQUAL_THAN reduce using rule 121 (removeParenthesis -> .)
    NOT_EQUALS      reduce using rule 121 (removeParenthesis -> .)
    EQUALS          reduce using rule 121 (removeParenthesis -> .)
    AND             reduce using rule 121 (removeParenthesis -> .)
    OR              reduce using rule 121 (removeParenthesis -> .)
    COMMA           reduce using rule 121 (removeParenthesis -> .)
    RIGHT_PAREN     reduce using rule 121 (removeParenthesis -> .)
    RIGHT_BRACKET   reduce using rule 121 (removeParenthesis -> .)
    SEMI_COLON      reduce using rule 121 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 292

state 258

    (44) multipleWrite -> COMMA auxWritting .

    RIGHT_PAREN     reduce using rule 44 (multipleWrite -> COMMA auxWritting .)


state 259

    (51) auxLogicExpression -> AND addOperator . logicExpression
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 293
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 260

    (52) auxLogicExpression -> OR addOperator . logicExpression
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 294
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 261

    (55) auxExp -> GREATER_THAN addOperator . exp
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp                            shift and go to state 295
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 262

    (56) auxExp -> GREATER_EQUAL_THAN addOperator . exp
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp                            shift and go to state 296
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 263

    (57) auxExp -> LESS_THAN addOperator . exp
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp                            shift and go to state 297
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 264

    (58) auxExp -> LESS_EQUAL_THAN addOperator . exp
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp                            shift and go to state 298
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 265

    (59) auxExp -> NOT_EQUALS addOperator . exp
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp                            shift and go to state 299
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 266

    (60) auxExp -> EQUALS addOperator . exp
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp                            shift and go to state 300
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 267

    (63) exp2Aux -> PLUS addOperator . exp2
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp2                           shift and go to state 301
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 268

    (64) exp2Aux -> MINUS addOperator . exp2
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    exp2                           shift and go to state 302
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 269

    (67) auxTerm -> TIMES addOperator . term
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    term                           shift and go to state 303
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 270

    (68) auxTerm -> DIV addOperator . term
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    term                           shift and go to state 304
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 271

    (69) auxTerm -> MOD addOperator . term
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    term                           shift and go to state 305
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 272

    (70) auxTerm -> EXP addOperator . term
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    term                           shift and go to state 306
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 273

    (75) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression . RIGHT_BRACKET addOperand removeParenthesis

    RIGHT_BRACKET   shift and go to state 307


state 274

    (47) auxReading -> CTE_ID addOperand doReading multipleRead .

    RIGHT_PAREN     reduce using rule 47 (auxReading -> CTE_ID addOperand doReading multipleRead .)


state 275

    (48) multipleRead -> COMMA . auxReading
    (47) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 153

    auxReading                     shift and go to state 308

state 276

    (49) multipleRead -> empty .

    RIGHT_PAREN     reduce using rule 49 (multipleRead -> empty .)


state 277

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . else endIF
    (83) else -> . ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> . ELSE doElse funcBody
    (85) else -> . empty
    (143) empty -> .

    ELSE            shift and go to state 310
    VAR             reduce using rule 143 (empty -> .)
    CTE_ID          reduce using rule 143 (empty -> .)
    PRINT           reduce using rule 143 (empty -> .)
    READ_INPUT      reduce using rule 143 (empty -> .)
    IF              reduce using rule 143 (empty -> .)
    WHILE           reduce using rule 143 (empty -> .)
    RETURN          reduce using rule 143 (empty -> .)
    BINOMIAL        reduce using rule 143 (empty -> .)
    POISSON         reduce using rule 143 (empty -> .)
    COMPARE         reduce using rule 143 (empty -> .)
    NORMAL          reduce using rule 143 (empty -> .)
    UNIFORM         reduce using rule 143 (empty -> .)
    LOGISTIC        reduce using rule 143 (empty -> .)
    EXPONENTIAL     reduce using rule 143 (empty -> .)
    CHISQUARE       reduce using rule 143 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 143 (empty -> .)

    else                           shift and go to state 309
    empty                          shift and go to state 311

state 278

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN . funcBody endWhile
    (23) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 312

state 279

    (102) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    BINOMIAL        reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    POISSON         reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    COMPARE         reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    NORMAL          reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    UNIFORM         reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    LOGISTIC        reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    EXPONENTIAL     reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    CHISQUARE       reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 102 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)


state 280

    (88) functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 313

state 281

    (89) functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 314

state 282

    (90) functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 315

state 283

    (91) functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 316

state 284

    (92) functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 317

state 285

    (93) functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 318

state 286

    (94) functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 319

state 287

    (95) functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSubS
    (142) doGoSubS -> .

    SEMI_COLON      reduce using rule 142 (doGoSubS -> .)
    TIMES           reduce using rule 142 (doGoSubS -> .)
    DIV             reduce using rule 142 (doGoSubS -> .)
    MOD             reduce using rule 142 (doGoSubS -> .)
    EXP             reduce using rule 142 (doGoSubS -> .)
    PLUS            reduce using rule 142 (doGoSubS -> .)
    MINUS           reduce using rule 142 (doGoSubS -> .)
    GREATER_THAN    reduce using rule 142 (doGoSubS -> .)
    GREATER_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    LESS_THAN       reduce using rule 142 (doGoSubS -> .)
    LESS_EQUAL_THAN reduce using rule 142 (doGoSubS -> .)
    NOT_EQUALS      reduce using rule 142 (doGoSubS -> .)
    EQUALS          reduce using rule 142 (doGoSubS -> .)
    AND             reduce using rule 142 (doGoSubS -> .)
    OR              reduce using rule 142 (doGoSubS -> .)
    COMMA           reduce using rule 142 (doGoSubS -> .)
    RIGHT_PAREN     reduce using rule 142 (doGoSubS -> .)
    RIGHT_BRACKET   reduce using rule 142 (doGoSubS -> .)

    doGoSubS                       shift and go to state 320

state 288

    (39) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .

    VAR             reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CTE_ID          reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    PRINT           reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    READ_INPUT      reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    IF              reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    WHILE           reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RETURN          reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    BINOMIAL        reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    POISSON         reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    COMPARE         reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    NORMAL          reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    UNIFORM         reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    LOGISTIC        reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    EXPONENTIAL     reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CHISQUARE       reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)


state 289

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis . EQUAL addOperator logicExpression doAssign SEMI_COLON

    EQUAL           shift and go to state 321


state 290

    (87) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .

    SEMI_COLON      reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    TIMES           reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    DIV             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    MOD             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    EXP             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    PLUS            reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    MINUS           reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    GREATER_THAN    reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    GREATER_EQUAL_THAN reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    LESS_THAN       reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    LESS_EQUAL_THAN reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    NOT_EQUALS      reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    EQUALS          reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    AND             reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    OR              reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    COMMA           reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    RIGHT_PAREN     reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    RIGHT_BRACKET   reduce using rule 87 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)


state 291

    (100) multipleArguments -> COMMA auxArguments .

    RIGHT_PAREN     reduce using rule 100 (multipleArguments -> COMMA auxArguments .)


state 292

    (72) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .

    TIMES           reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    DIV             reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MOD             reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EXP             reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    PLUS            reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MINUS           reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_THAN    reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_EQUAL_THAN reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_THAN       reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_EQUAL_THAN reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    NOT_EQUALS      reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EQUALS          reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    AND             reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    OR              reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    COMMA           reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    RIGHT_PAREN     reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    RIGHT_BRACKET   reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    SEMI_COLON      reduce using rule 72 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)


state 293

    (51) auxLogicExpression -> AND addOperator logicExpression .

    COMMA           reduce using rule 51 (auxLogicExpression -> AND addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 51 (auxLogicExpression -> AND addOperator logicExpression .)
    RIGHT_BRACKET   reduce using rule 51 (auxLogicExpression -> AND addOperator logicExpression .)
    SEMI_COLON      reduce using rule 51 (auxLogicExpression -> AND addOperator logicExpression .)


state 294

    (52) auxLogicExpression -> OR addOperator logicExpression .

    COMMA           reduce using rule 52 (auxLogicExpression -> OR addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 52 (auxLogicExpression -> OR addOperator logicExpression .)
    RIGHT_BRACKET   reduce using rule 52 (auxLogicExpression -> OR addOperator logicExpression .)
    SEMI_COLON      reduce using rule 52 (auxLogicExpression -> OR addOperator logicExpression .)


state 295

    (55) auxExp -> GREATER_THAN addOperator exp .

    AND             reduce using rule 55 (auxExp -> GREATER_THAN addOperator exp .)
    OR              reduce using rule 55 (auxExp -> GREATER_THAN addOperator exp .)
    COMMA           reduce using rule 55 (auxExp -> GREATER_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 55 (auxExp -> GREATER_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 55 (auxExp -> GREATER_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 55 (auxExp -> GREATER_THAN addOperator exp .)


state 296

    (56) auxExp -> GREATER_EQUAL_THAN addOperator exp .

    AND             reduce using rule 56 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 56 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 56 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 56 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 56 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 56 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)


state 297

    (57) auxExp -> LESS_THAN addOperator exp .

    AND             reduce using rule 57 (auxExp -> LESS_THAN addOperator exp .)
    OR              reduce using rule 57 (auxExp -> LESS_THAN addOperator exp .)
    COMMA           reduce using rule 57 (auxExp -> LESS_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 57 (auxExp -> LESS_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 57 (auxExp -> LESS_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 57 (auxExp -> LESS_THAN addOperator exp .)


state 298

    (58) auxExp -> LESS_EQUAL_THAN addOperator exp .

    AND             reduce using rule 58 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 58 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 58 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 58 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 58 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 58 (auxExp -> LESS_EQUAL_THAN addOperator exp .)


state 299

    (59) auxExp -> NOT_EQUALS addOperator exp .

    AND             reduce using rule 59 (auxExp -> NOT_EQUALS addOperator exp .)
    OR              reduce using rule 59 (auxExp -> NOT_EQUALS addOperator exp .)
    COMMA           reduce using rule 59 (auxExp -> NOT_EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 59 (auxExp -> NOT_EQUALS addOperator exp .)
    RIGHT_BRACKET   reduce using rule 59 (auxExp -> NOT_EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 59 (auxExp -> NOT_EQUALS addOperator exp .)


state 300

    (60) auxExp -> EQUALS addOperator exp .

    AND             reduce using rule 60 (auxExp -> EQUALS addOperator exp .)
    OR              reduce using rule 60 (auxExp -> EQUALS addOperator exp .)
    COMMA           reduce using rule 60 (auxExp -> EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 60 (auxExp -> EQUALS addOperator exp .)
    RIGHT_BRACKET   reduce using rule 60 (auxExp -> EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 60 (auxExp -> EQUALS addOperator exp .)


state 301

    (63) exp2Aux -> PLUS addOperator exp2 .

    GREATER_THAN    reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_THAN       reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    EQUALS          reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    AND             reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    OR              reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    COMMA           reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    RIGHT_BRACKET   reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 63 (exp2Aux -> PLUS addOperator exp2 .)


state 302

    (64) exp2Aux -> MINUS addOperator exp2 .

    GREATER_THAN    reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_THAN       reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    EQUALS          reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    AND             reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    OR              reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    COMMA           reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    RIGHT_BRACKET   reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 64 (exp2Aux -> MINUS addOperator exp2 .)


state 303

    (67) auxTerm -> TIMES addOperator term .

    PLUS            reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    MINUS           reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    GREATER_THAN    reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    LESS_THAN       reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    LESS_EQUAL_THAN reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    NOT_EQUALS      reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    EQUALS          reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    AND             reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    OR              reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    COMMA           reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    RIGHT_PAREN     reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    RIGHT_BRACKET   reduce using rule 67 (auxTerm -> TIMES addOperator term .)
    SEMI_COLON      reduce using rule 67 (auxTerm -> TIMES addOperator term .)


state 304

    (68) auxTerm -> DIV addOperator term .

    PLUS            reduce using rule 68 (auxTerm -> DIV addOperator term .)
    MINUS           reduce using rule 68 (auxTerm -> DIV addOperator term .)
    GREATER_THAN    reduce using rule 68 (auxTerm -> DIV addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 68 (auxTerm -> DIV addOperator term .)
    LESS_THAN       reduce using rule 68 (auxTerm -> DIV addOperator term .)
    LESS_EQUAL_THAN reduce using rule 68 (auxTerm -> DIV addOperator term .)
    NOT_EQUALS      reduce using rule 68 (auxTerm -> DIV addOperator term .)
    EQUALS          reduce using rule 68 (auxTerm -> DIV addOperator term .)
    AND             reduce using rule 68 (auxTerm -> DIV addOperator term .)
    OR              reduce using rule 68 (auxTerm -> DIV addOperator term .)
    COMMA           reduce using rule 68 (auxTerm -> DIV addOperator term .)
    RIGHT_PAREN     reduce using rule 68 (auxTerm -> DIV addOperator term .)
    RIGHT_BRACKET   reduce using rule 68 (auxTerm -> DIV addOperator term .)
    SEMI_COLON      reduce using rule 68 (auxTerm -> DIV addOperator term .)


state 305

    (69) auxTerm -> MOD addOperator term .

    PLUS            reduce using rule 69 (auxTerm -> MOD addOperator term .)
    MINUS           reduce using rule 69 (auxTerm -> MOD addOperator term .)
    GREATER_THAN    reduce using rule 69 (auxTerm -> MOD addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 69 (auxTerm -> MOD addOperator term .)
    LESS_THAN       reduce using rule 69 (auxTerm -> MOD addOperator term .)
    LESS_EQUAL_THAN reduce using rule 69 (auxTerm -> MOD addOperator term .)
    NOT_EQUALS      reduce using rule 69 (auxTerm -> MOD addOperator term .)
    EQUALS          reduce using rule 69 (auxTerm -> MOD addOperator term .)
    AND             reduce using rule 69 (auxTerm -> MOD addOperator term .)
    OR              reduce using rule 69 (auxTerm -> MOD addOperator term .)
    COMMA           reduce using rule 69 (auxTerm -> MOD addOperator term .)
    RIGHT_PAREN     reduce using rule 69 (auxTerm -> MOD addOperator term .)
    RIGHT_BRACKET   reduce using rule 69 (auxTerm -> MOD addOperator term .)
    SEMI_COLON      reduce using rule 69 (auxTerm -> MOD addOperator term .)


state 306

    (70) auxTerm -> EXP addOperator term .

    PLUS            reduce using rule 70 (auxTerm -> EXP addOperator term .)
    MINUS           reduce using rule 70 (auxTerm -> EXP addOperator term .)
    GREATER_THAN    reduce using rule 70 (auxTerm -> EXP addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 70 (auxTerm -> EXP addOperator term .)
    LESS_THAN       reduce using rule 70 (auxTerm -> EXP addOperator term .)
    LESS_EQUAL_THAN reduce using rule 70 (auxTerm -> EXP addOperator term .)
    NOT_EQUALS      reduce using rule 70 (auxTerm -> EXP addOperator term .)
    EQUALS          reduce using rule 70 (auxTerm -> EXP addOperator term .)
    AND             reduce using rule 70 (auxTerm -> EXP addOperator term .)
    OR              reduce using rule 70 (auxTerm -> EXP addOperator term .)
    COMMA           reduce using rule 70 (auxTerm -> EXP addOperator term .)
    RIGHT_PAREN     reduce using rule 70 (auxTerm -> EXP addOperator term .)
    RIGHT_BRACKET   reduce using rule 70 (auxTerm -> EXP addOperator term .)
    SEMI_COLON      reduce using rule 70 (auxTerm -> EXP addOperator term .)


state 307

    (75) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET . addOperand removeParenthesis
    (116) addOperand -> .

    TIMES           reduce using rule 116 (addOperand -> .)
    DIV             reduce using rule 116 (addOperand -> .)
    MOD             reduce using rule 116 (addOperand -> .)
    EXP             reduce using rule 116 (addOperand -> .)
    PLUS            reduce using rule 116 (addOperand -> .)
    MINUS           reduce using rule 116 (addOperand -> .)
    GREATER_THAN    reduce using rule 116 (addOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 116 (addOperand -> .)
    LESS_THAN       reduce using rule 116 (addOperand -> .)
    LESS_EQUAL_THAN reduce using rule 116 (addOperand -> .)
    NOT_EQUALS      reduce using rule 116 (addOperand -> .)
    EQUALS          reduce using rule 116 (addOperand -> .)
    AND             reduce using rule 116 (addOperand -> .)
    OR              reduce using rule 116 (addOperand -> .)
    COMMA           reduce using rule 116 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 116 (addOperand -> .)
    RIGHT_BRACKET   reduce using rule 116 (addOperand -> .)
    SEMI_COLON      reduce using rule 116 (addOperand -> .)

    addOperand                     shift and go to state 322

state 308

    (48) multipleRead -> COMMA auxReading .

    RIGHT_PAREN     reduce using rule 48 (multipleRead -> COMMA auxReading .)


state 309

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else . endIF
    (131) endIF -> .

    VAR             reduce using rule 131 (endIF -> .)
    CTE_ID          reduce using rule 131 (endIF -> .)
    PRINT           reduce using rule 131 (endIF -> .)
    READ_INPUT      reduce using rule 131 (endIF -> .)
    IF              reduce using rule 131 (endIF -> .)
    WHILE           reduce using rule 131 (endIF -> .)
    RETURN          reduce using rule 131 (endIF -> .)
    BINOMIAL        reduce using rule 131 (endIF -> .)
    POISSON         reduce using rule 131 (endIF -> .)
    COMPARE         reduce using rule 131 (endIF -> .)
    NORMAL          reduce using rule 131 (endIF -> .)
    UNIFORM         reduce using rule 131 (endIF -> .)
    LOGISTIC        reduce using rule 131 (endIF -> .)
    EXPONENTIAL     reduce using rule 131 (endIF -> .)
    CHISQUARE       reduce using rule 131 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 131 (endIF -> .)

    endIF                          shift and go to state 323

state 310

    (83) else -> ELSE . doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> ELSE . doElse funcBody
    (132) doElse -> .

    IF              reduce using rule 132 (doElse -> .)
    LEFT_CURLY_BRACKET reduce using rule 132 (doElse -> .)

    doElse                         shift and go to state 324

state 311

    (85) else -> empty .

    VAR             reduce using rule 85 (else -> empty .)
    CTE_ID          reduce using rule 85 (else -> empty .)
    PRINT           reduce using rule 85 (else -> empty .)
    READ_INPUT      reduce using rule 85 (else -> empty .)
    IF              reduce using rule 85 (else -> empty .)
    WHILE           reduce using rule 85 (else -> empty .)
    RETURN          reduce using rule 85 (else -> empty .)
    BINOMIAL        reduce using rule 85 (else -> empty .)
    POISSON         reduce using rule 85 (else -> empty .)
    COMPARE         reduce using rule 85 (else -> empty .)
    NORMAL          reduce using rule 85 (else -> empty .)
    UNIFORM         reduce using rule 85 (else -> empty .)
    LOGISTIC        reduce using rule 85 (else -> empty .)
    EXPONENTIAL     reduce using rule 85 (else -> empty .)
    CHISQUARE       reduce using rule 85 (else -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 85 (else -> empty .)


state 312

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody . endWhile
    (134) endWhile -> .

    VAR             reduce using rule 134 (endWhile -> .)
    CTE_ID          reduce using rule 134 (endWhile -> .)
    PRINT           reduce using rule 134 (endWhile -> .)
    READ_INPUT      reduce using rule 134 (endWhile -> .)
    IF              reduce using rule 134 (endWhile -> .)
    WHILE           reduce using rule 134 (endWhile -> .)
    RETURN          reduce using rule 134 (endWhile -> .)
    BINOMIAL        reduce using rule 134 (endWhile -> .)
    POISSON         reduce using rule 134 (endWhile -> .)
    COMPARE         reduce using rule 134 (endWhile -> .)
    NORMAL          reduce using rule 134 (endWhile -> .)
    UNIFORM         reduce using rule 134 (endWhile -> .)
    LOGISTIC        reduce using rule 134 (endWhile -> .)
    EXPONENTIAL     reduce using rule 134 (endWhile -> .)
    CHISQUARE       reduce using rule 134 (endWhile -> .)
    RIGHT_CURLY_BRACKET reduce using rule 134 (endWhile -> .)

    endWhile                       shift and go to state 325

state 313

    (88) functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 88 (functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 314

    (89) functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 89 (functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 315

    (90) functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 90 (functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 316

    (91) functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 91 (functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 317

    (92) functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 92 (functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 318

    (93) functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 93 (functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 319

    (94) functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 94 (functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 320

    (95) functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .

    SEMI_COLON      reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    TIMES           reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    DIV             reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MOD             reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EXP             reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    PLUS            reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    MINUS           reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_THAN    reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    GREATER_EQUAL_THAN reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_THAN       reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    LESS_EQUAL_THAN reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    NOT_EQUALS      reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    EQUALS          reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    AND             reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    OR              reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    COMMA           reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_PAREN     reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)
    RIGHT_BRACKET   reduce using rule 95 (functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS .)


state 321

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL . addOperator logicExpression doAssign SEMI_COLON
    (119) addOperator -> .

    LEFT_PAREN      reduce using rule 119 (addOperator -> .)
    CTE_ID          reduce using rule 119 (addOperator -> .)
    CTE_INT         reduce using rule 119 (addOperator -> .)
    CTE_FLOAT       reduce using rule 119 (addOperator -> .)
    CTE_STRING      reduce using rule 119 (addOperator -> .)
    TRUE            reduce using rule 119 (addOperator -> .)
    FALSE           reduce using rule 119 (addOperator -> .)
    BINOMIAL        reduce using rule 119 (addOperator -> .)
    POISSON         reduce using rule 119 (addOperator -> .)
    COMPARE         reduce using rule 119 (addOperator -> .)
    NORMAL          reduce using rule 119 (addOperator -> .)
    UNIFORM         reduce using rule 119 (addOperator -> .)
    LOGISTIC        reduce using rule 119 (addOperator -> .)
    EXPONENTIAL     reduce using rule 119 (addOperator -> .)
    CHISQUARE       reduce using rule 119 (addOperator -> .)

    addOperator                    shift and go to state 326

state 322

    (75) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand . removeParenthesis
    (121) removeParenthesis -> .

    TIMES           reduce using rule 121 (removeParenthesis -> .)
    DIV             reduce using rule 121 (removeParenthesis -> .)
    MOD             reduce using rule 121 (removeParenthesis -> .)
    EXP             reduce using rule 121 (removeParenthesis -> .)
    PLUS            reduce using rule 121 (removeParenthesis -> .)
    MINUS           reduce using rule 121 (removeParenthesis -> .)
    GREATER_THAN    reduce using rule 121 (removeParenthesis -> .)
    GREATER_EQUAL_THAN reduce using rule 121 (removeParenthesis -> .)
    LESS_THAN       reduce using rule 121 (removeParenthesis -> .)
    LESS_EQUAL_THAN reduce using rule 121 (removeParenthesis -> .)
    NOT_EQUALS      reduce using rule 121 (removeParenthesis -> .)
    EQUALS          reduce using rule 121 (removeParenthesis -> .)
    AND             reduce using rule 121 (removeParenthesis -> .)
    OR              reduce using rule 121 (removeParenthesis -> .)
    COMMA           reduce using rule 121 (removeParenthesis -> .)
    RIGHT_PAREN     reduce using rule 121 (removeParenthesis -> .)
    RIGHT_BRACKET   reduce using rule 121 (removeParenthesis -> .)
    SEMI_COLON      reduce using rule 121 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 327

state 323

    (82) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .

    VAR             reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CTE_ID          reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    PRINT           reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    READ_INPUT      reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    IF              reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    WHILE           reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RETURN          reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    BINOMIAL        reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    POISSON         reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    COMPARE         reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    NORMAL          reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    UNIFORM         reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    LOGISTIC        reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    EXPONENTIAL     reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CHISQUARE       reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 82 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)


state 324

    (83) else -> ELSE doElse . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> ELSE doElse . funcBody
    (23) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    IF              shift and go to state 328
    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 329

state 325

    (86) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .

    VAR             reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    CTE_ID          reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    PRINT           reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    READ_INPUT      reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    IF              reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    WHILE           reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RETURN          reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    BINOMIAL        reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    POISSON         reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    COMPARE         reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    NORMAL          reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    UNIFORM         reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    LOGISTIC        reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    EXPONENTIAL     reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    CHISQUARE       reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RIGHT_CURLY_BRACKET reduce using rule 86 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)


state 326

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator . logicExpression doAssign SEMI_COLON
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 330
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 327

    (75) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .

    TIMES           reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    DIV             reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    MOD             reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    EXP             reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    PLUS            reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    MINUS           reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    GREATER_THAN    reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    GREATER_EQUAL_THAN reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    LESS_THAN       reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    LESS_EQUAL_THAN reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    NOT_EQUALS      reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    EQUALS          reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    AND             reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    OR              reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    COMMA           reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    RIGHT_PAREN     reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    RIGHT_BRACKET   reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    SEMI_COLON      reduce using rule 75 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)


state 328

    (83) else -> ELSE doElse IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF

    LEFT_PAREN      shift and go to state 331


state 329

    (84) else -> ELSE doElse funcBody .

    VAR             reduce using rule 84 (else -> ELSE doElse funcBody .)
    CTE_ID          reduce using rule 84 (else -> ELSE doElse funcBody .)
    PRINT           reduce using rule 84 (else -> ELSE doElse funcBody .)
    READ_INPUT      reduce using rule 84 (else -> ELSE doElse funcBody .)
    IF              reduce using rule 84 (else -> ELSE doElse funcBody .)
    WHILE           reduce using rule 84 (else -> ELSE doElse funcBody .)
    RETURN          reduce using rule 84 (else -> ELSE doElse funcBody .)
    BINOMIAL        reduce using rule 84 (else -> ELSE doElse funcBody .)
    POISSON         reduce using rule 84 (else -> ELSE doElse funcBody .)
    COMPARE         reduce using rule 84 (else -> ELSE doElse funcBody .)
    NORMAL          reduce using rule 84 (else -> ELSE doElse funcBody .)
    UNIFORM         reduce using rule 84 (else -> ELSE doElse funcBody .)
    LOGISTIC        reduce using rule 84 (else -> ELSE doElse funcBody .)
    EXPONENTIAL     reduce using rule 84 (else -> ELSE doElse funcBody .)
    CHISQUARE       reduce using rule 84 (else -> ELSE doElse funcBody .)
    RIGHT_CURLY_BRACKET reduce using rule 84 (else -> ELSE doElse funcBody .)


state 330

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression . doAssign SEMI_COLON
    (126) doAssign -> .

    SEMI_COLON      reduce using rule 126 (doAssign -> .)

    doAssign                       shift and go to state 332

state 331

    (83) else -> ELSE doElse IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody else endIF
    (50) logicExpression -> . exp doLogicExpression auxLogicExpression
    (54) exp -> . exp2 doCompExpression auxExp
    (62) exp2 -> . term doExpression exp2Aux
    (66) term -> . factor doTerm auxTerm
    (72) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (73) factor -> . constants
    (74) constants -> . CTE_ID addOperand
    (75) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (76) constants -> . CTE_INT addConstantOperand
    (77) constants -> . CTE_FLOAT addConstantOperand
    (78) constants -> . CTE_STRING addConstantOperand
    (79) constants -> . TRUE addConstantBool
    (80) constants -> . FALSE addConstantBool
    (81) constants -> . functionCall
    (87) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (88) functionCall -> . BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (89) functionCall -> . POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (90) functionCall -> . COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (91) functionCall -> . NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (92) functionCall -> . UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (93) functionCall -> . LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (94) functionCall -> . EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS
    (95) functionCall -> . CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS

    LEFT_PAREN      shift and go to state 137
    CTE_ID          shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 155
    TRUE            shift and go to state 149
    FALSE           shift and go to state 150
    BINOMIAL        shift and go to state 90
    POISSON         shift and go to state 91
    COMPARE         shift and go to state 92
    NORMAL          shift and go to state 93
    UNIFORM         shift and go to state 94
    LOGISTIC        shift and go to state 95
    EXPONENTIAL     shift and go to state 96
    CHISQUARE       shift and go to state 97

    logicExpression                shift and go to state 333
    exp                            shift and go to state 141
    exp2                           shift and go to state 142
    term                           shift and go to state 143
    factor                         shift and go to state 144
    constants                      shift and go to state 145
    functionCall                   shift and go to state 151

state 332

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign . SEMI_COLON

    SEMI_COLON      shift and go to state 334


state 333

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody else endIF
    (130) doIF -> .

    RIGHT_PAREN     reduce using rule 130 (doIF -> .)

    doIF                           shift and go to state 335

state 334

    (40) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .

    VAR             reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CTE_ID          reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    PRINT           reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    READ_INPUT      reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    IF              reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    WHILE           reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RETURN          reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    BINOMIAL        reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    POISSON         reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    COMPARE         reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    NORMAL          reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    UNIFORM         reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    LOGISTIC        reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    EXPONENTIAL     reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CHISQUARE       reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)


state 335

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody else endIF

    RIGHT_PAREN     shift and go to state 336


state 336

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody else endIF
    (23) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 337

state 337

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . else endIF
    (83) else -> . ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (84) else -> . ELSE doElse funcBody
    (85) else -> . empty
    (143) empty -> .

    ELSE            shift and go to state 310
    VAR             reduce using rule 143 (empty -> .)
    CTE_ID          reduce using rule 143 (empty -> .)
    PRINT           reduce using rule 143 (empty -> .)
    READ_INPUT      reduce using rule 143 (empty -> .)
    IF              reduce using rule 143 (empty -> .)
    WHILE           reduce using rule 143 (empty -> .)
    RETURN          reduce using rule 143 (empty -> .)
    BINOMIAL        reduce using rule 143 (empty -> .)
    POISSON         reduce using rule 143 (empty -> .)
    COMPARE         reduce using rule 143 (empty -> .)
    NORMAL          reduce using rule 143 (empty -> .)
    UNIFORM         reduce using rule 143 (empty -> .)
    LOGISTIC        reduce using rule 143 (empty -> .)
    EXPONENTIAL     reduce using rule 143 (empty -> .)
    CHISQUARE       reduce using rule 143 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 143 (empty -> .)

    else                           shift and go to state 338
    empty                          shift and go to state 311

state 338

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else . endIF
    (131) endIF -> .

    VAR             reduce using rule 131 (endIF -> .)
    CTE_ID          reduce using rule 131 (endIF -> .)
    PRINT           reduce using rule 131 (endIF -> .)
    READ_INPUT      reduce using rule 131 (endIF -> .)
    IF              reduce using rule 131 (endIF -> .)
    WHILE           reduce using rule 131 (endIF -> .)
    RETURN          reduce using rule 131 (endIF -> .)
    BINOMIAL        reduce using rule 131 (endIF -> .)
    POISSON         reduce using rule 131 (endIF -> .)
    COMPARE         reduce using rule 131 (endIF -> .)
    NORMAL          reduce using rule 131 (endIF -> .)
    UNIFORM         reduce using rule 131 (endIF -> .)
    LOGISTIC        reduce using rule 131 (endIF -> .)
    EXPONENTIAL     reduce using rule 131 (endIF -> .)
    CHISQUARE       reduce using rule 131 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 131 (endIF -> .)

    endIF                          shift and go to state 339

state 339

    (83) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .

    VAR             reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CTE_ID          reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    PRINT           reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    READ_INPUT      reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    IF              reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    WHILE           reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RETURN          reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    BINOMIAL        reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    POISSON         reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    COMPARE         reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    NORMAL          reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    UNIFORM         reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    LOGISTIC        reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    EXPONENTIAL     reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CHISQUARE       reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 83 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTE_ID in state 65 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 65 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 65 resolved as shift
WARNING: shift/reduce conflict for BINOMIAL in state 65 resolved as shift
WARNING: shift/reduce conflict for POISSON in state 65 resolved as shift
WARNING: shift/reduce conflict for COMPARE in state 65 resolved as shift
WARNING: shift/reduce conflict for NORMAL in state 65 resolved as shift
WARNING: shift/reduce conflict for UNIFORM in state 65 resolved as shift
WARNING: shift/reduce conflict for LOGISTIC in state 65 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 65 resolved as shift
WARNING: shift/reduce conflict for CHISQUARE in state 65 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 74 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 74 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 74 resolved as shift
WARNING: shift/reduce conflict for BINOMIAL in state 74 resolved as shift
WARNING: shift/reduce conflict for POISSON in state 74 resolved as shift
WARNING: shift/reduce conflict for COMPARE in state 74 resolved as shift
WARNING: shift/reduce conflict for NORMAL in state 74 resolved as shift
WARNING: shift/reduce conflict for UNIFORM in state 74 resolved as shift
WARNING: shift/reduce conflict for LOGISTIC in state 74 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 74 resolved as shift
WARNING: shift/reduce conflict for CHISQUARE in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 109 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 109 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 109 resolved as shift
WARNING: shift/reduce conflict for IF in state 109 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 109 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 109 resolved as shift
WARNING: shift/reduce conflict for BINOMIAL in state 109 resolved as shift
WARNING: shift/reduce conflict for POISSON in state 109 resolved as shift
WARNING: shift/reduce conflict for COMPARE in state 109 resolved as shift
WARNING: shift/reduce conflict for NORMAL in state 109 resolved as shift
WARNING: shift/reduce conflict for UNIFORM in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGISTIC in state 109 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 109 resolved as shift
WARNING: shift/reduce conflict for CHISQUARE in state 109 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (globalVariables -> empty)
WARNING: rejected rule (auxVars -> empty) in state 8
WARNING: reduce/reduce conflict in state 75 resolved using rule (auxVars -> empty)
WARNING: rejected rule (auxFuncBody -> empty) in state 75
WARNING: reduce/reduce conflict in state 140 resolved using rule (addConstantOperand -> <empty>)
WARNING: rejected rule (doWriteString -> <empty>) in state 140
WARNING: Rule (auxFuncBody -> empty) is never reduced
WARNING: Rule (doWriteString -> <empty>) is never reduced
