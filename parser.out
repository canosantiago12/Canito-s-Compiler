Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BINOMIAL
    CTE_BOOL
    ELSE
    FOR
    IF
    MEAN
    MEDIAN
    MODE
    PLOT
    POISSON
    PRINT
    READ_INPUT
    RETURN
    STANDARD_DEVIATION
    VARIANCE
    VOID
    WHILE

Grammar

Rule 0     S' -> program_main
Rule 1     program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint
Rule 2     globalVariables -> vars
Rule 3     globalVariables -> empty
Rule 4     globalFunctions -> funcs
Rule 5     globalFunctions -> empty
Rule 6     vars -> auxVars
Rule 7     auxVars -> VAR type vars_type_single
Rule 8     auxVars -> VAR type vars_type_array
Rule 9     auxVars -> VAR type vars_type_matrix
Rule 10    auxVars -> empty
Rule 11    vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single
Rule 12    vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars
Rule 13    vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
Rule 14    vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
Rule 15    vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
Rule 16    vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
Rule 17    funcs -> funcs_aux globalFunctions
Rule 18    funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction
Rule 19    funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET
Rule 20    auxFuncBody -> vars statements auxFuncBody
Rule 21    auxFuncBody -> statements auxFuncBody
Rule 22    auxFuncBody -> empty
Rule 23    type -> INT setCurrentType
Rule 24    type -> FLOAT setCurrentType
Rule 25    type -> BOOL setCurrentType
Rule 26    type -> STRING setCurrentType
Rule 27    statements -> assignment
Rule 28    assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
Rule 29    logicExpression -> exp auxLogicExpression
Rule 30    auxLogicExpression -> AND logicExpression
Rule 31    auxLogicExpression -> OR logicExpression
Rule 32    auxLogicExpression -> empty
Rule 33    exp -> exp2 auxExp
Rule 34    auxExp -> GREATER_THAN exp
Rule 35    auxExp -> GREATER_EQUAL_THAN exp
Rule 36    auxExp -> LESS_THAN exp
Rule 37    auxExp -> LESS_EQUAL_THAN exp
Rule 38    auxExp -> NOT_EQUALS exp
Rule 39    auxExp -> EQUALS exp
Rule 40    auxExp -> empty
Rule 41    exp2 -> term doExpression exp2Aux
Rule 42    exp2Aux -> PLUS addOperator exp2
Rule 43    exp2Aux -> MINUS addOperator exp2
Rule 44    exp2Aux -> empty
Rule 45    term -> factor auxTerm
Rule 46    auxTerm -> TIMES term
Rule 47    auxTerm -> DIV term
Rule 48    auxTerm -> MOD term
Rule 49    auxTerm -> EXP term
Rule 50    auxTerm -> empty
Rule 51    factor -> constants
Rule 52    constants -> CTE_ID addOperand
Rule 53    constants -> CTE_INT
Rule 54    constants -> CTE_FLOAT
Rule 55    constants -> TRUE
Rule 56    constants -> FALSE
Rule 57    startup -> <empty>
Rule 58    endPrint -> <empty>
Rule 59    saveFuncID -> <empty>
Rule 60    endFunction -> <empty>
Rule 61    saveVariableID -> <empty>
Rule 62    setCurrentType -> <empty>
Rule 63    addOperand -> <empty>
Rule 64    addOperator -> <empty>
Rule 65    doExpression -> <empty>
Rule 66    doAssign -> <empty>
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND                  : 30
BINOMIAL             : 
BOOL                 : 25
COMMA                : 11 13 15
CTE_BOOL             : 
CTE_FLOAT            : 54
CTE_ID               : 1 11 12 13 14 15 16 18 28 52
CTE_INT              : 13 14 15 15 16 16 53
DIV                  : 47
ELSE                 : 
EQUAL                : 28
EQUALS               : 39
EXP                  : 49
FALSE                : 56
FLOAT                : 24
FOR                  : 
FUNC                 : 18
GREATER_EQUAL_THAN   : 35
GREATER_THAN         : 34
IF                   : 
INT                  : 23
LEFT_BRACKET         : 13 14 15 15 16 16
LEFT_CURLY_BRACKET   : 19
LEFT_PAREN           : 1 18
LESS_EQUAL_THAN      : 37
LESS_THAN            : 36
MAIN                 : 1
MEAN                 : 
MEDIAN               : 
MINUS                : 43
MOD                  : 48
MODE                 : 
NOT_EQUALS           : 38
OR                   : 31
PLOT                 : 
PLUS                 : 42
POISSON              : 
PRINT                : 
PROGRAM              : 1
READ_INPUT           : 
RETURN               : 
RIGHT_BRACKET        : 13 14 15 15 16 16
RIGHT_CURLY_BRACKET  : 19
RIGHT_PAREN          : 1 18
SEMI_COLON           : 1 12 14 16 28
STANDARD_DEVIATION   : 
STRING               : 26
TIMES                : 46
TRUE                 : 55
VAR                  : 7 8 9
VARIANCE             : 
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

addOperand           : 28 52
addOperator          : 28 42 43
assignment           : 27
auxExp               : 33
auxFuncBody          : 19 20 21
auxLogicExpression   : 29
auxTerm              : 45
auxVars              : 6 12 14 16
constants            : 51
doAssign             : 28
doExpression         : 41
empty                : 3 5 10 22 32 40 44 50
endFunction          : 18
endPrint             : 1
exp                  : 29 34 35 36 37 38 39
exp2                 : 33 42 43
exp2Aux              : 41
factor               : 45
funcBody             : 1 18
funcs                : 4
funcs_aux            : 17
globalFunctions      : 1 17
globalVariables      : 1
logicExpression      : 28 30 31
program_main         : 0
saveFuncID           : 1 18
saveVariableID       : 11 12 13 14 15 16
setCurrentType       : 23 24 25 26
startup              : 1
statements           : 20 21
term                 : 41 46 47 48 49
type                 : 7 8 9 18
vars                 : 2 20
vars_type_array      : 8 13
vars_type_matrix     : 9 15
vars_type_single     : 7 11

Parsing method: LALR

state 0

    (0) S' -> . program_main
    (1) program_main -> . PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint

    PROGRAM         shift and go to state 2

    program_main                   shift and go to state 1

state 1

    (0) S' -> program_main .



state 2

    (1) program_main -> PROGRAM . CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint

    CTE_ID          shift and go to state 3


state 3

    (1) program_main -> PROGRAM CTE_ID . startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint
    (57) startup -> .

    SEMI_COLON      reduce using rule 57 (startup -> .)

    startup                        shift and go to state 4

state 4

    (1) program_main -> PROGRAM CTE_ID startup . SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint

    SEMI_COLON      shift and go to state 5


state 5

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON . globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint
    (2) globalVariables -> . vars
    (3) globalVariables -> . empty
    (6) vars -> . auxVars
    (67) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty

    FUNC            reduce using rule 67 (empty -> .)
    MAIN            reduce using rule 67 (empty -> .)
    VAR             shift and go to state 10

    globalVariables                shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8
    auxVars                        shift and go to state 9

state 6

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables . globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (17) funcs -> . funcs_aux globalFunctions
    (67) empty -> .
    (18) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction

    MAIN            reduce using rule 67 (empty -> .)
    FUNC            shift and go to state 15

    globalFunctions                shift and go to state 11
    funcs                          shift and go to state 12
    empty                          shift and go to state 13
    funcs_aux                      shift and go to state 14

state 7

    (2) globalVariables -> vars .

    FUNC            reduce using rule 2 (globalVariables -> vars .)
    MAIN            reduce using rule 2 (globalVariables -> vars .)


state 8

    (3) globalVariables -> empty .
    (10) auxVars -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 3 (globalVariables -> empty .)
  ! reduce/reduce conflict for MAIN resolved using rule 3 (globalVariables -> empty .)
    FUNC            reduce using rule 3 (globalVariables -> empty .)
    MAIN            reduce using rule 3 (globalVariables -> empty .)

  ! FUNC            [ reduce using rule 10 (auxVars -> empty .) ]
  ! MAIN            [ reduce using rule 10 (auxVars -> empty .) ]


state 9

    (6) vars -> auxVars .

    FUNC            reduce using rule 6 (vars -> auxVars .)
    MAIN            reduce using rule 6 (vars -> auxVars .)
    CTE_ID          reduce using rule 6 (vars -> auxVars .)


state 10

    (7) auxVars -> VAR . type vars_type_single
    (8) auxVars -> VAR . type vars_type_array
    (9) auxVars -> VAR . type vars_type_matrix
    (23) type -> . INT setCurrentType
    (24) type -> . FLOAT setCurrentType
    (25) type -> . BOOL setCurrentType
    (26) type -> . STRING setCurrentType

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    type                           shift and go to state 16

state 11

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions . MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint

    MAIN            shift and go to state 21


state 12

    (4) globalFunctions -> funcs .

    MAIN            reduce using rule 4 (globalFunctions -> funcs .)


state 13

    (5) globalFunctions -> empty .

    MAIN            reduce using rule 5 (globalFunctions -> empty .)


state 14

    (17) funcs -> funcs_aux . globalFunctions
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (17) funcs -> . funcs_aux globalFunctions
    (67) empty -> .
    (18) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction

    MAIN            reduce using rule 67 (empty -> .)
    FUNC            shift and go to state 15

    funcs_aux                      shift and go to state 14
    globalFunctions                shift and go to state 22
    funcs                          shift and go to state 12
    empty                          shift and go to state 13

state 15

    (18) funcs_aux -> FUNC . type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction
    (23) type -> . INT setCurrentType
    (24) type -> . FLOAT setCurrentType
    (25) type -> . BOOL setCurrentType
    (26) type -> . STRING setCurrentType

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20

    type                           shift and go to state 23

state 16

    (7) auxVars -> VAR type . vars_type_single
    (8) auxVars -> VAR type . vars_type_array
    (9) auxVars -> VAR type . vars_type_matrix
    (11) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (12) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars
    (13) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_ID          shift and go to state 27

    vars_type_single               shift and go to state 24
    vars_type_array                shift and go to state 25
    vars_type_matrix               shift and go to state 26

state 17

    (23) type -> INT . setCurrentType
    (62) setCurrentType -> .

    CTE_ID          reduce using rule 62 (setCurrentType -> .)

    setCurrentType                 shift and go to state 28

state 18

    (24) type -> FLOAT . setCurrentType
    (62) setCurrentType -> .

    CTE_ID          reduce using rule 62 (setCurrentType -> .)

    setCurrentType                 shift and go to state 29

state 19

    (25) type -> BOOL . setCurrentType
    (62) setCurrentType -> .

    CTE_ID          reduce using rule 62 (setCurrentType -> .)

    setCurrentType                 shift and go to state 30

state 20

    (26) type -> STRING . setCurrentType
    (62) setCurrentType -> .

    CTE_ID          reduce using rule 62 (setCurrentType -> .)

    setCurrentType                 shift and go to state 31

state 21

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN . saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint
    (59) saveFuncID -> .

    LEFT_PAREN      reduce using rule 59 (saveFuncID -> .)

    saveFuncID                     shift and go to state 32

state 22

    (17) funcs -> funcs_aux globalFunctions .

    MAIN            reduce using rule 17 (funcs -> funcs_aux globalFunctions .)


state 23

    (18) funcs_aux -> FUNC type . CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction

    CTE_ID          shift and go to state 33


state 24

    (7) auxVars -> VAR type vars_type_single .

    FUNC            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    MAIN            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    CTE_ID          reduce using rule 7 (auxVars -> VAR type vars_type_single .)


state 25

    (8) auxVars -> VAR type vars_type_array .

    FUNC            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    MAIN            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    CTE_ID          reduce using rule 8 (auxVars -> VAR type vars_type_array .)


state 26

    (9) auxVars -> VAR type vars_type_matrix .

    FUNC            reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    MAIN            reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)
    CTE_ID          reduce using rule 9 (auxVars -> VAR type vars_type_matrix .)


state 27

    (11) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (12) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (13) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (61) saveVariableID -> .

    COMMA           reduce using rule 61 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 61 (saveVariableID -> .)
    LEFT_BRACKET    reduce using rule 61 (saveVariableID -> .)

    saveVariableID                 shift and go to state 34

state 28

    (23) type -> INT setCurrentType .

    CTE_ID          reduce using rule 23 (type -> INT setCurrentType .)


state 29

    (24) type -> FLOAT setCurrentType .

    CTE_ID          reduce using rule 24 (type -> FLOAT setCurrentType .)


state 30

    (25) type -> BOOL setCurrentType .

    CTE_ID          reduce using rule 25 (type -> BOOL setCurrentType .)


state 31

    (26) type -> STRING setCurrentType .

    CTE_ID          reduce using rule 26 (type -> STRING setCurrentType .)


state 32

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID . LEFT_PAREN RIGHT_PAREN funcBody endPrint

    LEFT_PAREN      shift and go to state 35


state 33

    (18) funcs_aux -> FUNC type CTE_ID . saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction
    (59) saveFuncID -> .

    LEFT_PAREN      reduce using rule 59 (saveFuncID -> .)

    saveFuncID                     shift and go to state 36

state 34

    (11) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (12) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars
    (13) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    COMMA           shift and go to state 37
    SEMI_COLON      shift and go to state 38
    LEFT_BRACKET    shift and go to state 39


state 35

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN . RIGHT_PAREN funcBody endPrint

    RIGHT_PAREN     shift and go to state 40


state 36

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID . LEFT_PAREN RIGHT_PAREN funcBody endFunction

    LEFT_PAREN      shift and go to state 41


state 37

    (11) vars_type_single -> CTE_ID saveVariableID COMMA . vars_type_single
    (11) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (12) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars

    CTE_ID          shift and go to state 42

    vars_type_single               shift and go to state 43

state 38

    (12) vars_type_single -> CTE_ID saveVariableID SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (67) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 67 (empty -> .)
    MAIN            reduce using rule 67 (empty -> .)
    CTE_ID          reduce using rule 67 (empty -> .)

    auxVars                        shift and go to state 44
    empty                          shift and go to state 45

state 39

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 46


state 40

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN . funcBody endPrint
    (19) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 48

    funcBody                       shift and go to state 47

state 41

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN . RIGHT_PAREN funcBody endFunction

    RIGHT_PAREN     shift and go to state 49


state 42

    (11) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (12) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (61) saveVariableID -> .

    COMMA           reduce using rule 61 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 61 (saveVariableID -> .)

    saveVariableID                 shift and go to state 50

state 43

    (11) vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .

    FUNC            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    MAIN            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    CTE_ID          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)


state 44

    (12) vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .

    FUNC            reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    MAIN            reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 12 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)


state 45

    (10) auxVars -> empty .

    FUNC            reduce using rule 10 (auxVars -> empty .)
    MAIN            reduce using rule 10 (auxVars -> empty .)
    CTE_ID          reduce using rule 10 (auxVars -> empty .)


state 46

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 51


state 47

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody . endPrint
    (58) endPrint -> .

    $end            reduce using rule 58 (endPrint -> .)

    endPrint                       shift and go to state 52

state 48

    (19) funcBody -> LEFT_CURLY_BRACKET . auxFuncBody RIGHT_CURLY_BRACKET
    (20) auxFuncBody -> . vars statements auxFuncBody
    (21) auxFuncBody -> . statements auxFuncBody
    (22) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (27) statements -> . assignment
    (67) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (28) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON

  ! shift/reduce conflict for CTE_ID resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 67 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 58

  ! CTE_ID          [ reduce using rule 67 (empty -> .) ]

    auxFuncBody                    shift and go to state 53
    vars                           shift and go to state 54
    statements                     shift and go to state 55
    empty                          shift and go to state 56
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 57

state 49

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN . funcBody endFunction
    (19) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 48

    funcBody                       shift and go to state 59

state 50

    (11) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (12) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars

    COMMA           shift and go to state 37
    SEMI_COLON      shift and go to state 38


state 51

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . SEMI_COLON auxVars
    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    COMMA           shift and go to state 61
    SEMI_COLON      shift and go to state 62
    LEFT_BRACKET    shift and go to state 60


state 52

    (1) program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint .

    $end            reduce using rule 1 (program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint .)


state 53

    (19) funcBody -> LEFT_CURLY_BRACKET auxFuncBody . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 63


state 54

    (20) auxFuncBody -> vars . statements auxFuncBody
    (27) statements -> . assignment
    (28) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON

    CTE_ID          shift and go to state 58

    statements                     shift and go to state 64
    assignment                     shift and go to state 57

state 55

    (21) auxFuncBody -> statements . auxFuncBody
    (20) auxFuncBody -> . vars statements auxFuncBody
    (21) auxFuncBody -> . statements auxFuncBody
    (22) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (27) statements -> . assignment
    (67) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (28) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON

  ! shift/reduce conflict for CTE_ID resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 67 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 58

  ! CTE_ID          [ reduce using rule 67 (empty -> .) ]

    statements                     shift and go to state 55
    auxFuncBody                    shift and go to state 65
    vars                           shift and go to state 54
    empty                          shift and go to state 56
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 57

state 56

    (22) auxFuncBody -> empty .
    (10) auxVars -> empty .

    RIGHT_CURLY_BRACKET reduce using rule 22 (auxFuncBody -> empty .)
    CTE_ID          reduce using rule 10 (auxVars -> empty .)


state 57

    (27) statements -> assignment .

    VAR             reduce using rule 27 (statements -> assignment .)
    CTE_ID          reduce using rule 27 (statements -> assignment .)
    RIGHT_CURLY_BRACKET reduce using rule 27 (statements -> assignment .)


state 58

    (28) assignment -> CTE_ID . addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (63) addOperand -> .

    EQUAL           reduce using rule 63 (addOperand -> .)

    addOperand                     shift and go to state 66

state 59

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody . endFunction
    (60) endFunction -> .

    FUNC            reduce using rule 60 (endFunction -> .)
    MAIN            reduce using rule 60 (endFunction -> .)

    endFunction                    shift and go to state 67

state 60

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET . CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET . CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 68


state 61

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA . vars_type_array
    (13) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_ID          shift and go to state 69

    vars_type_array                shift and go to state 70

state 62

    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (67) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 67 (empty -> .)
    MAIN            reduce using rule 67 (empty -> .)
    CTE_ID          reduce using rule 67 (empty -> .)

    auxVars                        shift and go to state 71
    empty                          shift and go to state 45

state 63

    (19) funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .

    $end            reduce using rule 19 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    FUNC            reduce using rule 19 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 19 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)


state 64

    (20) auxFuncBody -> vars statements . auxFuncBody
    (20) auxFuncBody -> . vars statements auxFuncBody
    (21) auxFuncBody -> . statements auxFuncBody
    (22) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (27) statements -> . assignment
    (67) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (28) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON

  ! shift/reduce conflict for CTE_ID resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 67 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 58

  ! CTE_ID          [ reduce using rule 67 (empty -> .) ]

    vars                           shift and go to state 54
    statements                     shift and go to state 55
    auxFuncBody                    shift and go to state 72
    empty                          shift and go to state 56
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 57

state 65

    (21) auxFuncBody -> statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 21 (auxFuncBody -> statements auxFuncBody .)


state 66

    (28) assignment -> CTE_ID addOperand . EQUAL addOperator logicExpression doAssign SEMI_COLON

    EQUAL           shift and go to state 73


state 67

    (18) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction .

    FUNC            reduce using rule 18 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction .)
    MAIN            reduce using rule 18 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endFunction .)


state 68

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT . RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT . RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 74


state 69

    (13) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (61) saveVariableID -> .

    LEFT_BRACKET    reduce using rule 61 (saveVariableID -> .)

    saveVariableID                 shift and go to state 75

state 70

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .

    FUNC            reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    MAIN            reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)
    CTE_ID          reduce using rule 13 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array .)


state 71

    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .

    FUNC            reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    MAIN            reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 14 (vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)


state 72

    (20) auxFuncBody -> vars statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 20 (auxFuncBody -> vars statements auxFuncBody .)


state 73

    (28) assignment -> CTE_ID addOperand EQUAL . addOperator logicExpression doAssign SEMI_COLON
    (64) addOperator -> .

    CTE_ID          reduce using rule 64 (addOperator -> .)
    CTE_INT         reduce using rule 64 (addOperator -> .)
    CTE_FLOAT       reduce using rule 64 (addOperator -> .)
    TRUE            reduce using rule 64 (addOperator -> .)
    FALSE           reduce using rule 64 (addOperator -> .)

    addOperator                    shift and go to state 76

state 74

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET . COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET . SEMI_COLON auxVars

    COMMA           shift and go to state 77
    SEMI_COLON      shift and go to state 78


state 75

    (13) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 79


state 76

    (28) assignment -> CTE_ID addOperand EQUAL addOperator . logicExpression doAssign SEMI_COLON
    (29) logicExpression -> . exp auxLogicExpression
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    logicExpression                shift and go to state 81
    exp                            shift and go to state 82
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 77

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA . vars_type_matrix
    (15) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> . CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_ID          shift and go to state 91

    vars_type_matrix               shift and go to state 92

state 78

    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . VAR type vars_type_matrix
    (10) auxVars -> . empty
    (67) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 67 (empty -> .)
    MAIN            reduce using rule 67 (empty -> .)
    CTE_ID          reduce using rule 67 (empty -> .)

    auxVars                        shift and go to state 93
    empty                          shift and go to state 45

state 79

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 94


state 80

    (52) constants -> CTE_ID . addOperand
    (63) addOperand -> .

    TIMES           reduce using rule 63 (addOperand -> .)
    DIV             reduce using rule 63 (addOperand -> .)
    MOD             reduce using rule 63 (addOperand -> .)
    EXP             reduce using rule 63 (addOperand -> .)
    PLUS            reduce using rule 63 (addOperand -> .)
    MINUS           reduce using rule 63 (addOperand -> .)
    GREATER_THAN    reduce using rule 63 (addOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 63 (addOperand -> .)
    LESS_THAN       reduce using rule 63 (addOperand -> .)
    LESS_EQUAL_THAN reduce using rule 63 (addOperand -> .)
    NOT_EQUALS      reduce using rule 63 (addOperand -> .)
    EQUALS          reduce using rule 63 (addOperand -> .)
    AND             reduce using rule 63 (addOperand -> .)
    OR              reduce using rule 63 (addOperand -> .)
    SEMI_COLON      reduce using rule 63 (addOperand -> .)

    addOperand                     shift and go to state 95

state 81

    (28) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression . doAssign SEMI_COLON
    (66) doAssign -> .

    SEMI_COLON      reduce using rule 66 (doAssign -> .)

    doAssign                       shift and go to state 96

state 82

    (29) logicExpression -> exp . auxLogicExpression
    (30) auxLogicExpression -> . AND logicExpression
    (31) auxLogicExpression -> . OR logicExpression
    (32) auxLogicExpression -> . empty
    (67) empty -> .

    AND             shift and go to state 98
    OR              shift and go to state 99
    SEMI_COLON      reduce using rule 67 (empty -> .)

    auxLogicExpression             shift and go to state 97
    empty                          shift and go to state 100

state 83

    (33) exp -> exp2 . auxExp
    (34) auxExp -> . GREATER_THAN exp
    (35) auxExp -> . GREATER_EQUAL_THAN exp
    (36) auxExp -> . LESS_THAN exp
    (37) auxExp -> . LESS_EQUAL_THAN exp
    (38) auxExp -> . NOT_EQUALS exp
    (39) auxExp -> . EQUALS exp
    (40) auxExp -> . empty
    (67) empty -> .

    GREATER_THAN    shift and go to state 102
    GREATER_EQUAL_THAN shift and go to state 103
    LESS_THAN       shift and go to state 104
    LESS_EQUAL_THAN shift and go to state 105
    NOT_EQUALS      shift and go to state 106
    EQUALS          shift and go to state 107
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    SEMI_COLON      reduce using rule 67 (empty -> .)

    auxExp                         shift and go to state 101
    empty                          shift and go to state 108

state 84

    (41) exp2 -> term . doExpression exp2Aux
    (65) doExpression -> .

    PLUS            reduce using rule 65 (doExpression -> .)
    MINUS           reduce using rule 65 (doExpression -> .)
    GREATER_THAN    reduce using rule 65 (doExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 65 (doExpression -> .)
    LESS_THAN       reduce using rule 65 (doExpression -> .)
    LESS_EQUAL_THAN reduce using rule 65 (doExpression -> .)
    NOT_EQUALS      reduce using rule 65 (doExpression -> .)
    EQUALS          reduce using rule 65 (doExpression -> .)
    AND             reduce using rule 65 (doExpression -> .)
    OR              reduce using rule 65 (doExpression -> .)
    SEMI_COLON      reduce using rule 65 (doExpression -> .)

    doExpression                   shift and go to state 109

state 85

    (45) term -> factor . auxTerm
    (46) auxTerm -> . TIMES term
    (47) auxTerm -> . DIV term
    (48) auxTerm -> . MOD term
    (49) auxTerm -> . EXP term
    (50) auxTerm -> . empty
    (67) empty -> .

    TIMES           shift and go to state 111
    DIV             shift and go to state 112
    MOD             shift and go to state 113
    EXP             shift and go to state 114
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    GREATER_THAN    reduce using rule 67 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 67 (empty -> .)
    LESS_THAN       reduce using rule 67 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 67 (empty -> .)
    NOT_EQUALS      reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    SEMI_COLON      reduce using rule 67 (empty -> .)

    auxTerm                        shift and go to state 110
    empty                          shift and go to state 115

state 86

    (51) factor -> constants .

    TIMES           reduce using rule 51 (factor -> constants .)
    DIV             reduce using rule 51 (factor -> constants .)
    MOD             reduce using rule 51 (factor -> constants .)
    EXP             reduce using rule 51 (factor -> constants .)
    PLUS            reduce using rule 51 (factor -> constants .)
    MINUS           reduce using rule 51 (factor -> constants .)
    GREATER_THAN    reduce using rule 51 (factor -> constants .)
    GREATER_EQUAL_THAN reduce using rule 51 (factor -> constants .)
    LESS_THAN       reduce using rule 51 (factor -> constants .)
    LESS_EQUAL_THAN reduce using rule 51 (factor -> constants .)
    NOT_EQUALS      reduce using rule 51 (factor -> constants .)
    EQUALS          reduce using rule 51 (factor -> constants .)
    AND             reduce using rule 51 (factor -> constants .)
    OR              reduce using rule 51 (factor -> constants .)
    SEMI_COLON      reduce using rule 51 (factor -> constants .)


state 87

    (53) constants -> CTE_INT .

    TIMES           reduce using rule 53 (constants -> CTE_INT .)
    DIV             reduce using rule 53 (constants -> CTE_INT .)
    MOD             reduce using rule 53 (constants -> CTE_INT .)
    EXP             reduce using rule 53 (constants -> CTE_INT .)
    PLUS            reduce using rule 53 (constants -> CTE_INT .)
    MINUS           reduce using rule 53 (constants -> CTE_INT .)
    GREATER_THAN    reduce using rule 53 (constants -> CTE_INT .)
    GREATER_EQUAL_THAN reduce using rule 53 (constants -> CTE_INT .)
    LESS_THAN       reduce using rule 53 (constants -> CTE_INT .)
    LESS_EQUAL_THAN reduce using rule 53 (constants -> CTE_INT .)
    NOT_EQUALS      reduce using rule 53 (constants -> CTE_INT .)
    EQUALS          reduce using rule 53 (constants -> CTE_INT .)
    AND             reduce using rule 53 (constants -> CTE_INT .)
    OR              reduce using rule 53 (constants -> CTE_INT .)
    SEMI_COLON      reduce using rule 53 (constants -> CTE_INT .)


state 88

    (54) constants -> CTE_FLOAT .

    TIMES           reduce using rule 54 (constants -> CTE_FLOAT .)
    DIV             reduce using rule 54 (constants -> CTE_FLOAT .)
    MOD             reduce using rule 54 (constants -> CTE_FLOAT .)
    EXP             reduce using rule 54 (constants -> CTE_FLOAT .)
    PLUS            reduce using rule 54 (constants -> CTE_FLOAT .)
    MINUS           reduce using rule 54 (constants -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 54 (constants -> CTE_FLOAT .)
    GREATER_EQUAL_THAN reduce using rule 54 (constants -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 54 (constants -> CTE_FLOAT .)
    LESS_EQUAL_THAN reduce using rule 54 (constants -> CTE_FLOAT .)
    NOT_EQUALS      reduce using rule 54 (constants -> CTE_FLOAT .)
    EQUALS          reduce using rule 54 (constants -> CTE_FLOAT .)
    AND             reduce using rule 54 (constants -> CTE_FLOAT .)
    OR              reduce using rule 54 (constants -> CTE_FLOAT .)
    SEMI_COLON      reduce using rule 54 (constants -> CTE_FLOAT .)


state 89

    (55) constants -> TRUE .

    TIMES           reduce using rule 55 (constants -> TRUE .)
    DIV             reduce using rule 55 (constants -> TRUE .)
    MOD             reduce using rule 55 (constants -> TRUE .)
    EXP             reduce using rule 55 (constants -> TRUE .)
    PLUS            reduce using rule 55 (constants -> TRUE .)
    MINUS           reduce using rule 55 (constants -> TRUE .)
    GREATER_THAN    reduce using rule 55 (constants -> TRUE .)
    GREATER_EQUAL_THAN reduce using rule 55 (constants -> TRUE .)
    LESS_THAN       reduce using rule 55 (constants -> TRUE .)
    LESS_EQUAL_THAN reduce using rule 55 (constants -> TRUE .)
    NOT_EQUALS      reduce using rule 55 (constants -> TRUE .)
    EQUALS          reduce using rule 55 (constants -> TRUE .)
    AND             reduce using rule 55 (constants -> TRUE .)
    OR              reduce using rule 55 (constants -> TRUE .)
    SEMI_COLON      reduce using rule 55 (constants -> TRUE .)


state 90

    (56) constants -> FALSE .

    TIMES           reduce using rule 56 (constants -> FALSE .)
    DIV             reduce using rule 56 (constants -> FALSE .)
    MOD             reduce using rule 56 (constants -> FALSE .)
    EXP             reduce using rule 56 (constants -> FALSE .)
    PLUS            reduce using rule 56 (constants -> FALSE .)
    MINUS           reduce using rule 56 (constants -> FALSE .)
    GREATER_THAN    reduce using rule 56 (constants -> FALSE .)
    GREATER_EQUAL_THAN reduce using rule 56 (constants -> FALSE .)
    LESS_THAN       reduce using rule 56 (constants -> FALSE .)
    LESS_EQUAL_THAN reduce using rule 56 (constants -> FALSE .)
    NOT_EQUALS      reduce using rule 56 (constants -> FALSE .)
    EQUALS          reduce using rule 56 (constants -> FALSE .)
    AND             reduce using rule 56 (constants -> FALSE .)
    OR              reduce using rule 56 (constants -> FALSE .)
    SEMI_COLON      reduce using rule 56 (constants -> FALSE .)


state 91

    (15) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID . saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars
    (61) saveVariableID -> .

    LEFT_BRACKET    reduce using rule 61 (saveVariableID -> .)

    saveVariableID                 shift and go to state 116

state 92

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .

    FUNC            reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    MAIN            reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)
    CTE_ID          reduce using rule 15 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix .)


state 93

    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .

    FUNC            reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    MAIN            reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 16 (vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars .)


state 94

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 117


state 95

    (52) constants -> CTE_ID addOperand .

    TIMES           reduce using rule 52 (constants -> CTE_ID addOperand .)
    DIV             reduce using rule 52 (constants -> CTE_ID addOperand .)
    MOD             reduce using rule 52 (constants -> CTE_ID addOperand .)
    EXP             reduce using rule 52 (constants -> CTE_ID addOperand .)
    PLUS            reduce using rule 52 (constants -> CTE_ID addOperand .)
    MINUS           reduce using rule 52 (constants -> CTE_ID addOperand .)
    GREATER_THAN    reduce using rule 52 (constants -> CTE_ID addOperand .)
    GREATER_EQUAL_THAN reduce using rule 52 (constants -> CTE_ID addOperand .)
    LESS_THAN       reduce using rule 52 (constants -> CTE_ID addOperand .)
    LESS_EQUAL_THAN reduce using rule 52 (constants -> CTE_ID addOperand .)
    NOT_EQUALS      reduce using rule 52 (constants -> CTE_ID addOperand .)
    EQUALS          reduce using rule 52 (constants -> CTE_ID addOperand .)
    AND             reduce using rule 52 (constants -> CTE_ID addOperand .)
    OR              reduce using rule 52 (constants -> CTE_ID addOperand .)
    SEMI_COLON      reduce using rule 52 (constants -> CTE_ID addOperand .)


state 96

    (28) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign . SEMI_COLON

    SEMI_COLON      shift and go to state 118


state 97

    (29) logicExpression -> exp auxLogicExpression .

    SEMI_COLON      reduce using rule 29 (logicExpression -> exp auxLogicExpression .)


state 98

    (30) auxLogicExpression -> AND . logicExpression
    (29) logicExpression -> . exp auxLogicExpression
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    logicExpression                shift and go to state 119
    exp                            shift and go to state 82
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 99

    (31) auxLogicExpression -> OR . logicExpression
    (29) logicExpression -> . exp auxLogicExpression
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    logicExpression                shift and go to state 120
    exp                            shift and go to state 82
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 100

    (32) auxLogicExpression -> empty .

    SEMI_COLON      reduce using rule 32 (auxLogicExpression -> empty .)


state 101

    (33) exp -> exp2 auxExp .

    AND             reduce using rule 33 (exp -> exp2 auxExp .)
    OR              reduce using rule 33 (exp -> exp2 auxExp .)
    SEMI_COLON      reduce using rule 33 (exp -> exp2 auxExp .)


state 102

    (34) auxExp -> GREATER_THAN . exp
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp                            shift and go to state 121
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 103

    (35) auxExp -> GREATER_EQUAL_THAN . exp
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp                            shift and go to state 122
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 104

    (36) auxExp -> LESS_THAN . exp
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp                            shift and go to state 123
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 105

    (37) auxExp -> LESS_EQUAL_THAN . exp
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp                            shift and go to state 124
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 106

    (38) auxExp -> NOT_EQUALS . exp
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp                            shift and go to state 125
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 107

    (39) auxExp -> EQUALS . exp
    (33) exp -> . exp2 auxExp
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp                            shift and go to state 126
    exp2                           shift and go to state 83
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 108

    (40) auxExp -> empty .

    AND             reduce using rule 40 (auxExp -> empty .)
    OR              reduce using rule 40 (auxExp -> empty .)
    SEMI_COLON      reduce using rule 40 (auxExp -> empty .)


state 109

    (41) exp2 -> term doExpression . exp2Aux
    (42) exp2Aux -> . PLUS addOperator exp2
    (43) exp2Aux -> . MINUS addOperator exp2
    (44) exp2Aux -> . empty
    (67) empty -> .

    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    GREATER_THAN    reduce using rule 67 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 67 (empty -> .)
    LESS_THAN       reduce using rule 67 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 67 (empty -> .)
    NOT_EQUALS      reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    SEMI_COLON      reduce using rule 67 (empty -> .)

    exp2Aux                        shift and go to state 127
    empty                          shift and go to state 130

state 110

    (45) term -> factor auxTerm .

    PLUS            reduce using rule 45 (term -> factor auxTerm .)
    MINUS           reduce using rule 45 (term -> factor auxTerm .)
    GREATER_THAN    reduce using rule 45 (term -> factor auxTerm .)
    GREATER_EQUAL_THAN reduce using rule 45 (term -> factor auxTerm .)
    LESS_THAN       reduce using rule 45 (term -> factor auxTerm .)
    LESS_EQUAL_THAN reduce using rule 45 (term -> factor auxTerm .)
    NOT_EQUALS      reduce using rule 45 (term -> factor auxTerm .)
    EQUALS          reduce using rule 45 (term -> factor auxTerm .)
    AND             reduce using rule 45 (term -> factor auxTerm .)
    OR              reduce using rule 45 (term -> factor auxTerm .)
    SEMI_COLON      reduce using rule 45 (term -> factor auxTerm .)


state 111

    (46) auxTerm -> TIMES . term
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    term                           shift and go to state 131
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 112

    (47) auxTerm -> DIV . term
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    term                           shift and go to state 132
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 113

    (48) auxTerm -> MOD . term
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    term                           shift and go to state 133
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 114

    (49) auxTerm -> EXP . term
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    term                           shift and go to state 134
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 115

    (50) auxTerm -> empty .

    PLUS            reduce using rule 50 (auxTerm -> empty .)
    MINUS           reduce using rule 50 (auxTerm -> empty .)
    GREATER_THAN    reduce using rule 50 (auxTerm -> empty .)
    GREATER_EQUAL_THAN reduce using rule 50 (auxTerm -> empty .)
    LESS_THAN       reduce using rule 50 (auxTerm -> empty .)
    LESS_EQUAL_THAN reduce using rule 50 (auxTerm -> empty .)
    NOT_EQUALS      reduce using rule 50 (auxTerm -> empty .)
    EQUALS          reduce using rule 50 (auxTerm -> empty .)
    AND             reduce using rule 50 (auxTerm -> empty .)
    OR              reduce using rule 50 (auxTerm -> empty .)
    SEMI_COLON      reduce using rule 50 (auxTerm -> empty .)


state 116

    (15) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID . LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 135


state 117

    (13) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . COMMA vars_type_array
    (14) vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . SEMI_COLON auxVars

    COMMA           shift and go to state 61
    SEMI_COLON      shift and go to state 62


state 118

    (28) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .

    VAR             reduce using rule 28 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CTE_ID          reduce using rule 28 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 28 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)


state 119

    (30) auxLogicExpression -> AND logicExpression .

    SEMI_COLON      reduce using rule 30 (auxLogicExpression -> AND logicExpression .)


state 120

    (31) auxLogicExpression -> OR logicExpression .

    SEMI_COLON      reduce using rule 31 (auxLogicExpression -> OR logicExpression .)


state 121

    (34) auxExp -> GREATER_THAN exp .

    AND             reduce using rule 34 (auxExp -> GREATER_THAN exp .)
    OR              reduce using rule 34 (auxExp -> GREATER_THAN exp .)
    SEMI_COLON      reduce using rule 34 (auxExp -> GREATER_THAN exp .)


state 122

    (35) auxExp -> GREATER_EQUAL_THAN exp .

    AND             reduce using rule 35 (auxExp -> GREATER_EQUAL_THAN exp .)
    OR              reduce using rule 35 (auxExp -> GREATER_EQUAL_THAN exp .)
    SEMI_COLON      reduce using rule 35 (auxExp -> GREATER_EQUAL_THAN exp .)


state 123

    (36) auxExp -> LESS_THAN exp .

    AND             reduce using rule 36 (auxExp -> LESS_THAN exp .)
    OR              reduce using rule 36 (auxExp -> LESS_THAN exp .)
    SEMI_COLON      reduce using rule 36 (auxExp -> LESS_THAN exp .)


state 124

    (37) auxExp -> LESS_EQUAL_THAN exp .

    AND             reduce using rule 37 (auxExp -> LESS_EQUAL_THAN exp .)
    OR              reduce using rule 37 (auxExp -> LESS_EQUAL_THAN exp .)
    SEMI_COLON      reduce using rule 37 (auxExp -> LESS_EQUAL_THAN exp .)


state 125

    (38) auxExp -> NOT_EQUALS exp .

    AND             reduce using rule 38 (auxExp -> NOT_EQUALS exp .)
    OR              reduce using rule 38 (auxExp -> NOT_EQUALS exp .)
    SEMI_COLON      reduce using rule 38 (auxExp -> NOT_EQUALS exp .)


state 126

    (39) auxExp -> EQUALS exp .

    AND             reduce using rule 39 (auxExp -> EQUALS exp .)
    OR              reduce using rule 39 (auxExp -> EQUALS exp .)
    SEMI_COLON      reduce using rule 39 (auxExp -> EQUALS exp .)


state 127

    (41) exp2 -> term doExpression exp2Aux .

    GREATER_THAN    reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    GREATER_EQUAL_THAN reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    LESS_THAN       reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    LESS_EQUAL_THAN reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    NOT_EQUALS      reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    EQUALS          reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    AND             reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    OR              reduce using rule 41 (exp2 -> term doExpression exp2Aux .)
    SEMI_COLON      reduce using rule 41 (exp2 -> term doExpression exp2Aux .)


state 128

    (42) exp2Aux -> PLUS . addOperator exp2
    (64) addOperator -> .

    CTE_ID          reduce using rule 64 (addOperator -> .)
    CTE_INT         reduce using rule 64 (addOperator -> .)
    CTE_FLOAT       reduce using rule 64 (addOperator -> .)
    TRUE            reduce using rule 64 (addOperator -> .)
    FALSE           reduce using rule 64 (addOperator -> .)

    addOperator                    shift and go to state 136

state 129

    (43) exp2Aux -> MINUS . addOperator exp2
    (64) addOperator -> .

    CTE_ID          reduce using rule 64 (addOperator -> .)
    CTE_INT         reduce using rule 64 (addOperator -> .)
    CTE_FLOAT       reduce using rule 64 (addOperator -> .)
    TRUE            reduce using rule 64 (addOperator -> .)
    FALSE           reduce using rule 64 (addOperator -> .)

    addOperator                    shift and go to state 137

state 130

    (44) exp2Aux -> empty .

    GREATER_THAN    reduce using rule 44 (exp2Aux -> empty .)
    GREATER_EQUAL_THAN reduce using rule 44 (exp2Aux -> empty .)
    LESS_THAN       reduce using rule 44 (exp2Aux -> empty .)
    LESS_EQUAL_THAN reduce using rule 44 (exp2Aux -> empty .)
    NOT_EQUALS      reduce using rule 44 (exp2Aux -> empty .)
    EQUALS          reduce using rule 44 (exp2Aux -> empty .)
    AND             reduce using rule 44 (exp2Aux -> empty .)
    OR              reduce using rule 44 (exp2Aux -> empty .)
    SEMI_COLON      reduce using rule 44 (exp2Aux -> empty .)


state 131

    (46) auxTerm -> TIMES term .

    PLUS            reduce using rule 46 (auxTerm -> TIMES term .)
    MINUS           reduce using rule 46 (auxTerm -> TIMES term .)
    GREATER_THAN    reduce using rule 46 (auxTerm -> TIMES term .)
    GREATER_EQUAL_THAN reduce using rule 46 (auxTerm -> TIMES term .)
    LESS_THAN       reduce using rule 46 (auxTerm -> TIMES term .)
    LESS_EQUAL_THAN reduce using rule 46 (auxTerm -> TIMES term .)
    NOT_EQUALS      reduce using rule 46 (auxTerm -> TIMES term .)
    EQUALS          reduce using rule 46 (auxTerm -> TIMES term .)
    AND             reduce using rule 46 (auxTerm -> TIMES term .)
    OR              reduce using rule 46 (auxTerm -> TIMES term .)
    SEMI_COLON      reduce using rule 46 (auxTerm -> TIMES term .)


state 132

    (47) auxTerm -> DIV term .

    PLUS            reduce using rule 47 (auxTerm -> DIV term .)
    MINUS           reduce using rule 47 (auxTerm -> DIV term .)
    GREATER_THAN    reduce using rule 47 (auxTerm -> DIV term .)
    GREATER_EQUAL_THAN reduce using rule 47 (auxTerm -> DIV term .)
    LESS_THAN       reduce using rule 47 (auxTerm -> DIV term .)
    LESS_EQUAL_THAN reduce using rule 47 (auxTerm -> DIV term .)
    NOT_EQUALS      reduce using rule 47 (auxTerm -> DIV term .)
    EQUALS          reduce using rule 47 (auxTerm -> DIV term .)
    AND             reduce using rule 47 (auxTerm -> DIV term .)
    OR              reduce using rule 47 (auxTerm -> DIV term .)
    SEMI_COLON      reduce using rule 47 (auxTerm -> DIV term .)


state 133

    (48) auxTerm -> MOD term .

    PLUS            reduce using rule 48 (auxTerm -> MOD term .)
    MINUS           reduce using rule 48 (auxTerm -> MOD term .)
    GREATER_THAN    reduce using rule 48 (auxTerm -> MOD term .)
    GREATER_EQUAL_THAN reduce using rule 48 (auxTerm -> MOD term .)
    LESS_THAN       reduce using rule 48 (auxTerm -> MOD term .)
    LESS_EQUAL_THAN reduce using rule 48 (auxTerm -> MOD term .)
    NOT_EQUALS      reduce using rule 48 (auxTerm -> MOD term .)
    EQUALS          reduce using rule 48 (auxTerm -> MOD term .)
    AND             reduce using rule 48 (auxTerm -> MOD term .)
    OR              reduce using rule 48 (auxTerm -> MOD term .)
    SEMI_COLON      reduce using rule 48 (auxTerm -> MOD term .)


state 134

    (49) auxTerm -> EXP term .

    PLUS            reduce using rule 49 (auxTerm -> EXP term .)
    MINUS           reduce using rule 49 (auxTerm -> EXP term .)
    GREATER_THAN    reduce using rule 49 (auxTerm -> EXP term .)
    GREATER_EQUAL_THAN reduce using rule 49 (auxTerm -> EXP term .)
    LESS_THAN       reduce using rule 49 (auxTerm -> EXP term .)
    LESS_EQUAL_THAN reduce using rule 49 (auxTerm -> EXP term .)
    NOT_EQUALS      reduce using rule 49 (auxTerm -> EXP term .)
    EQUALS          reduce using rule 49 (auxTerm -> EXP term .)
    AND             reduce using rule 49 (auxTerm -> EXP term .)
    OR              reduce using rule 49 (auxTerm -> EXP term .)
    SEMI_COLON      reduce using rule 49 (auxTerm -> EXP term .)


state 135

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET . CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    CTE_INT         shift and go to state 138


state 136

    (42) exp2Aux -> PLUS addOperator . exp2
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp2                           shift and go to state 139
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 137

    (43) exp2Aux -> MINUS addOperator . exp2
    (41) exp2 -> . term doExpression exp2Aux
    (45) term -> . factor auxTerm
    (51) factor -> . constants
    (52) constants -> . CTE_ID addOperand
    (53) constants -> . CTE_INT
    (54) constants -> . CTE_FLOAT
    (55) constants -> . TRUE
    (56) constants -> . FALSE

    CTE_ID          shift and go to state 80
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90

    exp2                           shift and go to state 140
    term                           shift and go to state 84
    factor                         shift and go to state 85
    constants                      shift and go to state 86

state 138

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT . RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 141


state 139

    (42) exp2Aux -> PLUS addOperator exp2 .

    GREATER_THAN    reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_THAN       reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    EQUALS          reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    AND             reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    OR              reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 42 (exp2Aux -> PLUS addOperator exp2 .)


state 140

    (43) exp2Aux -> MINUS addOperator exp2 .

    GREATER_THAN    reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_THAN       reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    EQUALS          reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    AND             reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    OR              reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 43 (exp2Aux -> MINUS addOperator exp2 .)


state 141

    (15) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix
    (16) vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET . LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 60

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTE_ID in state 48 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 55 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 64 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (globalVariables -> empty)
WARNING: rejected rule (auxVars -> empty) in state 8
