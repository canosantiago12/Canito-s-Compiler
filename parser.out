Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BINOMIAL
    FOR
    MEAN
    MEDIAN
    MODE
    PLOT
    POISSON
    STANDARD_DEVIATION
    VARIANCE

Grammar

Rule 0     S' -> program_main
Rule 1     program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
Rule 2     globalVariables -> vars addMemoryInfo
Rule 3     globalVariables -> empty
Rule 4     globalFunctions -> funcs
Rule 5     globalFunctions -> empty
Rule 6     vars -> auxVars
Rule 7     auxVars -> VAR type vars_type_single
Rule 8     auxVars -> VAR type vars_type_array
Rule 9     auxVars -> empty
Rule 10    vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single
Rule 11    vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars
Rule 12    vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
Rule 13    vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
Rule 14    funcs -> funcs_aux globalFunctions
Rule 15    funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 16    funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
Rule 17    params -> auxParams
Rule 18    params -> empty
Rule 19    auxParams -> type CTE_ID addParam multipleParams
Rule 20    multipleParams -> COMMA auxParams
Rule 21    multipleParams -> empty
Rule 22    funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET
Rule 23    auxFuncBody -> vars statements auxFuncBody
Rule 24    auxFuncBody -> statements auxFuncBody
Rule 25    auxFuncBody -> vars
Rule 26    auxFuncBody -> empty
Rule 27    type -> INT setCurrentType
Rule 28    type -> FLOAT setCurrentType
Rule 29    type -> BOOL setCurrentType
Rule 30    type -> STRING setCurrentType
Rule 31    statements -> assignment
Rule 32    statements -> writting
Rule 33    statements -> reading
Rule 34    statements -> if
Rule 35    statements -> while
Rule 36    statements -> auxFuncCall
Rule 37    statements -> return
Rule 38    assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
Rule 39    assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
Rule 40    writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
Rule 41    auxWritting -> logicExpression doWrite multipleWrite
Rule 42    auxWritting -> CTE_STRING doWriteString multipleWrite
Rule 43    multipleWrite -> COMMA auxWritting
Rule 44    multipleWrite -> empty
Rule 45    reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
Rule 46    auxReading -> CTE_ID addOperand doReading multipleRead
Rule 47    multipleRead -> COMMA auxReading
Rule 48    multipleRead -> empty
Rule 49    logicExpression -> exp doLogicExpression auxLogicExpression
Rule 50    auxLogicExpression -> AND addOperator logicExpression
Rule 51    auxLogicExpression -> OR addOperator logicExpression
Rule 52    auxLogicExpression -> empty
Rule 53    exp -> exp2 doCompExpression auxExp
Rule 54    auxExp -> GREATER_THAN addOperator exp
Rule 55    auxExp -> GREATER_EQUAL_THAN addOperator exp
Rule 56    auxExp -> LESS_THAN addOperator exp
Rule 57    auxExp -> LESS_EQUAL_THAN addOperator exp
Rule 58    auxExp -> NOT_EQUALS addOperator exp
Rule 59    auxExp -> EQUALS addOperator exp
Rule 60    auxExp -> empty
Rule 61    exp2 -> term doExpression exp2Aux
Rule 62    exp2Aux -> PLUS addOperator exp2
Rule 63    exp2Aux -> MINUS addOperator exp2
Rule 64    exp2Aux -> empty
Rule 65    term -> factor doTerm auxTerm
Rule 66    auxTerm -> TIMES addOperator term
Rule 67    auxTerm -> DIV addOperator term
Rule 68    auxTerm -> MOD addOperator term
Rule 69    auxTerm -> EXP addOperator term
Rule 70    auxTerm -> empty
Rule 71    factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
Rule 72    factor -> constants
Rule 73    constants -> CTE_ID addOperand
Rule 74    constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
Rule 75    constants -> CTE_INT addConstantOperand
Rule 76    constants -> CTE_FLOAT addConstantOperand
Rule 77    constants -> CTE_STRING addConstantOperand
Rule 78    constants -> TRUE addConstantBool
Rule 79    constants -> FALSE addConstantBool
Rule 80    constants -> functionCall
Rule 81    if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
Rule 82    else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
Rule 83    else -> ELSE doElse funcBody
Rule 84    else -> empty
Rule 85    while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
Rule 86    functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
Rule 87    auxFuncCall -> functionCall SEMI_COLON
Rule 88    arguments -> auxArguments
Rule 89    arguments -> empty
Rule 90    auxArguments -> logicExpression checkType multipleArguments
Rule 91    multipleArguments -> COMMA auxArguments
Rule 92    multipleArguments -> empty
Rule 93    return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
Rule 94    auxReturn -> logicExpression doReturn
Rule 95    auxReturn -> empty
Rule 96    startup -> <empty>
Rule 97    setMain -> <empty>
Rule 98    endProgram -> <empty>
Rule 99    endPrint -> <empty>
Rule 100   saveFuncID -> <empty>
Rule 101   addParam -> <empty>
Rule 102   addMemoryInfo -> <empty>
Rule 103   endFunction -> <empty>
Rule 104   saveVariableID -> <empty>
Rule 105   saveArray -> <empty>
Rule 106   setCurrentType -> <empty>
Rule 107   addOperand -> <empty>
Rule 108   addConstantOperand -> <empty>
Rule 109   addConstantBool -> <empty>
Rule 110   addOperator -> <empty>
Rule 111   addParenthesis -> <empty>
Rule 112   removeParenthesis -> <empty>
Rule 113   doLogicExpression -> <empty>
Rule 114   doCompExpression -> <empty>
Rule 115   doExpression -> <empty>
Rule 116   doTerm -> <empty>
Rule 117   doAssign -> <empty>
Rule 118   doWrite -> <empty>
Rule 119   doWriteString -> <empty>
Rule 120   doReading -> <empty>
Rule 121   doIF -> <empty>
Rule 122   endIF -> <empty>
Rule 123   doElse -> <empty>
Rule 124   doWhile -> <empty>
Rule 125   endWhile -> <empty>
Rule 126   addCondStart -> <empty>
Rule 127   doFuncCall -> <empty>
Rule 128   setVoidType -> <empty>
Rule 129   checkParams -> <empty>
Rule 130   checkType -> <empty>
Rule 131   doReturn -> <empty>
Rule 132   doGoSub -> <empty>
Rule 133   empty -> <empty>

Terminals, with rules where they appear

AND                  : 50
BINOMIAL             : 
BOOL                 : 29
BTSProgam            : 1
COMMA                : 10 12 20 43 47 91
CTE_FLOAT            : 76
CTE_ID               : 1 10 11 12 13 15 16 19 38 39 46 73 74 86
CTE_INT              : 12 13 75
CTE_STRING           : 42 77
DIV                  : 67
ELSE                 : 82 83
EQUAL                : 38 39
EQUALS               : 59
EXP                  : 69
FALSE                : 79
FLOAT                : 28
FOR                  : 
FUNC                 : 15 16
GREATER_EQUAL_THAN   : 55
GREATER_THAN         : 54
IF                   : 81 82
INT                  : 27
LEFT_BRACKET         : 12 13 39 74
LEFT_CURLY_BRACKET   : 22
LEFT_PAREN           : 1 15 16 40 45 71 81 82 85 86 93
LESS_EQUAL_THAN      : 57
LESS_THAN            : 56
MAIN                 : 1
MEAN                 : 
MEDIAN               : 
MINUS                : 63
MOD                  : 68
MODE                 : 
NOT_EQUALS           : 58
OR                   : 51
PLOT                 : 
PLUS                 : 62
POISSON              : 
PRINT                : 40
READ_INPUT           : 45
RETURN               : 93
RETURN_SIGN          : 93
RIGHT_BRACKET        : 12 13 39 74
RIGHT_CURLY_BRACKET  : 22
RIGHT_PAREN          : 1 15 16 40 45 71 81 82 85 86 93
SEMI_COLON           : 1 11 13 38 39 40 45 87 93
STANDARD_DEVIATION   : 
STRING               : 30
TIMES                : 66
TRUE                 : 78
VAR                  : 7 8
VARIANCE             : 
WHILE                : 85
error                : 

Nonterminals, with rules where they appear

addCondStart         : 85
addConstantBool      : 78 79
addConstantOperand   : 12 13 75 76 77
addMemoryInfo        : 1 2 15 16
addOperand           : 38 39 46 73 74
addOperator          : 38 39 50 51 54 55 56 57 58 59 62 63 66 67 68 69
addParam             : 19
addParenthesis       : 39 71 74
arguments            : 86
assignment           : 31
auxArguments         : 88 91
auxExp               : 53
auxFuncBody          : 22 23 24
auxFuncCall          : 36
auxLogicExpression   : 49
auxParams            : 17 20
auxReading           : 45 47
auxReturn            : 93
auxTerm              : 65
auxVars              : 6 11 13
auxWritting          : 40 43
checkParams          : 86
checkType            : 90
constants            : 72
doAssign             : 38 39
doCompExpression     : 53
doElse               : 82 83
doExpression         : 61
doFuncCall           : 86
doGoSub              : 86
doIF                 : 81 82
doLogicExpression    : 49
doReading            : 46
doReturn             : 94
doTerm               : 65
doWhile              : 85
doWrite              : 41
doWriteString        : 42
else                 : 81 82
empty                : 3 5 9 18 21 26 44 48 52 60 64 70 84 89 92 95
endFunction          : 1 15 16
endIF                : 81 82
endPrint             : 1
endProgram           : 1
endWhile             : 85
exp                  : 49 54 55 56 57 58 59
exp2                 : 53 62 63
exp2Aux              : 61
factor               : 65
funcBody             : 1 15 16 81 82 83 85
funcs                : 4
funcs_aux            : 14
functionCall         : 80 87
globalFunctions      : 1 14
globalVariables      : 1
if                   : 34
logicExpression      : 38 39 39 41 50 51 71 74 81 82 85 90 94
multipleArguments    : 90
multipleParams       : 19
multipleRead         : 46
multipleWrite        : 41 42
params               : 15 16
program_main         : 0
reading              : 33
removeParenthesis    : 39 71 74
return               : 37
saveArray            : 12 13
saveFuncID           : 1 15 16
saveVariableID       : 10 11
setCurrentType       : 27 28 29 30
setMain              : 1
setVoidType          : 16
startup              : 1
statements           : 23 24
term                 : 61 66 67 68 69
type                 : 7 8 15 19
vars                 : 2 23 25
vars_type_array      : 8 12
vars_type_single     : 7 10
while                : 35
writting             : 32

Parsing method: LALR

state 0

    (0) S' -> . program_main
    (1) program_main -> . BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    BTSProgam       shift and go to state 2

    program_main                   shift and go to state 1

state 1

    (0) S' -> program_main .



state 2

    (1) program_main -> BTSProgam . CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    CTE_ID          shift and go to state 3


state 3

    (1) program_main -> BTSProgam CTE_ID . startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (96) startup -> .

    SEMI_COLON      reduce using rule 96 (startup -> .)

    startup                        shift and go to state 4

state 4

    (1) program_main -> BTSProgam CTE_ID startup . SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    SEMI_COLON      shift and go to state 5


state 5

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON . globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (2) globalVariables -> . vars addMemoryInfo
    (3) globalVariables -> . empty
    (6) vars -> . auxVars
    (133) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty

    FUNC            reduce using rule 133 (empty -> .)
    MAIN            reduce using rule 133 (empty -> .)
    VAR             shift and go to state 10

    globalVariables                shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8
    auxVars                        shift and go to state 9

state 6

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables . globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (14) funcs -> . funcs_aux globalFunctions
    (133) empty -> .
    (15) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (16) funcs_aux -> . FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 133 (empty -> .)
    FUNC            shift and go to state 15

    globalFunctions                shift and go to state 11
    funcs                          shift and go to state 12
    empty                          shift and go to state 13
    funcs_aux                      shift and go to state 14

state 7

    (2) globalVariables -> vars . addMemoryInfo
    (102) addMemoryInfo -> .

    FUNC            reduce using rule 102 (addMemoryInfo -> .)
    MAIN            reduce using rule 102 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 16

state 8

    (3) globalVariables -> empty .
    (9) auxVars -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 3 (globalVariables -> empty .)
  ! reduce/reduce conflict for MAIN resolved using rule 3 (globalVariables -> empty .)
    FUNC            reduce using rule 3 (globalVariables -> empty .)
    MAIN            reduce using rule 3 (globalVariables -> empty .)

  ! FUNC            [ reduce using rule 9 (auxVars -> empty .) ]
  ! MAIN            [ reduce using rule 9 (auxVars -> empty .) ]


state 9

    (6) vars -> auxVars .

    FUNC            reduce using rule 6 (vars -> auxVars .)
    MAIN            reduce using rule 6 (vars -> auxVars .)
    CTE_ID          reduce using rule 6 (vars -> auxVars .)
    PRINT           reduce using rule 6 (vars -> auxVars .)
    READ_INPUT      reduce using rule 6 (vars -> auxVars .)
    IF              reduce using rule 6 (vars -> auxVars .)
    WHILE           reduce using rule 6 (vars -> auxVars .)
    RETURN          reduce using rule 6 (vars -> auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (vars -> auxVars .)


state 10

    (7) auxVars -> VAR . type vars_type_single
    (8) auxVars -> VAR . type vars_type_array
    (27) type -> . INT setCurrentType
    (28) type -> . FLOAT setCurrentType
    (29) type -> . BOOL setCurrentType
    (30) type -> . STRING setCurrentType

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 17

state 11

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions . MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    MAIN            shift and go to state 22


state 12

    (4) globalFunctions -> funcs .

    MAIN            reduce using rule 4 (globalFunctions -> funcs .)


state 13

    (5) globalFunctions -> empty .

    MAIN            reduce using rule 5 (globalFunctions -> empty .)


state 14

    (14) funcs -> funcs_aux . globalFunctions
    (4) globalFunctions -> . funcs
    (5) globalFunctions -> . empty
    (14) funcs -> . funcs_aux globalFunctions
    (133) empty -> .
    (15) funcs_aux -> . FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (16) funcs_aux -> . FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    MAIN            reduce using rule 133 (empty -> .)
    FUNC            shift and go to state 15

    funcs_aux                      shift and go to state 14
    globalFunctions                shift and go to state 23
    funcs                          shift and go to state 12
    empty                          shift and go to state 13

state 15

    (15) funcs_aux -> FUNC . type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (16) funcs_aux -> FUNC . CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (27) type -> . INT setCurrentType
    (28) type -> . FLOAT setCurrentType
    (29) type -> . BOOL setCurrentType
    (30) type -> . STRING setCurrentType

    CTE_ID          shift and go to state 25
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 24

state 16

    (2) globalVariables -> vars addMemoryInfo .

    FUNC            reduce using rule 2 (globalVariables -> vars addMemoryInfo .)
    MAIN            reduce using rule 2 (globalVariables -> vars addMemoryInfo .)


state 17

    (7) auxVars -> VAR type . vars_type_single
    (8) auxVars -> VAR type . vars_type_array
    (10) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (11) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars
    (12) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_ID          shift and go to state 28

    vars_type_single               shift and go to state 26
    vars_type_array                shift and go to state 27

state 18

    (27) type -> INT . setCurrentType
    (106) setCurrentType -> .

    CTE_ID          reduce using rule 106 (setCurrentType -> .)

    setCurrentType                 shift and go to state 29

state 19

    (28) type -> FLOAT . setCurrentType
    (106) setCurrentType -> .

    CTE_ID          reduce using rule 106 (setCurrentType -> .)

    setCurrentType                 shift and go to state 30

state 20

    (29) type -> BOOL . setCurrentType
    (106) setCurrentType -> .

    CTE_ID          reduce using rule 106 (setCurrentType -> .)

    setCurrentType                 shift and go to state 31

state 21

    (30) type -> STRING . setCurrentType
    (106) setCurrentType -> .

    CTE_ID          reduce using rule 106 (setCurrentType -> .)

    setCurrentType                 shift and go to state 32

state 22

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN . saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (100) saveFuncID -> .

    LEFT_PAREN      reduce using rule 100 (saveFuncID -> .)

    saveFuncID                     shift and go to state 33

state 23

    (14) funcs -> funcs_aux globalFunctions .

    MAIN            reduce using rule 14 (funcs -> funcs_aux globalFunctions .)


state 24

    (15) funcs_aux -> FUNC type . CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    CTE_ID          shift and go to state 34


state 25

    (16) funcs_aux -> FUNC CTE_ID . saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (100) saveFuncID -> .

    LEFT_PAREN      reduce using rule 100 (saveFuncID -> .)

    saveFuncID                     shift and go to state 35

state 26

    (7) auxVars -> VAR type vars_type_single .

    FUNC            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    MAIN            reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    CTE_ID          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    PRINT           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    READ_INPUT      reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    IF              reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    WHILE           reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    RETURN          reduce using rule 7 (auxVars -> VAR type vars_type_single .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (auxVars -> VAR type vars_type_single .)


state 27

    (8) auxVars -> VAR type vars_type_array .

    FUNC            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    MAIN            reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    CTE_ID          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    PRINT           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    READ_INPUT      reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    IF              reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    WHILE           reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    RETURN          reduce using rule 8 (auxVars -> VAR type vars_type_array .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (auxVars -> VAR type vars_type_array .)


state 28

    (10) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (11) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (12) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (104) saveVariableID -> .

    LEFT_BRACKET    shift and go to state 37
    COMMA           reduce using rule 104 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 104 (saveVariableID -> .)

    saveVariableID                 shift and go to state 36

state 29

    (27) type -> INT setCurrentType .

    CTE_ID          reduce using rule 27 (type -> INT setCurrentType .)


state 30

    (28) type -> FLOAT setCurrentType .

    CTE_ID          reduce using rule 28 (type -> FLOAT setCurrentType .)


state 31

    (29) type -> BOOL setCurrentType .

    CTE_ID          reduce using rule 29 (type -> BOOL setCurrentType .)


state 32

    (30) type -> STRING setCurrentType .

    CTE_ID          reduce using rule 30 (type -> STRING setCurrentType .)


state 33

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID . addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint
    (102) addMemoryInfo -> .

    LEFT_PAREN      reduce using rule 102 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 38

state 34

    (15) funcs_aux -> FUNC type CTE_ID . saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (100) saveFuncID -> .

    LEFT_PAREN      reduce using rule 100 (saveFuncID -> .)

    saveFuncID                     shift and go to state 39

state 35

    (16) funcs_aux -> FUNC CTE_ID saveFuncID . setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (128) setVoidType -> .

    LEFT_PAREN      reduce using rule 128 (setVoidType -> .)

    setVoidType                    shift and go to state 40

state 36

    (10) vars_type_single -> CTE_ID saveVariableID . COMMA vars_type_single
    (11) vars_type_single -> CTE_ID saveVariableID . SEMI_COLON auxVars

    COMMA           shift and go to state 41
    SEMI_COLON      shift and go to state 42


state 37

    (12) vars_type_array -> CTE_ID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET . CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_INT         shift and go to state 43


state 38

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo . LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    LEFT_PAREN      shift and go to state 44


state 39

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 45


state 40

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType . LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction

    LEFT_PAREN      shift and go to state 46


state 41

    (10) vars_type_single -> CTE_ID saveVariableID COMMA . vars_type_single
    (10) vars_type_single -> . CTE_ID saveVariableID COMMA vars_type_single
    (11) vars_type_single -> . CTE_ID saveVariableID SEMI_COLON auxVars

    CTE_ID          shift and go to state 47

    vars_type_single               shift and go to state 48

state 42

    (11) vars_type_single -> CTE_ID saveVariableID SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (133) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 133 (empty -> .)
    MAIN            reduce using rule 133 (empty -> .)
    CTE_ID          reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    READ_INPUT      reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 133 (empty -> .)

    auxVars                        shift and go to state 49
    empty                          shift and go to state 50

state 43

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT . addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars
    (108) addConstantOperand -> .

    RIGHT_BRACKET   reduce using rule 108 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 51

state 44

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN . RIGHT_PAREN setMain funcBody endFunction endProgram endPrint

    RIGHT_PAREN     shift and go to state 52


state 45

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (17) params -> . auxParams
    (18) params -> . empty
    (19) auxParams -> . type CTE_ID addParam multipleParams
    (133) empty -> .
    (27) type -> . INT setCurrentType
    (28) type -> . FLOAT setCurrentType
    (29) type -> . BOOL setCurrentType
    (30) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    type                           shift and go to state 53
    params                         shift and go to state 54
    auxParams                      shift and go to state 55
    empty                          shift and go to state 56

state 46

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN . params RIGHT_PAREN funcBody addMemoryInfo endFunction
    (17) params -> . auxParams
    (18) params -> . empty
    (19) auxParams -> . type CTE_ID addParam multipleParams
    (133) empty -> .
    (27) type -> . INT setCurrentType
    (28) type -> . FLOAT setCurrentType
    (29) type -> . BOOL setCurrentType
    (30) type -> . STRING setCurrentType

    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    params                         shift and go to state 57
    auxParams                      shift and go to state 55
    empty                          shift and go to state 56
    type                           shift and go to state 53

state 47

    (10) vars_type_single -> CTE_ID . saveVariableID COMMA vars_type_single
    (11) vars_type_single -> CTE_ID . saveVariableID SEMI_COLON auxVars
    (104) saveVariableID -> .

    COMMA           reduce using rule 104 (saveVariableID -> .)
    SEMI_COLON      reduce using rule 104 (saveVariableID -> .)

    saveVariableID                 shift and go to state 36

state 48

    (10) vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .

    FUNC            reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    MAIN            reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    CTE_ID          reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    PRINT           reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    READ_INPUT      reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    IF              reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    WHILE           reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    RETURN          reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single .)


state 49

    (11) vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .

    FUNC            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    MAIN            reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    PRINT           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    IF              reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    WHILE           reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    RETURN          reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars .)


state 50

    (9) auxVars -> empty .

    FUNC            reduce using rule 9 (auxVars -> empty .)
    MAIN            reduce using rule 9 (auxVars -> empty .)
    CTE_ID          reduce using rule 9 (auxVars -> empty .)
    PRINT           reduce using rule 9 (auxVars -> empty .)
    READ_INPUT      reduce using rule 9 (auxVars -> empty .)
    IF              reduce using rule 9 (auxVars -> empty .)
    WHILE           reduce using rule 9 (auxVars -> empty .)
    RETURN          reduce using rule 9 (auxVars -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (auxVars -> empty .)


state 51

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand . RIGHT_BRACKET saveArray SEMI_COLON auxVars

    RIGHT_BRACKET   shift and go to state 58


state 52

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN . setMain funcBody endFunction endProgram endPrint
    (97) setMain -> .

    LEFT_CURLY_BRACKET reduce using rule 97 (setMain -> .)

    setMain                        shift and go to state 59

state 53

    (19) auxParams -> type . CTE_ID addParam multipleParams

    CTE_ID          shift and go to state 60


state 54

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 61


state 55

    (17) params -> auxParams .

    RIGHT_PAREN     reduce using rule 17 (params -> auxParams .)


state 56

    (18) params -> empty .

    RIGHT_PAREN     reduce using rule 18 (params -> empty .)


state 57

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params . RIGHT_PAREN funcBody addMemoryInfo endFunction

    RIGHT_PAREN     shift and go to state 62


state 58

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET . saveArray SEMI_COLON auxVars
    (105) saveArray -> .

    COMMA           reduce using rule 105 (saveArray -> .)
    SEMI_COLON      reduce using rule 105 (saveArray -> .)

    saveArray                      shift and go to state 63

state 59

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain . funcBody endFunction endProgram endPrint
    (22) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 64

state 60

    (19) auxParams -> type CTE_ID . addParam multipleParams
    (101) addParam -> .

    COMMA           reduce using rule 101 (addParam -> .)
    RIGHT_PAREN     reduce using rule 101 (addParam -> .)

    addParam                       shift and go to state 66

state 61

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (22) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 67

state 62

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN . funcBody addMemoryInfo endFunction
    (22) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 68

state 63

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray . COMMA vars_type_array
    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray . SEMI_COLON auxVars

    COMMA           shift and go to state 69
    SEMI_COLON      shift and go to state 70


state 64

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody . endFunction endProgram endPrint
    (103) endFunction -> .

    $end            reduce using rule 103 (endFunction -> .)

    endFunction                    shift and go to state 71

state 65

    (22) funcBody -> LEFT_CURLY_BRACKET . auxFuncBody RIGHT_CURLY_BRACKET
    (23) auxFuncBody -> . vars statements auxFuncBody
    (24) auxFuncBody -> . statements auxFuncBody
    (25) auxFuncBody -> . vars
    (26) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (31) statements -> . assignment
    (32) statements -> . writting
    (33) statements -> . reading
    (34) statements -> . if
    (35) statements -> . while
    (36) statements -> . auxFuncCall
    (37) statements -> . return
    (133) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (38) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (39) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (45) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (81) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (85) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (87) auxFuncCall -> . functionCall SEMI_COLON
    (93) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 133 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89

  ! CTE_ID          [ reduce using rule 133 (empty -> .) ]
  ! PRINT           [ reduce using rule 133 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 133 (empty -> .) ]
  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! RETURN          [ reduce using rule 133 (empty -> .) ]

    auxFuncBody                    shift and go to state 72
    vars                           shift and go to state 73
    statements                     shift and go to state 74
    empty                          shift and go to state 75
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 66

    (19) auxParams -> type CTE_ID addParam . multipleParams
    (20) multipleParams -> . COMMA auxParams
    (21) multipleParams -> . empty
    (133) empty -> .

    COMMA           shift and go to state 91
    RIGHT_PAREN     reduce using rule 133 (empty -> .)

    multipleParams                 shift and go to state 90
    empty                          shift and go to state 92

state 67

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (102) addMemoryInfo -> .

    FUNC            reduce using rule 102 (addMemoryInfo -> .)
    MAIN            reduce using rule 102 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 93

state 68

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody . addMemoryInfo endFunction
    (102) addMemoryInfo -> .

    FUNC            reduce using rule 102 (addMemoryInfo -> .)
    MAIN            reduce using rule 102 (addMemoryInfo -> .)

    addMemoryInfo                  shift and go to state 94

state 69

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA . vars_type_array
    (12) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> . CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    CTE_ID          shift and go to state 95

    vars_type_array                shift and go to state 96

state 70

    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON . auxVars
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (133) empty -> .

    VAR             shift and go to state 10
    FUNC            reduce using rule 133 (empty -> .)
    MAIN            reduce using rule 133 (empty -> .)
    CTE_ID          reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    READ_INPUT      reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 133 (empty -> .)

    auxVars                        shift and go to state 97
    empty                          shift and go to state 50

state 71

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction . endProgram endPrint
    (98) endProgram -> .

    $end            reduce using rule 98 (endProgram -> .)

    endProgram                     shift and go to state 98

state 72

    (22) funcBody -> LEFT_CURLY_BRACKET auxFuncBody . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 99


state 73

    (23) auxFuncBody -> vars . statements auxFuncBody
    (25) auxFuncBody -> vars .
    (31) statements -> . assignment
    (32) statements -> . writting
    (33) statements -> . reading
    (34) statements -> . if
    (35) statements -> . while
    (36) statements -> . auxFuncCall
    (37) statements -> . return
    (38) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (39) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (45) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (81) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (85) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (87) auxFuncCall -> . functionCall SEMI_COLON
    (93) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    RIGHT_CURLY_BRACKET reduce using rule 25 (auxFuncBody -> vars .)
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89

    statements                     shift and go to state 100
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 74

    (24) auxFuncBody -> statements . auxFuncBody
    (23) auxFuncBody -> . vars statements auxFuncBody
    (24) auxFuncBody -> . statements auxFuncBody
    (25) auxFuncBody -> . vars
    (26) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (31) statements -> . assignment
    (32) statements -> . writting
    (33) statements -> . reading
    (34) statements -> . if
    (35) statements -> . while
    (36) statements -> . auxFuncCall
    (37) statements -> . return
    (133) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (38) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (39) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (45) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (81) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (85) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (87) auxFuncCall -> . functionCall SEMI_COLON
    (93) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 133 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89

  ! CTE_ID          [ reduce using rule 133 (empty -> .) ]
  ! PRINT           [ reduce using rule 133 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 133 (empty -> .) ]
  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! RETURN          [ reduce using rule 133 (empty -> .) ]

    statements                     shift and go to state 74
    auxFuncBody                    shift and go to state 101
    vars                           shift and go to state 73
    empty                          shift and go to state 75
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 75

    (26) auxFuncBody -> empty .
    (9) auxVars -> empty .

  ! reduce/reduce conflict for RIGHT_CURLY_BRACKET resolved using rule 9 (auxVars -> empty .)
    CTE_ID          reduce using rule 9 (auxVars -> empty .)
    PRINT           reduce using rule 9 (auxVars -> empty .)
    READ_INPUT      reduce using rule 9 (auxVars -> empty .)
    IF              reduce using rule 9 (auxVars -> empty .)
    WHILE           reduce using rule 9 (auxVars -> empty .)
    RETURN          reduce using rule 9 (auxVars -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (auxVars -> empty .)

  ! RIGHT_CURLY_BRACKET [ reduce using rule 26 (auxFuncBody -> empty .) ]


state 76

    (31) statements -> assignment .

    VAR             reduce using rule 31 (statements -> assignment .)
    CTE_ID          reduce using rule 31 (statements -> assignment .)
    PRINT           reduce using rule 31 (statements -> assignment .)
    READ_INPUT      reduce using rule 31 (statements -> assignment .)
    IF              reduce using rule 31 (statements -> assignment .)
    WHILE           reduce using rule 31 (statements -> assignment .)
    RETURN          reduce using rule 31 (statements -> assignment .)
    RIGHT_CURLY_BRACKET reduce using rule 31 (statements -> assignment .)


state 77

    (32) statements -> writting .

    VAR             reduce using rule 32 (statements -> writting .)
    CTE_ID          reduce using rule 32 (statements -> writting .)
    PRINT           reduce using rule 32 (statements -> writting .)
    READ_INPUT      reduce using rule 32 (statements -> writting .)
    IF              reduce using rule 32 (statements -> writting .)
    WHILE           reduce using rule 32 (statements -> writting .)
    RETURN          reduce using rule 32 (statements -> writting .)
    RIGHT_CURLY_BRACKET reduce using rule 32 (statements -> writting .)


state 78

    (33) statements -> reading .

    VAR             reduce using rule 33 (statements -> reading .)
    CTE_ID          reduce using rule 33 (statements -> reading .)
    PRINT           reduce using rule 33 (statements -> reading .)
    READ_INPUT      reduce using rule 33 (statements -> reading .)
    IF              reduce using rule 33 (statements -> reading .)
    WHILE           reduce using rule 33 (statements -> reading .)
    RETURN          reduce using rule 33 (statements -> reading .)
    RIGHT_CURLY_BRACKET reduce using rule 33 (statements -> reading .)


state 79

    (34) statements -> if .

    VAR             reduce using rule 34 (statements -> if .)
    CTE_ID          reduce using rule 34 (statements -> if .)
    PRINT           reduce using rule 34 (statements -> if .)
    READ_INPUT      reduce using rule 34 (statements -> if .)
    IF              reduce using rule 34 (statements -> if .)
    WHILE           reduce using rule 34 (statements -> if .)
    RETURN          reduce using rule 34 (statements -> if .)
    RIGHT_CURLY_BRACKET reduce using rule 34 (statements -> if .)


state 80

    (35) statements -> while .

    VAR             reduce using rule 35 (statements -> while .)
    CTE_ID          reduce using rule 35 (statements -> while .)
    PRINT           reduce using rule 35 (statements -> while .)
    READ_INPUT      reduce using rule 35 (statements -> while .)
    IF              reduce using rule 35 (statements -> while .)
    WHILE           reduce using rule 35 (statements -> while .)
    RETURN          reduce using rule 35 (statements -> while .)
    RIGHT_CURLY_BRACKET reduce using rule 35 (statements -> while .)


state 81

    (36) statements -> auxFuncCall .

    VAR             reduce using rule 36 (statements -> auxFuncCall .)
    CTE_ID          reduce using rule 36 (statements -> auxFuncCall .)
    PRINT           reduce using rule 36 (statements -> auxFuncCall .)
    READ_INPUT      reduce using rule 36 (statements -> auxFuncCall .)
    IF              reduce using rule 36 (statements -> auxFuncCall .)
    WHILE           reduce using rule 36 (statements -> auxFuncCall .)
    RETURN          reduce using rule 36 (statements -> auxFuncCall .)
    RIGHT_CURLY_BRACKET reduce using rule 36 (statements -> auxFuncCall .)


state 82

    (37) statements -> return .

    VAR             reduce using rule 37 (statements -> return .)
    CTE_ID          reduce using rule 37 (statements -> return .)
    PRINT           reduce using rule 37 (statements -> return .)
    READ_INPUT      reduce using rule 37 (statements -> return .)
    IF              reduce using rule 37 (statements -> return .)
    WHILE           reduce using rule 37 (statements -> return .)
    RETURN          reduce using rule 37 (statements -> return .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (statements -> return .)


state 83

    (38) assignment -> CTE_ID . addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (39) assignment -> CTE_ID . LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (86) functionCall -> CTE_ID . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (107) addOperand -> .
    (127) doFuncCall -> .

    LEFT_BRACKET    shift and go to state 103
    EQUAL           reduce using rule 107 (addOperand -> .)
    LEFT_PAREN      reduce using rule 127 (doFuncCall -> .)

    addOperand                     shift and go to state 102
    doFuncCall                     shift and go to state 104

state 84

    (40) writting -> PRINT . LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 105


state 85

    (45) reading -> READ_INPUT . LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 106


state 86

    (81) if -> IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF

    LEFT_PAREN      shift and go to state 107


state 87

    (85) while -> WHILE . LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile

    LEFT_PAREN      shift and go to state 108


state 88

    (87) auxFuncCall -> functionCall . SEMI_COLON

    SEMI_COLON      shift and go to state 109


state 89

    (93) return -> RETURN . RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    RETURN_SIGN     shift and go to state 110


state 90

    (19) auxParams -> type CTE_ID addParam multipleParams .

    RIGHT_PAREN     reduce using rule 19 (auxParams -> type CTE_ID addParam multipleParams .)


state 91

    (20) multipleParams -> COMMA . auxParams
    (19) auxParams -> . type CTE_ID addParam multipleParams
    (27) type -> . INT setCurrentType
    (28) type -> . FLOAT setCurrentType
    (29) type -> . BOOL setCurrentType
    (30) type -> . STRING setCurrentType

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    BOOL            shift and go to state 20
    STRING          shift and go to state 21

    auxParams                      shift and go to state 111
    type                           shift and go to state 53

state 92

    (21) multipleParams -> empty .

    RIGHT_PAREN     reduce using rule 21 (multipleParams -> empty .)


state 93

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (103) endFunction -> .

    FUNC            reduce using rule 103 (endFunction -> .)
    MAIN            reduce using rule 103 (endFunction -> .)

    endFunction                    shift and go to state 112

state 94

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo . endFunction
    (103) endFunction -> .

    FUNC            reduce using rule 103 (endFunction -> .)
    MAIN            reduce using rule 103 (endFunction -> .)

    endFunction                    shift and go to state 113

state 95

    (12) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array
    (13) vars_type_array -> CTE_ID . LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars

    LEFT_BRACKET    shift and go to state 37


state 96

    (12) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .

    FUNC            reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    MAIN            reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    CTE_ID          reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    PRINT           reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    READ_INPUT      reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    IF              reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    WHILE           reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    RETURN          reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array .)


state 97

    (13) vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .

    FUNC            reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    MAIN            reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    CTE_ID          reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    PRINT           reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    READ_INPUT      reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    IF              reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    WHILE           reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    RETURN          reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars .)


state 98

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram . endPrint
    (99) endPrint -> .

    $end            reduce using rule 99 (endPrint -> .)

    endPrint                       shift and go to state 114

state 99

    (22) funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .

    $end            reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    FUNC            reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    CTE_ID          reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    PRINT           reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    READ_INPUT      reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET .)


state 100

    (23) auxFuncBody -> vars statements . auxFuncBody
    (23) auxFuncBody -> . vars statements auxFuncBody
    (24) auxFuncBody -> . statements auxFuncBody
    (25) auxFuncBody -> . vars
    (26) auxFuncBody -> . empty
    (6) vars -> . auxVars
    (31) statements -> . assignment
    (32) statements -> . writting
    (33) statements -> . reading
    (34) statements -> . if
    (35) statements -> . while
    (36) statements -> . auxFuncCall
    (37) statements -> . return
    (133) empty -> .
    (7) auxVars -> . VAR type vars_type_single
    (8) auxVars -> . VAR type vars_type_array
    (9) auxVars -> . empty
    (38) assignment -> . CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON
    (39) assignment -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (40) writting -> . PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON
    (45) reading -> . READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON
    (81) if -> . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (85) while -> . WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (87) auxFuncCall -> . functionCall SEMI_COLON
    (93) return -> . RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

  ! shift/reduce conflict for CTE_ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ_INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RIGHT_CURLY_BRACKET reduce using rule 133 (empty -> .)
    VAR             shift and go to state 10
    CTE_ID          shift and go to state 83
    PRINT           shift and go to state 84
    READ_INPUT      shift and go to state 85
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 89

  ! CTE_ID          [ reduce using rule 133 (empty -> .) ]
  ! PRINT           [ reduce using rule 133 (empty -> .) ]
  ! READ_INPUT      [ reduce using rule 133 (empty -> .) ]
  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! RETURN          [ reduce using rule 133 (empty -> .) ]

    vars                           shift and go to state 73
    statements                     shift and go to state 74
    auxFuncBody                    shift and go to state 115
    empty                          shift and go to state 75
    auxVars                        shift and go to state 9
    assignment                     shift and go to state 76
    writting                       shift and go to state 77
    reading                        shift and go to state 78
    if                             shift and go to state 79
    while                          shift and go to state 80
    auxFuncCall                    shift and go to state 81
    return                         shift and go to state 82
    functionCall                   shift and go to state 88

state 101

    (24) auxFuncBody -> statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 24 (auxFuncBody -> statements auxFuncBody .)


state 102

    (38) assignment -> CTE_ID addOperand . EQUAL addOperator logicExpression doAssign SEMI_COLON

    EQUAL           shift and go to state 116


state 103

    (39) assignment -> CTE_ID LEFT_BRACKET . addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (111) addParenthesis -> .

    LEFT_PAREN      reduce using rule 111 (addParenthesis -> .)
    CTE_ID          reduce using rule 111 (addParenthesis -> .)
    CTE_INT         reduce using rule 111 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 111 (addParenthesis -> .)
    CTE_STRING      reduce using rule 111 (addParenthesis -> .)
    TRUE            reduce using rule 111 (addParenthesis -> .)
    FALSE           reduce using rule 111 (addParenthesis -> .)

    addParenthesis                 shift and go to state 117

state 104

    (86) functionCall -> CTE_ID doFuncCall . LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 118


state 105

    (40) writting -> PRINT LEFT_PAREN . auxWritting RIGHT_PAREN SEMI_COLON
    (41) auxWritting -> . logicExpression doWrite multipleWrite
    (42) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    CTE_STRING      shift and go to state 122
    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    auxWritting                    shift and go to state 120
    logicExpression                shift and go to state 121
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 106

    (45) reading -> READ_INPUT LEFT_PAREN . auxReading RIGHT_PAREN SEMI_COLON
    (46) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 135

    auxReading                     shift and go to state 134

state 107

    (81) if -> IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody else endIF
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 136
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 108

    (85) while -> WHILE LEFT_PAREN . addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (126) addCondStart -> .

    LEFT_PAREN      reduce using rule 126 (addCondStart -> .)
    CTE_ID          reduce using rule 126 (addCondStart -> .)
    CTE_INT         reduce using rule 126 (addCondStart -> .)
    CTE_FLOAT       reduce using rule 126 (addCondStart -> .)
    CTE_STRING      reduce using rule 126 (addCondStart -> .)
    TRUE            reduce using rule 126 (addCondStart -> .)
    FALSE           reduce using rule 126 (addCondStart -> .)

    addCondStart                   shift and go to state 138

state 109

    (87) auxFuncCall -> functionCall SEMI_COLON .

    VAR             reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)
    CTE_ID          reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)
    PRINT           reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)
    READ_INPUT      reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)
    IF              reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)
    WHILE           reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)
    RETURN          reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 87 (auxFuncCall -> functionCall SEMI_COLON .)


state 110

    (93) return -> RETURN RETURN_SIGN . LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON

    LEFT_PAREN      shift and go to state 139


state 111

    (20) multipleParams -> COMMA auxParams .

    RIGHT_PAREN     reduce using rule 20 (multipleParams -> COMMA auxParams .)


state 112

    (15) funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 15 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 15 (funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 113

    (16) funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .

    FUNC            reduce using rule 16 (funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)
    MAIN            reduce using rule 16 (funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction .)


state 114

    (1) program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .

    $end            reduce using rule 1 (program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint .)


state 115

    (23) auxFuncBody -> vars statements auxFuncBody .

    RIGHT_CURLY_BRACKET reduce using rule 23 (auxFuncBody -> vars statements auxFuncBody .)


state 116

    (38) assignment -> CTE_ID addOperand EQUAL . addOperator logicExpression doAssign SEMI_COLON
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 140

state 117

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis . logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 141
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 118

    (86) functionCall -> CTE_ID doFuncCall LEFT_PAREN . arguments checkParams RIGHT_PAREN doGoSub
    (88) arguments -> . auxArguments
    (89) arguments -> . empty
    (90) auxArguments -> . logicExpression checkType multipleArguments
    (133) empty -> .
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    arguments                      shift and go to state 142
    auxArguments                   shift and go to state 143
    empty                          shift and go to state 144
    logicExpression                shift and go to state 145
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 119

    (71) factor -> LEFT_PAREN . addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (111) addParenthesis -> .

    LEFT_PAREN      reduce using rule 111 (addParenthesis -> .)
    CTE_ID          reduce using rule 111 (addParenthesis -> .)
    CTE_INT         reduce using rule 111 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 111 (addParenthesis -> .)
    CTE_STRING      reduce using rule 111 (addParenthesis -> .)
    TRUE            reduce using rule 111 (addParenthesis -> .)
    FALSE           reduce using rule 111 (addParenthesis -> .)

    addParenthesis                 shift and go to state 146

state 120

    (40) writting -> PRINT LEFT_PAREN auxWritting . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 147


state 121

    (41) auxWritting -> logicExpression . doWrite multipleWrite
    (118) doWrite -> .

    COMMA           reduce using rule 118 (doWrite -> .)
    RIGHT_PAREN     reduce using rule 118 (doWrite -> .)

    doWrite                        shift and go to state 148

state 122

    (42) auxWritting -> CTE_STRING . doWriteString multipleWrite
    (77) constants -> CTE_STRING . addConstantOperand
    (119) doWriteString -> .
    (108) addConstantOperand -> .

  ! reduce/reduce conflict for COMMA resolved using rule 108 (addConstantOperand -> .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 108 (addConstantOperand -> .)
    TIMES           reduce using rule 108 (addConstantOperand -> .)
    DIV             reduce using rule 108 (addConstantOperand -> .)
    MOD             reduce using rule 108 (addConstantOperand -> .)
    EXP             reduce using rule 108 (addConstantOperand -> .)
    PLUS            reduce using rule 108 (addConstantOperand -> .)
    MINUS           reduce using rule 108 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 108 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 108 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 108 (addConstantOperand -> .)
    EQUALS          reduce using rule 108 (addConstantOperand -> .)
    AND             reduce using rule 108 (addConstantOperand -> .)
    OR              reduce using rule 108 (addConstantOperand -> .)
    COMMA           reduce using rule 108 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 108 (addConstantOperand -> .)

  ! COMMA           [ reduce using rule 119 (doWriteString -> .) ]
  ! RIGHT_PAREN     [ reduce using rule 119 (doWriteString -> .) ]

    doWriteString                  shift and go to state 149
    addConstantOperand             shift and go to state 150

state 123

    (49) logicExpression -> exp . doLogicExpression auxLogicExpression
    (113) doLogicExpression -> .

    AND             reduce using rule 113 (doLogicExpression -> .)
    OR              reduce using rule 113 (doLogicExpression -> .)
    COMMA           reduce using rule 113 (doLogicExpression -> .)
    RIGHT_PAREN     reduce using rule 113 (doLogicExpression -> .)
    RIGHT_BRACKET   reduce using rule 113 (doLogicExpression -> .)
    SEMI_COLON      reduce using rule 113 (doLogicExpression -> .)

    doLogicExpression              shift and go to state 151

state 124

    (53) exp -> exp2 . doCompExpression auxExp
    (114) doCompExpression -> .

    GREATER_THAN    reduce using rule 114 (doCompExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 114 (doCompExpression -> .)
    LESS_THAN       reduce using rule 114 (doCompExpression -> .)
    LESS_EQUAL_THAN reduce using rule 114 (doCompExpression -> .)
    NOT_EQUALS      reduce using rule 114 (doCompExpression -> .)
    EQUALS          reduce using rule 114 (doCompExpression -> .)
    AND             reduce using rule 114 (doCompExpression -> .)
    OR              reduce using rule 114 (doCompExpression -> .)
    COMMA           reduce using rule 114 (doCompExpression -> .)
    RIGHT_PAREN     reduce using rule 114 (doCompExpression -> .)
    RIGHT_BRACKET   reduce using rule 114 (doCompExpression -> .)
    SEMI_COLON      reduce using rule 114 (doCompExpression -> .)

    doCompExpression               shift and go to state 152

state 125

    (61) exp2 -> term . doExpression exp2Aux
    (115) doExpression -> .

    PLUS            reduce using rule 115 (doExpression -> .)
    MINUS           reduce using rule 115 (doExpression -> .)
    GREATER_THAN    reduce using rule 115 (doExpression -> .)
    GREATER_EQUAL_THAN reduce using rule 115 (doExpression -> .)
    LESS_THAN       reduce using rule 115 (doExpression -> .)
    LESS_EQUAL_THAN reduce using rule 115 (doExpression -> .)
    NOT_EQUALS      reduce using rule 115 (doExpression -> .)
    EQUALS          reduce using rule 115 (doExpression -> .)
    AND             reduce using rule 115 (doExpression -> .)
    OR              reduce using rule 115 (doExpression -> .)
    COMMA           reduce using rule 115 (doExpression -> .)
    RIGHT_PAREN     reduce using rule 115 (doExpression -> .)
    RIGHT_BRACKET   reduce using rule 115 (doExpression -> .)
    SEMI_COLON      reduce using rule 115 (doExpression -> .)

    doExpression                   shift and go to state 153

state 126

    (65) term -> factor . doTerm auxTerm
    (116) doTerm -> .

    TIMES           reduce using rule 116 (doTerm -> .)
    DIV             reduce using rule 116 (doTerm -> .)
    MOD             reduce using rule 116 (doTerm -> .)
    EXP             reduce using rule 116 (doTerm -> .)
    PLUS            reduce using rule 116 (doTerm -> .)
    MINUS           reduce using rule 116 (doTerm -> .)
    GREATER_THAN    reduce using rule 116 (doTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 116 (doTerm -> .)
    LESS_THAN       reduce using rule 116 (doTerm -> .)
    LESS_EQUAL_THAN reduce using rule 116 (doTerm -> .)
    NOT_EQUALS      reduce using rule 116 (doTerm -> .)
    EQUALS          reduce using rule 116 (doTerm -> .)
    AND             reduce using rule 116 (doTerm -> .)
    OR              reduce using rule 116 (doTerm -> .)
    COMMA           reduce using rule 116 (doTerm -> .)
    RIGHT_PAREN     reduce using rule 116 (doTerm -> .)
    RIGHT_BRACKET   reduce using rule 116 (doTerm -> .)
    SEMI_COLON      reduce using rule 116 (doTerm -> .)

    doTerm                         shift and go to state 154

state 127

    (72) factor -> constants .

    TIMES           reduce using rule 72 (factor -> constants .)
    DIV             reduce using rule 72 (factor -> constants .)
    MOD             reduce using rule 72 (factor -> constants .)
    EXP             reduce using rule 72 (factor -> constants .)
    PLUS            reduce using rule 72 (factor -> constants .)
    MINUS           reduce using rule 72 (factor -> constants .)
    GREATER_THAN    reduce using rule 72 (factor -> constants .)
    GREATER_EQUAL_THAN reduce using rule 72 (factor -> constants .)
    LESS_THAN       reduce using rule 72 (factor -> constants .)
    LESS_EQUAL_THAN reduce using rule 72 (factor -> constants .)
    NOT_EQUALS      reduce using rule 72 (factor -> constants .)
    EQUALS          reduce using rule 72 (factor -> constants .)
    AND             reduce using rule 72 (factor -> constants .)
    OR              reduce using rule 72 (factor -> constants .)
    COMMA           reduce using rule 72 (factor -> constants .)
    RIGHT_PAREN     reduce using rule 72 (factor -> constants .)
    RIGHT_BRACKET   reduce using rule 72 (factor -> constants .)
    SEMI_COLON      reduce using rule 72 (factor -> constants .)


state 128

    (73) constants -> CTE_ID . addOperand
    (74) constants -> CTE_ID . LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (86) functionCall -> CTE_ID . doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub
    (107) addOperand -> .
    (127) doFuncCall -> .

    LEFT_BRACKET    shift and go to state 156
    TIMES           reduce using rule 107 (addOperand -> .)
    DIV             reduce using rule 107 (addOperand -> .)
    MOD             reduce using rule 107 (addOperand -> .)
    EXP             reduce using rule 107 (addOperand -> .)
    PLUS            reduce using rule 107 (addOperand -> .)
    MINUS           reduce using rule 107 (addOperand -> .)
    GREATER_THAN    reduce using rule 107 (addOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (addOperand -> .)
    LESS_THAN       reduce using rule 107 (addOperand -> .)
    LESS_EQUAL_THAN reduce using rule 107 (addOperand -> .)
    NOT_EQUALS      reduce using rule 107 (addOperand -> .)
    EQUALS          reduce using rule 107 (addOperand -> .)
    AND             reduce using rule 107 (addOperand -> .)
    OR              reduce using rule 107 (addOperand -> .)
    COMMA           reduce using rule 107 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 107 (addOperand -> .)
    RIGHT_BRACKET   reduce using rule 107 (addOperand -> .)
    SEMI_COLON      reduce using rule 107 (addOperand -> .)
    LEFT_PAREN      reduce using rule 127 (doFuncCall -> .)

    addOperand                     shift and go to state 155
    doFuncCall                     shift and go to state 104

state 129

    (75) constants -> CTE_INT . addConstantOperand
    (108) addConstantOperand -> .

    TIMES           reduce using rule 108 (addConstantOperand -> .)
    DIV             reduce using rule 108 (addConstantOperand -> .)
    MOD             reduce using rule 108 (addConstantOperand -> .)
    EXP             reduce using rule 108 (addConstantOperand -> .)
    PLUS            reduce using rule 108 (addConstantOperand -> .)
    MINUS           reduce using rule 108 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 108 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 108 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 108 (addConstantOperand -> .)
    EQUALS          reduce using rule 108 (addConstantOperand -> .)
    AND             reduce using rule 108 (addConstantOperand -> .)
    OR              reduce using rule 108 (addConstantOperand -> .)
    COMMA           reduce using rule 108 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 108 (addConstantOperand -> .)
    RIGHT_BRACKET   reduce using rule 108 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 108 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 157

state 130

    (76) constants -> CTE_FLOAT . addConstantOperand
    (108) addConstantOperand -> .

    TIMES           reduce using rule 108 (addConstantOperand -> .)
    DIV             reduce using rule 108 (addConstantOperand -> .)
    MOD             reduce using rule 108 (addConstantOperand -> .)
    EXP             reduce using rule 108 (addConstantOperand -> .)
    PLUS            reduce using rule 108 (addConstantOperand -> .)
    MINUS           reduce using rule 108 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 108 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 108 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 108 (addConstantOperand -> .)
    EQUALS          reduce using rule 108 (addConstantOperand -> .)
    AND             reduce using rule 108 (addConstantOperand -> .)
    OR              reduce using rule 108 (addConstantOperand -> .)
    COMMA           reduce using rule 108 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 108 (addConstantOperand -> .)
    RIGHT_BRACKET   reduce using rule 108 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 108 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 158

state 131

    (78) constants -> TRUE . addConstantBool
    (109) addConstantBool -> .

    TIMES           reduce using rule 109 (addConstantBool -> .)
    DIV             reduce using rule 109 (addConstantBool -> .)
    MOD             reduce using rule 109 (addConstantBool -> .)
    EXP             reduce using rule 109 (addConstantBool -> .)
    PLUS            reduce using rule 109 (addConstantBool -> .)
    MINUS           reduce using rule 109 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 109 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 109 (addConstantBool -> .)
    LESS_THAN       reduce using rule 109 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 109 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 109 (addConstantBool -> .)
    EQUALS          reduce using rule 109 (addConstantBool -> .)
    AND             reduce using rule 109 (addConstantBool -> .)
    OR              reduce using rule 109 (addConstantBool -> .)
    COMMA           reduce using rule 109 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 109 (addConstantBool -> .)
    RIGHT_BRACKET   reduce using rule 109 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 109 (addConstantBool -> .)

    addConstantBool                shift and go to state 159

state 132

    (79) constants -> FALSE . addConstantBool
    (109) addConstantBool -> .

    TIMES           reduce using rule 109 (addConstantBool -> .)
    DIV             reduce using rule 109 (addConstantBool -> .)
    MOD             reduce using rule 109 (addConstantBool -> .)
    EXP             reduce using rule 109 (addConstantBool -> .)
    PLUS            reduce using rule 109 (addConstantBool -> .)
    MINUS           reduce using rule 109 (addConstantBool -> .)
    GREATER_THAN    reduce using rule 109 (addConstantBool -> .)
    GREATER_EQUAL_THAN reduce using rule 109 (addConstantBool -> .)
    LESS_THAN       reduce using rule 109 (addConstantBool -> .)
    LESS_EQUAL_THAN reduce using rule 109 (addConstantBool -> .)
    NOT_EQUALS      reduce using rule 109 (addConstantBool -> .)
    EQUALS          reduce using rule 109 (addConstantBool -> .)
    AND             reduce using rule 109 (addConstantBool -> .)
    OR              reduce using rule 109 (addConstantBool -> .)
    COMMA           reduce using rule 109 (addConstantBool -> .)
    RIGHT_PAREN     reduce using rule 109 (addConstantBool -> .)
    RIGHT_BRACKET   reduce using rule 109 (addConstantBool -> .)
    SEMI_COLON      reduce using rule 109 (addConstantBool -> .)

    addConstantBool                shift and go to state 160

state 133

    (80) constants -> functionCall .

    TIMES           reduce using rule 80 (constants -> functionCall .)
    DIV             reduce using rule 80 (constants -> functionCall .)
    MOD             reduce using rule 80 (constants -> functionCall .)
    EXP             reduce using rule 80 (constants -> functionCall .)
    PLUS            reduce using rule 80 (constants -> functionCall .)
    MINUS           reduce using rule 80 (constants -> functionCall .)
    GREATER_THAN    reduce using rule 80 (constants -> functionCall .)
    GREATER_EQUAL_THAN reduce using rule 80 (constants -> functionCall .)
    LESS_THAN       reduce using rule 80 (constants -> functionCall .)
    LESS_EQUAL_THAN reduce using rule 80 (constants -> functionCall .)
    NOT_EQUALS      reduce using rule 80 (constants -> functionCall .)
    EQUALS          reduce using rule 80 (constants -> functionCall .)
    AND             reduce using rule 80 (constants -> functionCall .)
    OR              reduce using rule 80 (constants -> functionCall .)
    COMMA           reduce using rule 80 (constants -> functionCall .)
    RIGHT_PAREN     reduce using rule 80 (constants -> functionCall .)
    RIGHT_BRACKET   reduce using rule 80 (constants -> functionCall .)
    SEMI_COLON      reduce using rule 80 (constants -> functionCall .)


state 134

    (45) reading -> READ_INPUT LEFT_PAREN auxReading . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 161


state 135

    (46) auxReading -> CTE_ID . addOperand doReading multipleRead
    (107) addOperand -> .

    COMMA           reduce using rule 107 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 107 (addOperand -> .)

    addOperand                     shift and go to state 162

state 136

    (81) if -> IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody else endIF
    (121) doIF -> .

    RIGHT_PAREN     reduce using rule 121 (doIF -> .)

    doIF                           shift and go to state 163

state 137

    (77) constants -> CTE_STRING . addConstantOperand
    (108) addConstantOperand -> .

    TIMES           reduce using rule 108 (addConstantOperand -> .)
    DIV             reduce using rule 108 (addConstantOperand -> .)
    MOD             reduce using rule 108 (addConstantOperand -> .)
    EXP             reduce using rule 108 (addConstantOperand -> .)
    PLUS            reduce using rule 108 (addConstantOperand -> .)
    MINUS           reduce using rule 108 (addConstantOperand -> .)
    GREATER_THAN    reduce using rule 108 (addConstantOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    LESS_THAN       reduce using rule 108 (addConstantOperand -> .)
    LESS_EQUAL_THAN reduce using rule 108 (addConstantOperand -> .)
    NOT_EQUALS      reduce using rule 108 (addConstantOperand -> .)
    EQUALS          reduce using rule 108 (addConstantOperand -> .)
    AND             reduce using rule 108 (addConstantOperand -> .)
    OR              reduce using rule 108 (addConstantOperand -> .)
    RIGHT_PAREN     reduce using rule 108 (addConstantOperand -> .)
    RIGHT_BRACKET   reduce using rule 108 (addConstantOperand -> .)
    COMMA           reduce using rule 108 (addConstantOperand -> .)
    SEMI_COLON      reduce using rule 108 (addConstantOperand -> .)

    addConstantOperand             shift and go to state 150

state 138

    (85) while -> WHILE LEFT_PAREN addCondStart . logicExpression doWhile RIGHT_PAREN funcBody endWhile
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 164
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 139

    (93) return -> RETURN RETURN_SIGN LEFT_PAREN . auxReturn RIGHT_PAREN SEMI_COLON
    (94) auxReturn -> . logicExpression doReturn
    (95) auxReturn -> . empty
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (133) empty -> .
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    auxReturn                      shift and go to state 165
    logicExpression                shift and go to state 166
    empty                          shift and go to state 167
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 140

    (38) assignment -> CTE_ID addOperand EQUAL addOperator . logicExpression doAssign SEMI_COLON
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 168
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 141

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression . RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON

    RIGHT_BRACKET   shift and go to state 169


state 142

    (86) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments . checkParams RIGHT_PAREN doGoSub
    (129) checkParams -> .

    RIGHT_PAREN     reduce using rule 129 (checkParams -> .)

    checkParams                    shift and go to state 170

state 143

    (88) arguments -> auxArguments .

    RIGHT_PAREN     reduce using rule 88 (arguments -> auxArguments .)


state 144

    (89) arguments -> empty .

    RIGHT_PAREN     reduce using rule 89 (arguments -> empty .)


state 145

    (90) auxArguments -> logicExpression . checkType multipleArguments
    (130) checkType -> .

    COMMA           reduce using rule 130 (checkType -> .)
    RIGHT_PAREN     reduce using rule 130 (checkType -> .)

    checkType                      shift and go to state 171

state 146

    (71) factor -> LEFT_PAREN addParenthesis . logicExpression RIGHT_PAREN removeParenthesis
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 172
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 147

    (40) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 173


state 148

    (41) auxWritting -> logicExpression doWrite . multipleWrite
    (43) multipleWrite -> . COMMA auxWritting
    (44) multipleWrite -> . empty
    (133) empty -> .

    COMMA           shift and go to state 175
    RIGHT_PAREN     reduce using rule 133 (empty -> .)

    multipleWrite                  shift and go to state 174
    empty                          shift and go to state 176

state 149

    (42) auxWritting -> CTE_STRING doWriteString . multipleWrite
    (43) multipleWrite -> . COMMA auxWritting
    (44) multipleWrite -> . empty
    (133) empty -> .

    COMMA           shift and go to state 175
    RIGHT_PAREN     reduce using rule 133 (empty -> .)

    multipleWrite                  shift and go to state 177
    empty                          shift and go to state 176

state 150

    (77) constants -> CTE_STRING addConstantOperand .

    TIMES           reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    DIV             reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    MOD             reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    EXP             reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    PLUS            reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    MINUS           reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    GREATER_THAN    reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    LESS_THAN       reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    NOT_EQUALS      reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    EQUALS          reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    AND             reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    OR              reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    COMMA           reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    RIGHT_PAREN     reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    RIGHT_BRACKET   reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)
    SEMI_COLON      reduce using rule 77 (constants -> CTE_STRING addConstantOperand .)


state 151

    (49) logicExpression -> exp doLogicExpression . auxLogicExpression
    (50) auxLogicExpression -> . AND addOperator logicExpression
    (51) auxLogicExpression -> . OR addOperator logicExpression
    (52) auxLogicExpression -> . empty
    (133) empty -> .

    AND             shift and go to state 179
    OR              shift and go to state 180
    COMMA           reduce using rule 133 (empty -> .)
    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    RIGHT_BRACKET   reduce using rule 133 (empty -> .)
    SEMI_COLON      reduce using rule 133 (empty -> .)

    auxLogicExpression             shift and go to state 178
    empty                          shift and go to state 181

state 152

    (53) exp -> exp2 doCompExpression . auxExp
    (54) auxExp -> . GREATER_THAN addOperator exp
    (55) auxExp -> . GREATER_EQUAL_THAN addOperator exp
    (56) auxExp -> . LESS_THAN addOperator exp
    (57) auxExp -> . LESS_EQUAL_THAN addOperator exp
    (58) auxExp -> . NOT_EQUALS addOperator exp
    (59) auxExp -> . EQUALS addOperator exp
    (60) auxExp -> . empty
    (133) empty -> .

    GREATER_THAN    shift and go to state 183
    GREATER_EQUAL_THAN shift and go to state 184
    LESS_THAN       shift and go to state 185
    LESS_EQUAL_THAN shift and go to state 186
    NOT_EQUALS      shift and go to state 187
    EQUALS          shift and go to state 188
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    RIGHT_BRACKET   reduce using rule 133 (empty -> .)
    SEMI_COLON      reduce using rule 133 (empty -> .)

    auxExp                         shift and go to state 182
    empty                          shift and go to state 189

state 153

    (61) exp2 -> term doExpression . exp2Aux
    (62) exp2Aux -> . PLUS addOperator exp2
    (63) exp2Aux -> . MINUS addOperator exp2
    (64) exp2Aux -> . empty
    (133) empty -> .

    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    GREATER_THAN    reduce using rule 133 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 133 (empty -> .)
    LESS_THAN       reduce using rule 133 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 133 (empty -> .)
    NOT_EQUALS      reduce using rule 133 (empty -> .)
    EQUALS          reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    RIGHT_BRACKET   reduce using rule 133 (empty -> .)
    SEMI_COLON      reduce using rule 133 (empty -> .)

    exp2Aux                        shift and go to state 190
    empty                          shift and go to state 193

state 154

    (65) term -> factor doTerm . auxTerm
    (66) auxTerm -> . TIMES addOperator term
    (67) auxTerm -> . DIV addOperator term
    (68) auxTerm -> . MOD addOperator term
    (69) auxTerm -> . EXP addOperator term
    (70) auxTerm -> . empty
    (133) empty -> .

    TIMES           shift and go to state 195
    DIV             shift and go to state 196
    MOD             shift and go to state 197
    EXP             shift and go to state 198
    PLUS            reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    GREATER_THAN    reduce using rule 133 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 133 (empty -> .)
    LESS_THAN       reduce using rule 133 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 133 (empty -> .)
    NOT_EQUALS      reduce using rule 133 (empty -> .)
    EQUALS          reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    RIGHT_PAREN     reduce using rule 133 (empty -> .)
    RIGHT_BRACKET   reduce using rule 133 (empty -> .)
    SEMI_COLON      reduce using rule 133 (empty -> .)

    auxTerm                        shift and go to state 194
    empty                          shift and go to state 199

state 155

    (73) constants -> CTE_ID addOperand .

    TIMES           reduce using rule 73 (constants -> CTE_ID addOperand .)
    DIV             reduce using rule 73 (constants -> CTE_ID addOperand .)
    MOD             reduce using rule 73 (constants -> CTE_ID addOperand .)
    EXP             reduce using rule 73 (constants -> CTE_ID addOperand .)
    PLUS            reduce using rule 73 (constants -> CTE_ID addOperand .)
    MINUS           reduce using rule 73 (constants -> CTE_ID addOperand .)
    GREATER_THAN    reduce using rule 73 (constants -> CTE_ID addOperand .)
    GREATER_EQUAL_THAN reduce using rule 73 (constants -> CTE_ID addOperand .)
    LESS_THAN       reduce using rule 73 (constants -> CTE_ID addOperand .)
    LESS_EQUAL_THAN reduce using rule 73 (constants -> CTE_ID addOperand .)
    NOT_EQUALS      reduce using rule 73 (constants -> CTE_ID addOperand .)
    EQUALS          reduce using rule 73 (constants -> CTE_ID addOperand .)
    AND             reduce using rule 73 (constants -> CTE_ID addOperand .)
    OR              reduce using rule 73 (constants -> CTE_ID addOperand .)
    COMMA           reduce using rule 73 (constants -> CTE_ID addOperand .)
    RIGHT_PAREN     reduce using rule 73 (constants -> CTE_ID addOperand .)
    RIGHT_BRACKET   reduce using rule 73 (constants -> CTE_ID addOperand .)
    SEMI_COLON      reduce using rule 73 (constants -> CTE_ID addOperand .)


state 156

    (74) constants -> CTE_ID LEFT_BRACKET . addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (111) addParenthesis -> .

    LEFT_PAREN      reduce using rule 111 (addParenthesis -> .)
    CTE_ID          reduce using rule 111 (addParenthesis -> .)
    CTE_INT         reduce using rule 111 (addParenthesis -> .)
    CTE_FLOAT       reduce using rule 111 (addParenthesis -> .)
    CTE_STRING      reduce using rule 111 (addParenthesis -> .)
    TRUE            reduce using rule 111 (addParenthesis -> .)
    FALSE           reduce using rule 111 (addParenthesis -> .)

    addParenthesis                 shift and go to state 200

state 157

    (75) constants -> CTE_INT addConstantOperand .

    TIMES           reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    DIV             reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    MOD             reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    EXP             reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    PLUS            reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    MINUS           reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    GREATER_THAN    reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    LESS_THAN       reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    NOT_EQUALS      reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    EQUALS          reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    AND             reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    OR              reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    COMMA           reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    RIGHT_BRACKET   reduce using rule 75 (constants -> CTE_INT addConstantOperand .)
    SEMI_COLON      reduce using rule 75 (constants -> CTE_INT addConstantOperand .)


state 158

    (76) constants -> CTE_FLOAT addConstantOperand .

    TIMES           reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    DIV             reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    MOD             reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    EXP             reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    PLUS            reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    MINUS           reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_THAN    reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    GREATER_EQUAL_THAN reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_THAN       reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    LESS_EQUAL_THAN reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    NOT_EQUALS      reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    EQUALS          reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    AND             reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    OR              reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    COMMA           reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    RIGHT_PAREN     reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    RIGHT_BRACKET   reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)
    SEMI_COLON      reduce using rule 76 (constants -> CTE_FLOAT addConstantOperand .)


state 159

    (78) constants -> TRUE addConstantBool .

    TIMES           reduce using rule 78 (constants -> TRUE addConstantBool .)
    DIV             reduce using rule 78 (constants -> TRUE addConstantBool .)
    MOD             reduce using rule 78 (constants -> TRUE addConstantBool .)
    EXP             reduce using rule 78 (constants -> TRUE addConstantBool .)
    PLUS            reduce using rule 78 (constants -> TRUE addConstantBool .)
    MINUS           reduce using rule 78 (constants -> TRUE addConstantBool .)
    GREATER_THAN    reduce using rule 78 (constants -> TRUE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 78 (constants -> TRUE addConstantBool .)
    LESS_THAN       reduce using rule 78 (constants -> TRUE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 78 (constants -> TRUE addConstantBool .)
    NOT_EQUALS      reduce using rule 78 (constants -> TRUE addConstantBool .)
    EQUALS          reduce using rule 78 (constants -> TRUE addConstantBool .)
    AND             reduce using rule 78 (constants -> TRUE addConstantBool .)
    OR              reduce using rule 78 (constants -> TRUE addConstantBool .)
    COMMA           reduce using rule 78 (constants -> TRUE addConstantBool .)
    RIGHT_PAREN     reduce using rule 78 (constants -> TRUE addConstantBool .)
    RIGHT_BRACKET   reduce using rule 78 (constants -> TRUE addConstantBool .)
    SEMI_COLON      reduce using rule 78 (constants -> TRUE addConstantBool .)


state 160

    (79) constants -> FALSE addConstantBool .

    TIMES           reduce using rule 79 (constants -> FALSE addConstantBool .)
    DIV             reduce using rule 79 (constants -> FALSE addConstantBool .)
    MOD             reduce using rule 79 (constants -> FALSE addConstantBool .)
    EXP             reduce using rule 79 (constants -> FALSE addConstantBool .)
    PLUS            reduce using rule 79 (constants -> FALSE addConstantBool .)
    MINUS           reduce using rule 79 (constants -> FALSE addConstantBool .)
    GREATER_THAN    reduce using rule 79 (constants -> FALSE addConstantBool .)
    GREATER_EQUAL_THAN reduce using rule 79 (constants -> FALSE addConstantBool .)
    LESS_THAN       reduce using rule 79 (constants -> FALSE addConstantBool .)
    LESS_EQUAL_THAN reduce using rule 79 (constants -> FALSE addConstantBool .)
    NOT_EQUALS      reduce using rule 79 (constants -> FALSE addConstantBool .)
    EQUALS          reduce using rule 79 (constants -> FALSE addConstantBool .)
    AND             reduce using rule 79 (constants -> FALSE addConstantBool .)
    OR              reduce using rule 79 (constants -> FALSE addConstantBool .)
    COMMA           reduce using rule 79 (constants -> FALSE addConstantBool .)
    RIGHT_PAREN     reduce using rule 79 (constants -> FALSE addConstantBool .)
    RIGHT_BRACKET   reduce using rule 79 (constants -> FALSE addConstantBool .)
    SEMI_COLON      reduce using rule 79 (constants -> FALSE addConstantBool .)


state 161

    (45) reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 201


state 162

    (46) auxReading -> CTE_ID addOperand . doReading multipleRead
    (120) doReading -> .

    COMMA           reduce using rule 120 (doReading -> .)
    RIGHT_PAREN     reduce using rule 120 (doReading -> .)

    doReading                      shift and go to state 202

state 163

    (81) if -> IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody else endIF

    RIGHT_PAREN     shift and go to state 203


state 164

    (85) while -> WHILE LEFT_PAREN addCondStart logicExpression . doWhile RIGHT_PAREN funcBody endWhile
    (124) doWhile -> .

    RIGHT_PAREN     reduce using rule 124 (doWhile -> .)

    doWhile                        shift and go to state 204

state 165

    (93) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN     shift and go to state 205


state 166

    (94) auxReturn -> logicExpression . doReturn
    (131) doReturn -> .

    RIGHT_PAREN     reduce using rule 131 (doReturn -> .)

    doReturn                       shift and go to state 206

state 167

    (95) auxReturn -> empty .

    RIGHT_PAREN     reduce using rule 95 (auxReturn -> empty .)


state 168

    (38) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression . doAssign SEMI_COLON
    (117) doAssign -> .

    SEMI_COLON      reduce using rule 117 (doAssign -> .)

    doAssign                       shift and go to state 207

state 169

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET . addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (107) addOperand -> .

    EQUAL           reduce using rule 107 (addOperand -> .)

    addOperand                     shift and go to state 208

state 170

    (86) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams . RIGHT_PAREN doGoSub

    RIGHT_PAREN     shift and go to state 209


state 171

    (90) auxArguments -> logicExpression checkType . multipleArguments
    (91) multipleArguments -> . COMMA auxArguments
    (92) multipleArguments -> . empty
    (133) empty -> .

    COMMA           shift and go to state 211
    RIGHT_PAREN     reduce using rule 133 (empty -> .)

    multipleArguments              shift and go to state 210
    empty                          shift and go to state 212

state 172

    (71) factor -> LEFT_PAREN addParenthesis logicExpression . RIGHT_PAREN removeParenthesis

    RIGHT_PAREN     shift and go to state 213


state 173

    (40) writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON .)


state 174

    (41) auxWritting -> logicExpression doWrite multipleWrite .

    RIGHT_PAREN     reduce using rule 41 (auxWritting -> logicExpression doWrite multipleWrite .)


state 175

    (43) multipleWrite -> COMMA . auxWritting
    (41) auxWritting -> . logicExpression doWrite multipleWrite
    (42) auxWritting -> . CTE_STRING doWriteString multipleWrite
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    CTE_STRING      shift and go to state 122
    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    auxWritting                    shift and go to state 214
    logicExpression                shift and go to state 121
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 176

    (44) multipleWrite -> empty .

    RIGHT_PAREN     reduce using rule 44 (multipleWrite -> empty .)


state 177

    (42) auxWritting -> CTE_STRING doWriteString multipleWrite .

    RIGHT_PAREN     reduce using rule 42 (auxWritting -> CTE_STRING doWriteString multipleWrite .)


state 178

    (49) logicExpression -> exp doLogicExpression auxLogicExpression .

    COMMA           reduce using rule 49 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    RIGHT_PAREN     reduce using rule 49 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    RIGHT_BRACKET   reduce using rule 49 (logicExpression -> exp doLogicExpression auxLogicExpression .)
    SEMI_COLON      reduce using rule 49 (logicExpression -> exp doLogicExpression auxLogicExpression .)


state 179

    (50) auxLogicExpression -> AND . addOperator logicExpression
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 215

state 180

    (51) auxLogicExpression -> OR . addOperator logicExpression
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 216

state 181

    (52) auxLogicExpression -> empty .

    COMMA           reduce using rule 52 (auxLogicExpression -> empty .)
    RIGHT_PAREN     reduce using rule 52 (auxLogicExpression -> empty .)
    RIGHT_BRACKET   reduce using rule 52 (auxLogicExpression -> empty .)
    SEMI_COLON      reduce using rule 52 (auxLogicExpression -> empty .)


state 182

    (53) exp -> exp2 doCompExpression auxExp .

    AND             reduce using rule 53 (exp -> exp2 doCompExpression auxExp .)
    OR              reduce using rule 53 (exp -> exp2 doCompExpression auxExp .)
    COMMA           reduce using rule 53 (exp -> exp2 doCompExpression auxExp .)
    RIGHT_PAREN     reduce using rule 53 (exp -> exp2 doCompExpression auxExp .)
    RIGHT_BRACKET   reduce using rule 53 (exp -> exp2 doCompExpression auxExp .)
    SEMI_COLON      reduce using rule 53 (exp -> exp2 doCompExpression auxExp .)


state 183

    (54) auxExp -> GREATER_THAN . addOperator exp
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 217

state 184

    (55) auxExp -> GREATER_EQUAL_THAN . addOperator exp
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 218

state 185

    (56) auxExp -> LESS_THAN . addOperator exp
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 219

state 186

    (57) auxExp -> LESS_EQUAL_THAN . addOperator exp
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 220

state 187

    (58) auxExp -> NOT_EQUALS . addOperator exp
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 221

state 188

    (59) auxExp -> EQUALS . addOperator exp
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 222

state 189

    (60) auxExp -> empty .

    AND             reduce using rule 60 (auxExp -> empty .)
    OR              reduce using rule 60 (auxExp -> empty .)
    COMMA           reduce using rule 60 (auxExp -> empty .)
    RIGHT_PAREN     reduce using rule 60 (auxExp -> empty .)
    RIGHT_BRACKET   reduce using rule 60 (auxExp -> empty .)
    SEMI_COLON      reduce using rule 60 (auxExp -> empty .)


state 190

    (61) exp2 -> term doExpression exp2Aux .

    GREATER_THAN    reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    GREATER_EQUAL_THAN reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    LESS_THAN       reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    LESS_EQUAL_THAN reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    NOT_EQUALS      reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    EQUALS          reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    AND             reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    OR              reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    COMMA           reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    RIGHT_PAREN     reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    RIGHT_BRACKET   reduce using rule 61 (exp2 -> term doExpression exp2Aux .)
    SEMI_COLON      reduce using rule 61 (exp2 -> term doExpression exp2Aux .)


state 191

    (62) exp2Aux -> PLUS . addOperator exp2
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 223

state 192

    (63) exp2Aux -> MINUS . addOperator exp2
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 224

state 193

    (64) exp2Aux -> empty .

    GREATER_THAN    reduce using rule 64 (exp2Aux -> empty .)
    GREATER_EQUAL_THAN reduce using rule 64 (exp2Aux -> empty .)
    LESS_THAN       reduce using rule 64 (exp2Aux -> empty .)
    LESS_EQUAL_THAN reduce using rule 64 (exp2Aux -> empty .)
    NOT_EQUALS      reduce using rule 64 (exp2Aux -> empty .)
    EQUALS          reduce using rule 64 (exp2Aux -> empty .)
    AND             reduce using rule 64 (exp2Aux -> empty .)
    OR              reduce using rule 64 (exp2Aux -> empty .)
    COMMA           reduce using rule 64 (exp2Aux -> empty .)
    RIGHT_PAREN     reduce using rule 64 (exp2Aux -> empty .)
    RIGHT_BRACKET   reduce using rule 64 (exp2Aux -> empty .)
    SEMI_COLON      reduce using rule 64 (exp2Aux -> empty .)


state 194

    (65) term -> factor doTerm auxTerm .

    PLUS            reduce using rule 65 (term -> factor doTerm auxTerm .)
    MINUS           reduce using rule 65 (term -> factor doTerm auxTerm .)
    GREATER_THAN    reduce using rule 65 (term -> factor doTerm auxTerm .)
    GREATER_EQUAL_THAN reduce using rule 65 (term -> factor doTerm auxTerm .)
    LESS_THAN       reduce using rule 65 (term -> factor doTerm auxTerm .)
    LESS_EQUAL_THAN reduce using rule 65 (term -> factor doTerm auxTerm .)
    NOT_EQUALS      reduce using rule 65 (term -> factor doTerm auxTerm .)
    EQUALS          reduce using rule 65 (term -> factor doTerm auxTerm .)
    AND             reduce using rule 65 (term -> factor doTerm auxTerm .)
    OR              reduce using rule 65 (term -> factor doTerm auxTerm .)
    COMMA           reduce using rule 65 (term -> factor doTerm auxTerm .)
    RIGHT_PAREN     reduce using rule 65 (term -> factor doTerm auxTerm .)
    RIGHT_BRACKET   reduce using rule 65 (term -> factor doTerm auxTerm .)
    SEMI_COLON      reduce using rule 65 (term -> factor doTerm auxTerm .)


state 195

    (66) auxTerm -> TIMES . addOperator term
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 225

state 196

    (67) auxTerm -> DIV . addOperator term
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 226

state 197

    (68) auxTerm -> MOD . addOperator term
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 227

state 198

    (69) auxTerm -> EXP . addOperator term
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 228

state 199

    (70) auxTerm -> empty .

    PLUS            reduce using rule 70 (auxTerm -> empty .)
    MINUS           reduce using rule 70 (auxTerm -> empty .)
    GREATER_THAN    reduce using rule 70 (auxTerm -> empty .)
    GREATER_EQUAL_THAN reduce using rule 70 (auxTerm -> empty .)
    LESS_THAN       reduce using rule 70 (auxTerm -> empty .)
    LESS_EQUAL_THAN reduce using rule 70 (auxTerm -> empty .)
    NOT_EQUALS      reduce using rule 70 (auxTerm -> empty .)
    EQUALS          reduce using rule 70 (auxTerm -> empty .)
    AND             reduce using rule 70 (auxTerm -> empty .)
    OR              reduce using rule 70 (auxTerm -> empty .)
    COMMA           reduce using rule 70 (auxTerm -> empty .)
    RIGHT_PAREN     reduce using rule 70 (auxTerm -> empty .)
    RIGHT_BRACKET   reduce using rule 70 (auxTerm -> empty .)
    SEMI_COLON      reduce using rule 70 (auxTerm -> empty .)


state 200

    (74) constants -> CTE_ID LEFT_BRACKET addParenthesis . logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 229
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 201

    (45) reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 45 (reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON .)


state 202

    (46) auxReading -> CTE_ID addOperand doReading . multipleRead
    (47) multipleRead -> . COMMA auxReading
    (48) multipleRead -> . empty
    (133) empty -> .

    COMMA           shift and go to state 231
    RIGHT_PAREN     reduce using rule 133 (empty -> .)

    multipleRead                   shift and go to state 230
    empty                          shift and go to state 232

state 203

    (81) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody else endIF
    (22) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 233

state 204

    (85) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile . RIGHT_PAREN funcBody endWhile

    RIGHT_PAREN     shift and go to state 234


state 205

    (93) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 235


state 206

    (94) auxReturn -> logicExpression doReturn .

    RIGHT_PAREN     reduce using rule 94 (auxReturn -> logicExpression doReturn .)


state 207

    (38) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign . SEMI_COLON

    SEMI_COLON      shift and go to state 236


state 208

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand . removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON
    (112) removeParenthesis -> .

    EQUAL           reduce using rule 112 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 237

state 209

    (86) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN . doGoSub
    (132) doGoSub -> .

    SEMI_COLON      reduce using rule 132 (doGoSub -> .)
    TIMES           reduce using rule 132 (doGoSub -> .)
    DIV             reduce using rule 132 (doGoSub -> .)
    MOD             reduce using rule 132 (doGoSub -> .)
    EXP             reduce using rule 132 (doGoSub -> .)
    PLUS            reduce using rule 132 (doGoSub -> .)
    MINUS           reduce using rule 132 (doGoSub -> .)
    GREATER_THAN    reduce using rule 132 (doGoSub -> .)
    GREATER_EQUAL_THAN reduce using rule 132 (doGoSub -> .)
    LESS_THAN       reduce using rule 132 (doGoSub -> .)
    LESS_EQUAL_THAN reduce using rule 132 (doGoSub -> .)
    NOT_EQUALS      reduce using rule 132 (doGoSub -> .)
    EQUALS          reduce using rule 132 (doGoSub -> .)
    AND             reduce using rule 132 (doGoSub -> .)
    OR              reduce using rule 132 (doGoSub -> .)
    COMMA           reduce using rule 132 (doGoSub -> .)
    RIGHT_PAREN     reduce using rule 132 (doGoSub -> .)
    RIGHT_BRACKET   reduce using rule 132 (doGoSub -> .)

    doGoSub                        shift and go to state 238

state 210

    (90) auxArguments -> logicExpression checkType multipleArguments .

    RIGHT_PAREN     reduce using rule 90 (auxArguments -> logicExpression checkType multipleArguments .)


state 211

    (91) multipleArguments -> COMMA . auxArguments
    (90) auxArguments -> . logicExpression checkType multipleArguments
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    auxArguments                   shift and go to state 239
    logicExpression                shift and go to state 145
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 212

    (92) multipleArguments -> empty .

    RIGHT_PAREN     reduce using rule 92 (multipleArguments -> empty .)


state 213

    (71) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN . removeParenthesis
    (112) removeParenthesis -> .

    TIMES           reduce using rule 112 (removeParenthesis -> .)
    DIV             reduce using rule 112 (removeParenthesis -> .)
    MOD             reduce using rule 112 (removeParenthesis -> .)
    EXP             reduce using rule 112 (removeParenthesis -> .)
    PLUS            reduce using rule 112 (removeParenthesis -> .)
    MINUS           reduce using rule 112 (removeParenthesis -> .)
    GREATER_THAN    reduce using rule 112 (removeParenthesis -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (removeParenthesis -> .)
    LESS_THAN       reduce using rule 112 (removeParenthesis -> .)
    LESS_EQUAL_THAN reduce using rule 112 (removeParenthesis -> .)
    NOT_EQUALS      reduce using rule 112 (removeParenthesis -> .)
    EQUALS          reduce using rule 112 (removeParenthesis -> .)
    AND             reduce using rule 112 (removeParenthesis -> .)
    OR              reduce using rule 112 (removeParenthesis -> .)
    COMMA           reduce using rule 112 (removeParenthesis -> .)
    RIGHT_PAREN     reduce using rule 112 (removeParenthesis -> .)
    RIGHT_BRACKET   reduce using rule 112 (removeParenthesis -> .)
    SEMI_COLON      reduce using rule 112 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 240

state 214

    (43) multipleWrite -> COMMA auxWritting .

    RIGHT_PAREN     reduce using rule 43 (multipleWrite -> COMMA auxWritting .)


state 215

    (50) auxLogicExpression -> AND addOperator . logicExpression
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 241
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 216

    (51) auxLogicExpression -> OR addOperator . logicExpression
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 242
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 217

    (54) auxExp -> GREATER_THAN addOperator . exp
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp                            shift and go to state 243
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 218

    (55) auxExp -> GREATER_EQUAL_THAN addOperator . exp
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp                            shift and go to state 244
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 219

    (56) auxExp -> LESS_THAN addOperator . exp
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp                            shift and go to state 245
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 220

    (57) auxExp -> LESS_EQUAL_THAN addOperator . exp
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp                            shift and go to state 246
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 221

    (58) auxExp -> NOT_EQUALS addOperator . exp
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp                            shift and go to state 247
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 222

    (59) auxExp -> EQUALS addOperator . exp
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp                            shift and go to state 248
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 223

    (62) exp2Aux -> PLUS addOperator . exp2
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp2                           shift and go to state 249
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 224

    (63) exp2Aux -> MINUS addOperator . exp2
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    exp2                           shift and go to state 250
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 225

    (66) auxTerm -> TIMES addOperator . term
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    term                           shift and go to state 251
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 226

    (67) auxTerm -> DIV addOperator . term
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    term                           shift and go to state 252
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 227

    (68) auxTerm -> MOD addOperator . term
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    term                           shift and go to state 253
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 228

    (69) auxTerm -> EXP addOperator . term
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    term                           shift and go to state 254
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 229

    (74) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression . RIGHT_BRACKET addOperand removeParenthesis

    RIGHT_BRACKET   shift and go to state 255


state 230

    (46) auxReading -> CTE_ID addOperand doReading multipleRead .

    RIGHT_PAREN     reduce using rule 46 (auxReading -> CTE_ID addOperand doReading multipleRead .)


state 231

    (47) multipleRead -> COMMA . auxReading
    (46) auxReading -> . CTE_ID addOperand doReading multipleRead

    CTE_ID          shift and go to state 135

    auxReading                     shift and go to state 256

state 232

    (48) multipleRead -> empty .

    RIGHT_PAREN     reduce using rule 48 (multipleRead -> empty .)


state 233

    (81) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . else endIF
    (82) else -> . ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (83) else -> . ELSE doElse funcBody
    (84) else -> . empty
    (133) empty -> .

    ELSE            shift and go to state 258
    VAR             reduce using rule 133 (empty -> .)
    CTE_ID          reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    READ_INPUT      reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 133 (empty -> .)

    else                           shift and go to state 257
    empty                          shift and go to state 259

state 234

    (85) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN . funcBody endWhile
    (22) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 260

state 235

    (93) return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .

    VAR             reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    CTE_ID          reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    PRINT           reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    READ_INPUT      reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    IF              reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    WHILE           reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RETURN          reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 93 (return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON .)


state 236

    (38) assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .

    VAR             reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CTE_ID          reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    PRINT           reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    READ_INPUT      reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    IF              reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    WHILE           reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RETURN          reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON .)


state 237

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis . EQUAL addOperator logicExpression doAssign SEMI_COLON

    EQUAL           shift and go to state 261


state 238

    (86) functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .

    SEMI_COLON      reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    TIMES           reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    DIV             reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    MOD             reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    EXP             reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    PLUS            reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    MINUS           reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    GREATER_THAN    reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    GREATER_EQUAL_THAN reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    LESS_THAN       reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    LESS_EQUAL_THAN reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    NOT_EQUALS      reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    EQUALS          reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    AND             reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    OR              reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    COMMA           reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    RIGHT_PAREN     reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)
    RIGHT_BRACKET   reduce using rule 86 (functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub .)


state 239

    (91) multipleArguments -> COMMA auxArguments .

    RIGHT_PAREN     reduce using rule 91 (multipleArguments -> COMMA auxArguments .)


state 240

    (71) factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .

    TIMES           reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    DIV             reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MOD             reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EXP             reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    PLUS            reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    MINUS           reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_THAN    reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    GREATER_EQUAL_THAN reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_THAN       reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    LESS_EQUAL_THAN reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    NOT_EQUALS      reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    EQUALS          reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    AND             reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    OR              reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    COMMA           reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    RIGHT_PAREN     reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    RIGHT_BRACKET   reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)
    SEMI_COLON      reduce using rule 71 (factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis .)


state 241

    (50) auxLogicExpression -> AND addOperator logicExpression .

    COMMA           reduce using rule 50 (auxLogicExpression -> AND addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 50 (auxLogicExpression -> AND addOperator logicExpression .)
    RIGHT_BRACKET   reduce using rule 50 (auxLogicExpression -> AND addOperator logicExpression .)
    SEMI_COLON      reduce using rule 50 (auxLogicExpression -> AND addOperator logicExpression .)


state 242

    (51) auxLogicExpression -> OR addOperator logicExpression .

    COMMA           reduce using rule 51 (auxLogicExpression -> OR addOperator logicExpression .)
    RIGHT_PAREN     reduce using rule 51 (auxLogicExpression -> OR addOperator logicExpression .)
    RIGHT_BRACKET   reduce using rule 51 (auxLogicExpression -> OR addOperator logicExpression .)
    SEMI_COLON      reduce using rule 51 (auxLogicExpression -> OR addOperator logicExpression .)


state 243

    (54) auxExp -> GREATER_THAN addOperator exp .

    AND             reduce using rule 54 (auxExp -> GREATER_THAN addOperator exp .)
    OR              reduce using rule 54 (auxExp -> GREATER_THAN addOperator exp .)
    COMMA           reduce using rule 54 (auxExp -> GREATER_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 54 (auxExp -> GREATER_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 54 (auxExp -> GREATER_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 54 (auxExp -> GREATER_THAN addOperator exp .)


state 244

    (55) auxExp -> GREATER_EQUAL_THAN addOperator exp .

    AND             reduce using rule 55 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 55 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 55 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 55 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 55 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 55 (auxExp -> GREATER_EQUAL_THAN addOperator exp .)


state 245

    (56) auxExp -> LESS_THAN addOperator exp .

    AND             reduce using rule 56 (auxExp -> LESS_THAN addOperator exp .)
    OR              reduce using rule 56 (auxExp -> LESS_THAN addOperator exp .)
    COMMA           reduce using rule 56 (auxExp -> LESS_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 56 (auxExp -> LESS_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 56 (auxExp -> LESS_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 56 (auxExp -> LESS_THAN addOperator exp .)


state 246

    (57) auxExp -> LESS_EQUAL_THAN addOperator exp .

    AND             reduce using rule 57 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    OR              reduce using rule 57 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    COMMA           reduce using rule 57 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    RIGHT_PAREN     reduce using rule 57 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    RIGHT_BRACKET   reduce using rule 57 (auxExp -> LESS_EQUAL_THAN addOperator exp .)
    SEMI_COLON      reduce using rule 57 (auxExp -> LESS_EQUAL_THAN addOperator exp .)


state 247

    (58) auxExp -> NOT_EQUALS addOperator exp .

    AND             reduce using rule 58 (auxExp -> NOT_EQUALS addOperator exp .)
    OR              reduce using rule 58 (auxExp -> NOT_EQUALS addOperator exp .)
    COMMA           reduce using rule 58 (auxExp -> NOT_EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 58 (auxExp -> NOT_EQUALS addOperator exp .)
    RIGHT_BRACKET   reduce using rule 58 (auxExp -> NOT_EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 58 (auxExp -> NOT_EQUALS addOperator exp .)


state 248

    (59) auxExp -> EQUALS addOperator exp .

    AND             reduce using rule 59 (auxExp -> EQUALS addOperator exp .)
    OR              reduce using rule 59 (auxExp -> EQUALS addOperator exp .)
    COMMA           reduce using rule 59 (auxExp -> EQUALS addOperator exp .)
    RIGHT_PAREN     reduce using rule 59 (auxExp -> EQUALS addOperator exp .)
    RIGHT_BRACKET   reduce using rule 59 (auxExp -> EQUALS addOperator exp .)
    SEMI_COLON      reduce using rule 59 (auxExp -> EQUALS addOperator exp .)


state 249

    (62) exp2Aux -> PLUS addOperator exp2 .

    GREATER_THAN    reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_THAN       reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    EQUALS          reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    AND             reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    OR              reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    COMMA           reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    RIGHT_BRACKET   reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 62 (exp2Aux -> PLUS addOperator exp2 .)


state 250

    (63) exp2Aux -> MINUS addOperator exp2 .

    GREATER_THAN    reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    GREATER_EQUAL_THAN reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_THAN       reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    LESS_EQUAL_THAN reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    NOT_EQUALS      reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    EQUALS          reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    AND             reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    OR              reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    COMMA           reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    RIGHT_PAREN     reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    RIGHT_BRACKET   reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)
    SEMI_COLON      reduce using rule 63 (exp2Aux -> MINUS addOperator exp2 .)


state 251

    (66) auxTerm -> TIMES addOperator term .

    PLUS            reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    MINUS           reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    GREATER_THAN    reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    LESS_THAN       reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    LESS_EQUAL_THAN reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    NOT_EQUALS      reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    EQUALS          reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    AND             reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    OR              reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    COMMA           reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    RIGHT_PAREN     reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    RIGHT_BRACKET   reduce using rule 66 (auxTerm -> TIMES addOperator term .)
    SEMI_COLON      reduce using rule 66 (auxTerm -> TIMES addOperator term .)


state 252

    (67) auxTerm -> DIV addOperator term .

    PLUS            reduce using rule 67 (auxTerm -> DIV addOperator term .)
    MINUS           reduce using rule 67 (auxTerm -> DIV addOperator term .)
    GREATER_THAN    reduce using rule 67 (auxTerm -> DIV addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 67 (auxTerm -> DIV addOperator term .)
    LESS_THAN       reduce using rule 67 (auxTerm -> DIV addOperator term .)
    LESS_EQUAL_THAN reduce using rule 67 (auxTerm -> DIV addOperator term .)
    NOT_EQUALS      reduce using rule 67 (auxTerm -> DIV addOperator term .)
    EQUALS          reduce using rule 67 (auxTerm -> DIV addOperator term .)
    AND             reduce using rule 67 (auxTerm -> DIV addOperator term .)
    OR              reduce using rule 67 (auxTerm -> DIV addOperator term .)
    COMMA           reduce using rule 67 (auxTerm -> DIV addOperator term .)
    RIGHT_PAREN     reduce using rule 67 (auxTerm -> DIV addOperator term .)
    RIGHT_BRACKET   reduce using rule 67 (auxTerm -> DIV addOperator term .)
    SEMI_COLON      reduce using rule 67 (auxTerm -> DIV addOperator term .)


state 253

    (68) auxTerm -> MOD addOperator term .

    PLUS            reduce using rule 68 (auxTerm -> MOD addOperator term .)
    MINUS           reduce using rule 68 (auxTerm -> MOD addOperator term .)
    GREATER_THAN    reduce using rule 68 (auxTerm -> MOD addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 68 (auxTerm -> MOD addOperator term .)
    LESS_THAN       reduce using rule 68 (auxTerm -> MOD addOperator term .)
    LESS_EQUAL_THAN reduce using rule 68 (auxTerm -> MOD addOperator term .)
    NOT_EQUALS      reduce using rule 68 (auxTerm -> MOD addOperator term .)
    EQUALS          reduce using rule 68 (auxTerm -> MOD addOperator term .)
    AND             reduce using rule 68 (auxTerm -> MOD addOperator term .)
    OR              reduce using rule 68 (auxTerm -> MOD addOperator term .)
    COMMA           reduce using rule 68 (auxTerm -> MOD addOperator term .)
    RIGHT_PAREN     reduce using rule 68 (auxTerm -> MOD addOperator term .)
    RIGHT_BRACKET   reduce using rule 68 (auxTerm -> MOD addOperator term .)
    SEMI_COLON      reduce using rule 68 (auxTerm -> MOD addOperator term .)


state 254

    (69) auxTerm -> EXP addOperator term .

    PLUS            reduce using rule 69 (auxTerm -> EXP addOperator term .)
    MINUS           reduce using rule 69 (auxTerm -> EXP addOperator term .)
    GREATER_THAN    reduce using rule 69 (auxTerm -> EXP addOperator term .)
    GREATER_EQUAL_THAN reduce using rule 69 (auxTerm -> EXP addOperator term .)
    LESS_THAN       reduce using rule 69 (auxTerm -> EXP addOperator term .)
    LESS_EQUAL_THAN reduce using rule 69 (auxTerm -> EXP addOperator term .)
    NOT_EQUALS      reduce using rule 69 (auxTerm -> EXP addOperator term .)
    EQUALS          reduce using rule 69 (auxTerm -> EXP addOperator term .)
    AND             reduce using rule 69 (auxTerm -> EXP addOperator term .)
    OR              reduce using rule 69 (auxTerm -> EXP addOperator term .)
    COMMA           reduce using rule 69 (auxTerm -> EXP addOperator term .)
    RIGHT_PAREN     reduce using rule 69 (auxTerm -> EXP addOperator term .)
    RIGHT_BRACKET   reduce using rule 69 (auxTerm -> EXP addOperator term .)
    SEMI_COLON      reduce using rule 69 (auxTerm -> EXP addOperator term .)


state 255

    (74) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET . addOperand removeParenthesis
    (107) addOperand -> .

    TIMES           reduce using rule 107 (addOperand -> .)
    DIV             reduce using rule 107 (addOperand -> .)
    MOD             reduce using rule 107 (addOperand -> .)
    EXP             reduce using rule 107 (addOperand -> .)
    PLUS            reduce using rule 107 (addOperand -> .)
    MINUS           reduce using rule 107 (addOperand -> .)
    GREATER_THAN    reduce using rule 107 (addOperand -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (addOperand -> .)
    LESS_THAN       reduce using rule 107 (addOperand -> .)
    LESS_EQUAL_THAN reduce using rule 107 (addOperand -> .)
    NOT_EQUALS      reduce using rule 107 (addOperand -> .)
    EQUALS          reduce using rule 107 (addOperand -> .)
    AND             reduce using rule 107 (addOperand -> .)
    OR              reduce using rule 107 (addOperand -> .)
    COMMA           reduce using rule 107 (addOperand -> .)
    RIGHT_PAREN     reduce using rule 107 (addOperand -> .)
    RIGHT_BRACKET   reduce using rule 107 (addOperand -> .)
    SEMI_COLON      reduce using rule 107 (addOperand -> .)

    addOperand                     shift and go to state 262

state 256

    (47) multipleRead -> COMMA auxReading .

    RIGHT_PAREN     reduce using rule 47 (multipleRead -> COMMA auxReading .)


state 257

    (81) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else . endIF
    (122) endIF -> .

    VAR             reduce using rule 122 (endIF -> .)
    CTE_ID          reduce using rule 122 (endIF -> .)
    PRINT           reduce using rule 122 (endIF -> .)
    READ_INPUT      reduce using rule 122 (endIF -> .)
    IF              reduce using rule 122 (endIF -> .)
    WHILE           reduce using rule 122 (endIF -> .)
    RETURN          reduce using rule 122 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 122 (endIF -> .)

    endIF                          shift and go to state 263

state 258

    (82) else -> ELSE . doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (83) else -> ELSE . doElse funcBody
    (123) doElse -> .

    IF              reduce using rule 123 (doElse -> .)
    LEFT_CURLY_BRACKET reduce using rule 123 (doElse -> .)

    doElse                         shift and go to state 264

state 259

    (84) else -> empty .

    VAR             reduce using rule 84 (else -> empty .)
    CTE_ID          reduce using rule 84 (else -> empty .)
    PRINT           reduce using rule 84 (else -> empty .)
    READ_INPUT      reduce using rule 84 (else -> empty .)
    IF              reduce using rule 84 (else -> empty .)
    WHILE           reduce using rule 84 (else -> empty .)
    RETURN          reduce using rule 84 (else -> empty .)
    RIGHT_CURLY_BRACKET reduce using rule 84 (else -> empty .)


state 260

    (85) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody . endWhile
    (125) endWhile -> .

    VAR             reduce using rule 125 (endWhile -> .)
    CTE_ID          reduce using rule 125 (endWhile -> .)
    PRINT           reduce using rule 125 (endWhile -> .)
    READ_INPUT      reduce using rule 125 (endWhile -> .)
    IF              reduce using rule 125 (endWhile -> .)
    WHILE           reduce using rule 125 (endWhile -> .)
    RETURN          reduce using rule 125 (endWhile -> .)
    RIGHT_CURLY_BRACKET reduce using rule 125 (endWhile -> .)

    endWhile                       shift and go to state 265

state 261

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL . addOperator logicExpression doAssign SEMI_COLON
    (110) addOperator -> .

    LEFT_PAREN      reduce using rule 110 (addOperator -> .)
    CTE_ID          reduce using rule 110 (addOperator -> .)
    CTE_INT         reduce using rule 110 (addOperator -> .)
    CTE_FLOAT       reduce using rule 110 (addOperator -> .)
    CTE_STRING      reduce using rule 110 (addOperator -> .)
    TRUE            reduce using rule 110 (addOperator -> .)
    FALSE           reduce using rule 110 (addOperator -> .)

    addOperator                    shift and go to state 266

state 262

    (74) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand . removeParenthesis
    (112) removeParenthesis -> .

    TIMES           reduce using rule 112 (removeParenthesis -> .)
    DIV             reduce using rule 112 (removeParenthesis -> .)
    MOD             reduce using rule 112 (removeParenthesis -> .)
    EXP             reduce using rule 112 (removeParenthesis -> .)
    PLUS            reduce using rule 112 (removeParenthesis -> .)
    MINUS           reduce using rule 112 (removeParenthesis -> .)
    GREATER_THAN    reduce using rule 112 (removeParenthesis -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (removeParenthesis -> .)
    LESS_THAN       reduce using rule 112 (removeParenthesis -> .)
    LESS_EQUAL_THAN reduce using rule 112 (removeParenthesis -> .)
    NOT_EQUALS      reduce using rule 112 (removeParenthesis -> .)
    EQUALS          reduce using rule 112 (removeParenthesis -> .)
    AND             reduce using rule 112 (removeParenthesis -> .)
    OR              reduce using rule 112 (removeParenthesis -> .)
    COMMA           reduce using rule 112 (removeParenthesis -> .)
    RIGHT_PAREN     reduce using rule 112 (removeParenthesis -> .)
    RIGHT_BRACKET   reduce using rule 112 (removeParenthesis -> .)
    SEMI_COLON      reduce using rule 112 (removeParenthesis -> .)

    removeParenthesis              shift and go to state 267

state 263

    (81) if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .

    VAR             reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CTE_ID          reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    PRINT           reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    READ_INPUT      reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    IF              reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    WHILE           reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RETURN          reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 81 (if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)


state 264

    (82) else -> ELSE doElse . IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (83) else -> ELSE doElse . funcBody
    (22) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    IF              shift and go to state 268
    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 269

state 265

    (85) while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .

    VAR             reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    CTE_ID          reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    PRINT           reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    READ_INPUT      reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    IF              reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    WHILE           reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RETURN          reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)
    RIGHT_CURLY_BRACKET reduce using rule 85 (while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile .)


state 266

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator . logicExpression doAssign SEMI_COLON
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 270
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 267

    (74) constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .

    TIMES           reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    DIV             reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    MOD             reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    EXP             reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    PLUS            reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    MINUS           reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    GREATER_THAN    reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    GREATER_EQUAL_THAN reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    LESS_THAN       reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    LESS_EQUAL_THAN reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    NOT_EQUALS      reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    EQUALS          reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    AND             reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    OR              reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    COMMA           reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    RIGHT_PAREN     reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    RIGHT_BRACKET   reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)
    SEMI_COLON      reduce using rule 74 (constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis .)


state 268

    (82) else -> ELSE doElse IF . LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF

    LEFT_PAREN      shift and go to state 271


state 269

    (83) else -> ELSE doElse funcBody .

    VAR             reduce using rule 83 (else -> ELSE doElse funcBody .)
    CTE_ID          reduce using rule 83 (else -> ELSE doElse funcBody .)
    PRINT           reduce using rule 83 (else -> ELSE doElse funcBody .)
    READ_INPUT      reduce using rule 83 (else -> ELSE doElse funcBody .)
    IF              reduce using rule 83 (else -> ELSE doElse funcBody .)
    WHILE           reduce using rule 83 (else -> ELSE doElse funcBody .)
    RETURN          reduce using rule 83 (else -> ELSE doElse funcBody .)
    RIGHT_CURLY_BRACKET reduce using rule 83 (else -> ELSE doElse funcBody .)


state 270

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression . doAssign SEMI_COLON
    (117) doAssign -> .

    SEMI_COLON      reduce using rule 117 (doAssign -> .)

    doAssign                       shift and go to state 272

state 271

    (82) else -> ELSE doElse IF LEFT_PAREN . logicExpression doIF RIGHT_PAREN funcBody else endIF
    (49) logicExpression -> . exp doLogicExpression auxLogicExpression
    (53) exp -> . exp2 doCompExpression auxExp
    (61) exp2 -> . term doExpression exp2Aux
    (65) term -> . factor doTerm auxTerm
    (71) factor -> . LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis
    (72) factor -> . constants
    (73) constants -> . CTE_ID addOperand
    (74) constants -> . CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis
    (75) constants -> . CTE_INT addConstantOperand
    (76) constants -> . CTE_FLOAT addConstantOperand
    (77) constants -> . CTE_STRING addConstantOperand
    (78) constants -> . TRUE addConstantBool
    (79) constants -> . FALSE addConstantBool
    (80) constants -> . functionCall
    (86) functionCall -> . CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub

    LEFT_PAREN      shift and go to state 119
    CTE_ID          shift and go to state 128
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 130
    CTE_STRING      shift and go to state 137
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    logicExpression                shift and go to state 273
    exp                            shift and go to state 123
    exp2                           shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    constants                      shift and go to state 127
    functionCall                   shift and go to state 133

state 272

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign . SEMI_COLON

    SEMI_COLON      shift and go to state 274


state 273

    (82) else -> ELSE doElse IF LEFT_PAREN logicExpression . doIF RIGHT_PAREN funcBody else endIF
    (121) doIF -> .

    RIGHT_PAREN     reduce using rule 121 (doIF -> .)

    doIF                           shift and go to state 275

state 274

    (39) assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .

    VAR             reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    CTE_ID          reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    PRINT           reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    READ_INPUT      reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    IF              reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    WHILE           reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RETURN          reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON .)


state 275

    (82) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF . RIGHT_PAREN funcBody else endIF

    RIGHT_PAREN     shift and go to state 276


state 276

    (82) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN . funcBody else endIF
    (22) funcBody -> . LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 65

    funcBody                       shift and go to state 277

state 277

    (82) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody . else endIF
    (82) else -> . ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF
    (83) else -> . ELSE doElse funcBody
    (84) else -> . empty
    (133) empty -> .

    ELSE            shift and go to state 258
    VAR             reduce using rule 133 (empty -> .)
    CTE_ID          reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    READ_INPUT      reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    RIGHT_CURLY_BRACKET reduce using rule 133 (empty -> .)

    else                           shift and go to state 278
    empty                          shift and go to state 259

state 278

    (82) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else . endIF
    (122) endIF -> .

    VAR             reduce using rule 122 (endIF -> .)
    CTE_ID          reduce using rule 122 (endIF -> .)
    PRINT           reduce using rule 122 (endIF -> .)
    READ_INPUT      reduce using rule 122 (endIF -> .)
    IF              reduce using rule 122 (endIF -> .)
    WHILE           reduce using rule 122 (endIF -> .)
    RETURN          reduce using rule 122 (endIF -> .)
    RIGHT_CURLY_BRACKET reduce using rule 122 (endIF -> .)

    endIF                          shift and go to state 279

state 279

    (82) else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .

    VAR             reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    CTE_ID          reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    PRINT           reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    READ_INPUT      reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    IF              reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    WHILE           reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RETURN          reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)
    RIGHT_CURLY_BRACKET reduce using rule 82 (else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTE_ID in state 65 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 65 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 65 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 74 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 74 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_ID in state 100 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 100 resolved as shift
WARNING: shift/reduce conflict for READ_INPUT in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 100 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (globalVariables -> empty)
WARNING: rejected rule (auxVars -> empty) in state 8
WARNING: reduce/reduce conflict in state 75 resolved using rule (auxVars -> empty)
WARNING: rejected rule (auxFuncBody -> empty) in state 75
WARNING: reduce/reduce conflict in state 122 resolved using rule (addConstantOperand -> <empty>)
WARNING: rejected rule (doWriteString -> <empty>) in state 122
WARNING: Rule (auxFuncBody -> empty) is never reduced
WARNING: Rule (doWriteString -> <empty>) is never reduced
