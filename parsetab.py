
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BINOMIAL BOOL BTSProgam COMMA CTE_FLOAT CTE_ID CTE_INT CTE_STRING DIV ELSE EQUAL EQUALS EXP FALSE FLOAT FOR FUNC GREATER_EQUAL_THAN GREATER_THAN IF INT LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PAREN LESS_EQUAL_THAN LESS_THAN MAIN MEAN MEDIAN MINUS MOD MODE NOT_EQUALS OR PLOT PLUS POISSON PRINT READ_INPUT RETURN RETURN_SIGN RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PAREN SEMI_COLON STANDARD_DEVIATION STRING TIMES TRUE VAR VARIANCE WHILE\n    program_main : BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint\n    \n    globalVariables : vars\n                    | empty\n    \n    globalFunctions : funcs\n                    | empty\n    \n    vars : auxVars\n    \n    auxVars : VAR type vars_type_single\n            | VAR type vars_type_array\n            | VAR type vars_type_matrix\n            | empty\n    \n    vars_type_single : CTE_ID saveVariableID COMMA vars_type_single\n                     | CTE_ID saveVariableID SEMI_COLON auxVars\n    \n    vars_type_array : CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array\n                    | CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars\n    \n    vars_type_matrix : CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix\n                     | CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars\n    \n    funcs : funcs_aux globalFunctions\n    \n    funcs_aux : FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n              | FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n    \n    params : auxParams\n          | empty\n    \n    auxParams : type CTE_ID multipleParams\n    \n    multipleParams : COMMA auxParams\n                   | empty\n    \n    funcBody : LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET\n    \n    auxFuncBody : vars statements auxFuncBody\n                | statements auxFuncBody\n                | empty\n    \n    return : RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON\n    \n    auxReturn : logicExpression\n              | empty\n    \n    type : INT setCurrentType\n         | FLOAT setCurrentType\n         | BOOL setCurrentType\n         | STRING setCurrentType\n    \n    statements : assignment\n               | writting\n               | reading\n               | if\n               | while\n               | return\n    \n    writting : PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON\n    \n    auxWritting : logicExpression doWrite multipleWrite\n                | CTE_STRING doWriteString multipleWrite\n    \n    multipleWrite : COMMA auxWritting\n                  | empty\n    \n    reading : READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON\n    \n    auxReading : CTE_ID addOperand doReading multipleRead\n    \n    multipleRead : COMMA auxReading\n                 | empty\n    \n    assignment : CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON\n    \n    logicExpression : exp doLogicExpression auxLogicExpression\n    \n    auxLogicExpression : AND addOperator logicExpression\n                       | OR addOperator logicExpression\n                       | empty\n    \n    exp : exp2 doCompExpression auxExp\n    \n    auxExp : GREATER_THAN addOperator exp\n           | GREATER_EQUAL_THAN addOperator exp\n           | LESS_THAN addOperator exp\n           | LESS_EQUAL_THAN addOperator exp\n           | NOT_EQUALS addOperator exp\n           | EQUALS addOperator exp\n           | empty\n    \n    exp2 : term doExpression exp2Aux\n    \n    exp2Aux : PLUS addOperator exp2\n            | MINUS addOperator exp2\n            | empty\n    \n    term : factor doTerm auxTerm\n    \n    auxTerm : TIMES addOperator term\n            | DIV addOperator term\n            | MOD addOperator term\n            | EXP addOperator term\n            | empty\n    \n    factor : LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis\n           | constants\n    \n    constants : CTE_ID addOperand\n              | CTE_INT addConstantOperand\n              | CTE_FLOAT addConstantOperand\n              | CTE_STRING addConstantOperand\n              | TRUE addConstantBool\n              | FALSE addConstantBool\n    \n    if : IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n    \n    else : ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF\n         | ELSE doElse funcBody\n         | empty\n    \n    while : WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile\n    \n    for : FOR LEFT_PAREN CTE_ID COMMA auxFor COMMA auxFor RIGHT_PAREN funcBody\n    \n    auxFor : CTE_ID \n           | CTE_INT\n    startup :setMain :endProgram :endPrint :saveFuncID :addMemoryInfo :endFunction :doIF :endIF :doElse :doWhile :endWhile :addCondStart :saveVariableID :setCurrentType :addOperand :addConstantOperand :addConstantBool :addOperator :addParenthesis :removeParenthesis :doLogicExpression :doCompExpression :doExpression :doTerm :doAssign :doWrite :doWriteString :doReading :empty :'
    
_lr_action_items = {'BTSProgam':([0,],[2,]),'$end':([1,70,94,97,108,134,],[0,-96,-92,-25,-93,-1,]),'CTE_ID':([2,9,15,16,17,18,19,20,23,25,26,27,29,30,31,32,40,41,48,50,51,52,63,68,69,74,75,76,77,78,79,80,81,82,92,93,97,98,101,103,104,111,112,126,129,130,131,132,135,136,158,159,163,165,169,170,173,174,175,176,177,178,181,182,185,186,187,188,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,218,220,237,239,241,242,245,247,250,251,255,256,],[3,-6,24,28,-104,-104,-104,-104,34,-7,-8,-9,-32,-33,-34,-35,49,-119,57,-11,-12,-10,83,91,-119,83,83,-10,-36,-37,-38,-39,-40,-41,-13,-14,-25,83,121,121,-102,-108,-109,151,121,121,157,-119,121,121,-15,-16,-42,121,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-47,-119,-29,-51,151,-98,-85,-101,-82,-86,-84,121,-98,-83,]),'SEMI_COLON':([3,4,28,36,49,58,59,106,116,117,118,119,120,121,122,123,124,125,128,137,140,141,142,143,144,145,146,147,148,149,161,168,171,172,179,180,183,184,189,190,194,196,197,198,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,],[-90,5,-103,41,-103,41,69,132,-111,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,163,-79,-119,-119,-119,-119,-76,-77,-78,-80,-81,-115,-52,-55,-56,-63,-64,-67,-68,-73,214,218,69,220,-110,-74,-53,-54,-57,-58,-59,-60,-61,-62,-65,-66,-69,-70,-71,-72,]),'FUNC':([5,6,7,8,9,14,25,26,27,41,50,51,52,62,69,71,72,92,93,95,96,97,109,132,158,159,],[-119,15,-2,-3,-6,15,-7,-8,-9,-119,-11,-12,-10,-95,-119,-95,-96,-13,-14,-96,-19,-25,-18,-119,-15,-16,]),'MAIN':([5,6,7,8,9,11,12,13,14,22,25,26,27,41,50,51,52,62,69,71,72,92,93,95,96,97,109,132,158,159,],[-119,-119,-2,-3,-6,21,-4,-5,-119,-17,-7,-8,-9,-119,-11,-12,-10,-95,-119,-95,-96,-13,-14,-96,-19,-25,-18,-119,-15,-16,]),'VAR':([5,41,63,69,75,77,78,79,80,81,82,97,98,132,163,214,216,218,220,239,241,242,245,247,250,255,256,],[10,10,10,10,10,-36,-37,-38,-39,-40,-41,-25,10,10,-42,-47,-119,-29,-51,-98,-85,-101,-82,-86,-84,-98,-83,]),'PRINT':([9,25,26,27,41,50,51,52,63,69,74,75,76,77,78,79,80,81,82,92,93,97,98,132,158,159,163,214,216,218,220,239,241,242,245,247,250,255,256,],[-6,-7,-8,-9,-119,-11,-12,-10,84,-119,84,84,-10,-36,-37,-38,-39,-40,-41,-13,-14,-25,84,-119,-15,-16,-42,-47,-119,-29,-51,-98,-85,-101,-82,-86,-84,-98,-83,]),'READ_INPUT':([9,25,26,27,41,50,51,52,63,69,74,75,76,77,78,79,80,81,82,92,93,97,98,132,158,159,163,214,216,218,220,239,241,242,245,247,250,255,256,],[-6,-7,-8,-9,-119,-11,-12,-10,85,-119,85,85,-10,-36,-37,-38,-39,-40,-41,-13,-14,-25,85,-119,-15,-16,-42,-47,-119,-29,-51,-98,-85,-101,-82,-86,-84,-98,-83,]),'IF':([9,25,26,27,41,50,51,52,63,69,74,75,76,77,78,79,80,81,82,92,93,97,98,132,158,159,163,214,216,218,220,239,240,241,242,245,246,247,250,255,256,],[-6,-7,-8,-9,-119,-11,-12,-10,86,-119,86,86,-10,-36,-37,-38,-39,-40,-41,-13,-14,-25,86,-119,-15,-16,-42,-47,-119,-29,-51,-98,-99,-85,-101,-82,249,-86,-84,-98,-83,]),'WHILE':([9,25,26,27,41,50,51,52,63,69,74,75,76,77,78,79,80,81,82,92,93,97,98,132,158,159,163,214,216,218,220,239,241,242,245,247,250,255,256,],[-6,-7,-8,-9,-119,-11,-12,-10,87,-119,87,87,-10,-36,-37,-38,-39,-40,-41,-13,-14,-25,87,-119,-15,-16,-42,-47,-119,-29,-51,-98,-85,-101,-82,-86,-84,-98,-83,]),'RETURN':([9,25,26,27,41,50,51,52,63,69,74,75,76,77,78,79,80,81,82,92,93,97,98,132,158,159,163,214,216,218,220,239,241,242,245,247,250,255,256,],[-6,-7,-8,-9,-119,-11,-12,-10,88,-119,88,88,-10,-36,-37,-38,-39,-40,-41,-13,-14,-25,88,-119,-15,-16,-42,-47,-119,-29,-51,-98,-85,-101,-82,-86,-84,-98,-83,]),'INT':([10,15,39,44,65,],[17,17,17,17,17,]),'FLOAT':([10,15,39,44,65,],[18,18,18,18,18,]),'BOOL':([10,15,39,44,65,],[19,19,19,19,19,]),'STRING':([10,15,39,44,65,],[20,20,20,20,20,]),'LEFT_PAREN':([21,24,33,34,35,37,38,84,85,86,87,101,102,103,104,105,111,112,129,130,135,136,165,169,170,173,174,175,176,177,178,181,182,185,186,187,188,200,201,202,203,204,205,206,207,208,209,210,211,212,213,249,251,],[-94,-94,-95,-94,39,43,44,101,-108,103,104,112,126,112,-102,130,-108,-109,112,112,112,112,112,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,112,112,112,112,112,112,112,112,112,112,112,112,112,112,251,112,]),'COMMA':([28,36,49,57,58,59,106,114,115,116,117,118,119,120,121,122,123,124,125,128,138,139,140,141,142,143,144,145,146,147,148,149,151,168,171,172,179,180,183,184,189,191,196,198,215,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,],[-103,40,-103,65,40,68,131,-116,-106,-111,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,165,165,-79,-119,-119,-119,-119,-76,-77,-78,-80,-81,-105,-52,-55,-56,-63,-64,-67,-68,-73,-118,68,-110,237,-74,-53,-54,-57,-58,-59,-60,-61,-62,-65,-66,-69,-70,-71,-72,]),'LEFT_BRACKET':([28,36,59,91,107,157,195,248,],[-103,42,67,-103,133,-103,219,67,]),'RIGHT_PAREN':([39,43,44,45,46,47,55,57,64,66,89,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,130,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,164,166,167,168,171,172,179,180,183,184,189,191,193,198,199,215,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,244,252,253,],[-119,54,-119,56,-20,-21,61,-119,-22,-24,-23,137,-116,-106,-111,-112,-113,-114,-75,-105,-106,-106,-107,-107,-97,-106,-119,-119,-119,-79,-119,-119,-119,-119,-76,-77,-78,-80,-81,190,-105,192,-100,194,-30,-31,198,-43,-46,-44,-52,-55,-56,-63,-64,-67,-68,-73,-118,217,-110,-45,-119,-74,-53,-54,-57,-58,-59,-60,-61,-62,-65,-66,-69,-70,-71,-72,-48,-50,-49,-97,254,]),'CTE_INT':([42,67,101,103,104,111,112,129,130,133,135,136,165,169,170,173,174,175,176,177,178,181,182,185,186,187,188,200,201,202,203,204,205,206,207,208,209,210,211,212,213,219,251,],[53,90,122,122,-102,-108,-109,122,122,160,122,122,122,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,122,122,122,122,122,122,122,122,122,122,122,122,122,122,243,122,]),'RIGHT_BRACKET':([53,90,160,243,],[59,106,196,248,]),'LEFT_CURLY_BRACKET':([54,56,60,61,192,217,240,246,254,],[-91,63,63,63,63,63,-99,63,63,]),'RIGHT_CURLY_BRACKET':([63,73,75,76,77,78,79,80,81,82,97,98,99,110,163,214,216,218,220,239,241,242,245,247,250,255,256,],[-119,97,-119,-28,-36,-37,-38,-39,-40,-41,-25,-119,-27,-26,-42,-47,-119,-29,-51,-98,-85,-101,-82,-86,-84,-98,-83,]),'EQUAL':([83,100,],[-105,111,]),'RETURN_SIGN':([88,],[105,]),'ELSE':([97,216,],[-25,240,]),'CTE_STRING':([101,103,104,111,112,129,130,135,136,165,169,170,173,174,175,176,177,178,181,182,185,186,187,188,200,201,202,203,204,205,206,207,208,209,210,211,212,213,251,],[115,128,-102,-108,-109,128,128,128,128,115,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'CTE_FLOAT':([101,103,104,111,112,129,130,135,136,165,169,170,173,174,175,176,177,178,181,182,185,186,187,188,200,201,202,203,204,205,206,207,208,209,210,211,212,213,251,],[123,123,-102,-108,-109,123,123,123,123,123,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'TRUE':([101,103,104,111,112,129,130,135,136,165,169,170,173,174,175,176,177,178,181,182,185,186,187,188,200,201,202,203,204,205,206,207,208,209,210,211,212,213,251,],[124,124,-102,-108,-109,124,124,124,124,124,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'FALSE':([101,103,104,111,112,129,130,135,136,165,169,170,173,174,175,176,177,178,181,182,185,186,187,188,200,201,202,203,204,205,206,207,208,209,210,211,212,213,251,],[125,125,-102,-108,-109,125,125,125,125,125,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'TIMES':([115,119,120,121,122,123,124,125,128,140,144,145,146,147,148,149,198,221,],[-106,-114,-75,-105,-106,-106,-107,-107,-106,-79,185,-76,-77,-78,-80,-81,-110,-74,]),'DIV':([115,119,120,121,122,123,124,125,128,140,144,145,146,147,148,149,198,221,],[-106,-114,-75,-105,-106,-106,-107,-107,-106,-79,186,-76,-77,-78,-80,-81,-110,-74,]),'MOD':([115,119,120,121,122,123,124,125,128,140,144,145,146,147,148,149,198,221,],[-106,-114,-75,-105,-106,-106,-107,-107,-106,-79,187,-76,-77,-78,-80,-81,-110,-74,]),'EXP':([115,119,120,121,122,123,124,125,128,140,144,145,146,147,148,149,198,221,],[-106,-114,-75,-105,-106,-106,-107,-107,-106,-79,188,-76,-77,-78,-80,-81,-110,-74,]),'PLUS':([115,118,119,120,121,122,123,124,125,128,140,143,144,145,146,147,148,149,184,189,198,221,232,233,234,235,],[-106,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,181,-119,-76,-77,-78,-80,-81,-68,-73,-110,-74,-69,-70,-71,-72,]),'MINUS':([115,118,119,120,121,122,123,124,125,128,140,143,144,145,146,147,148,149,184,189,198,221,232,233,234,235,],[-106,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,182,-119,-76,-77,-78,-80,-81,-68,-73,-110,-74,-69,-70,-71,-72,]),'GREATER_THAN':([115,117,118,119,120,121,122,123,124,125,128,140,142,143,144,145,146,147,148,149,180,183,184,189,198,221,230,231,232,233,234,235,],[-106,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,173,-119,-119,-76,-77,-78,-80,-81,-64,-67,-68,-73,-110,-74,-65,-66,-69,-70,-71,-72,]),'GREATER_EQUAL_THAN':([115,117,118,119,120,121,122,123,124,125,128,140,142,143,144,145,146,147,148,149,180,183,184,189,198,221,230,231,232,233,234,235,],[-106,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,174,-119,-119,-76,-77,-78,-80,-81,-64,-67,-68,-73,-110,-74,-65,-66,-69,-70,-71,-72,]),'LESS_THAN':([115,117,118,119,120,121,122,123,124,125,128,140,142,143,144,145,146,147,148,149,180,183,184,189,198,221,230,231,232,233,234,235,],[-106,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,175,-119,-119,-76,-77,-78,-80,-81,-64,-67,-68,-73,-110,-74,-65,-66,-69,-70,-71,-72,]),'LESS_EQUAL_THAN':([115,117,118,119,120,121,122,123,124,125,128,140,142,143,144,145,146,147,148,149,180,183,184,189,198,221,230,231,232,233,234,235,],[-106,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,176,-119,-119,-76,-77,-78,-80,-81,-64,-67,-68,-73,-110,-74,-65,-66,-69,-70,-71,-72,]),'NOT_EQUALS':([115,117,118,119,120,121,122,123,124,125,128,140,142,143,144,145,146,147,148,149,180,183,184,189,198,221,230,231,232,233,234,235,],[-106,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,177,-119,-119,-76,-77,-78,-80,-81,-64,-67,-68,-73,-110,-74,-65,-66,-69,-70,-71,-72,]),'EQUALS':([115,117,118,119,120,121,122,123,124,125,128,140,142,143,144,145,146,147,148,149,180,183,184,189,198,221,230,231,232,233,234,235,],[-106,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,178,-119,-119,-76,-77,-78,-80,-81,-64,-67,-68,-73,-110,-74,-65,-66,-69,-70,-71,-72,]),'AND':([115,116,117,118,119,120,121,122,123,124,125,128,140,141,142,143,144,145,146,147,148,149,172,179,180,183,184,189,198,221,224,225,226,227,228,229,230,231,232,233,234,235,],[-106,-111,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,169,-119,-119,-119,-76,-77,-78,-80,-81,-56,-63,-64,-67,-68,-73,-110,-74,-57,-58,-59,-60,-61,-62,-65,-66,-69,-70,-71,-72,]),'OR':([115,116,117,118,119,120,121,122,123,124,125,128,140,141,142,143,144,145,146,147,148,149,172,179,180,183,184,189,198,221,224,225,226,227,228,229,230,231,232,233,234,235,],[-106,-111,-112,-113,-114,-75,-105,-106,-106,-107,-107,-106,-79,170,-119,-119,-119,-76,-77,-78,-80,-81,-56,-63,-64,-67,-68,-73,-110,-74,-57,-58,-59,-60,-61,-62,-65,-66,-69,-70,-71,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_main':([0,],[1,]),'startup':([3,],[4,]),'globalVariables':([5,],[6,]),'vars':([5,63,75,98,],[7,74,74,74,]),'empty':([5,6,14,39,41,44,57,63,69,75,98,130,132,138,139,141,142,143,144,215,216,],[8,13,13,47,52,47,66,76,52,76,76,156,52,166,166,171,179,183,189,238,241,]),'auxVars':([5,41,63,69,75,98,132,],[9,51,9,93,9,9,159,]),'globalFunctions':([6,14,],[11,22,]),'funcs':([6,14,],[12,12,]),'funcs_aux':([6,14,],[14,14,]),'type':([10,15,39,44,65,],[16,23,48,48,48,]),'vars_type_single':([16,40,],[25,50,]),'vars_type_array':([16,68,],[26,92,]),'vars_type_matrix':([16,131,],[27,158,]),'setCurrentType':([17,18,19,20,],[29,30,31,32,]),'saveFuncID':([21,24,34,],[33,35,38,]),'saveVariableID':([28,49,91,157,],[36,58,107,195,]),'addMemoryInfo':([33,62,71,],[37,72,95,]),'params':([39,44,],[45,55,]),'auxParams':([39,44,65,],[46,46,89,]),'setMain':([54,],[60,]),'funcBody':([56,60,61,192,217,246,254,],[62,70,71,216,242,250,255,]),'multipleParams':([57,],[64,]),'auxFuncBody':([63,75,98,],[73,99,110,]),'statements':([63,74,75,98,],[75,98,75,75,]),'assignment':([63,74,75,98,],[77,77,77,77,]),'writting':([63,74,75,98,],[78,78,78,78,]),'reading':([63,74,75,98,],[79,79,79,79,]),'if':([63,74,75,98,],[80,80,80,80,]),'while':([63,74,75,98,],[81,81,81,81,]),'return':([63,74,75,98,],[82,82,82,82,]),'endFunction':([70,72,95,],[94,96,109,]),'addOperand':([83,121,151,],[100,145,191,]),'addOperator':([85,111,169,170,173,174,175,176,177,178,181,182,185,186,187,188,],[102,135,200,201,202,203,204,205,206,207,208,209,210,211,212,213,]),'endProgram':([94,],[108,]),'auxWritting':([101,165,],[113,199,]),'logicExpression':([101,103,129,130,135,136,165,200,201,251,],[114,127,153,155,161,162,114,222,223,252,]),'exp':([101,103,129,130,135,136,165,200,201,202,203,204,205,206,207,251,],[116,116,116,116,116,116,116,116,116,224,225,226,227,228,229,116,]),'exp2':([101,103,129,130,135,136,165,200,201,202,203,204,205,206,207,208,209,251,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,230,231,117,]),'term':([101,103,129,130,135,136,165,200,201,202,203,204,205,206,207,208,209,210,211,212,213,251,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,232,233,234,235,118,]),'factor':([101,103,129,130,135,136,165,200,201,202,203,204,205,206,207,208,209,210,211,212,213,251,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'constants':([101,103,129,130,135,136,165,200,201,202,203,204,205,206,207,208,209,210,211,212,213,251,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'addCondStart':([104,],[129,]),'endPrint':([108,],[134,]),'addParenthesis':([112,],[136,]),'doWrite':([114,],[138,]),'doWriteString':([115,],[139,]),'addConstantOperand':([115,122,123,128,],[140,146,147,140,]),'doLogicExpression':([116,],[141,]),'doCompExpression':([117,],[142,]),'doExpression':([118,],[143,]),'doTerm':([119,],[144,]),'addConstantBool':([124,125,],[148,149,]),'auxReading':([126,237,],[150,244,]),'doIF':([127,252,],[152,253,]),'auxReturn':([130,],[154,]),'multipleWrite':([138,139,],[164,167,]),'auxLogicExpression':([141,],[168,]),'auxExp':([142,],[172,]),'exp2Aux':([143,],[180,]),'auxTerm':([144,],[184,]),'doWhile':([153,],[193,]),'doAssign':([161,],[197,]),'doReading':([191,],[215,]),'removeParenthesis':([198,],[221,]),'multipleRead':([215,],[236,]),'else':([216,],[239,]),'endIF':([239,255,],[245,256,]),'doElse':([240,],[246,]),'endWhile':([242,],[247,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_main","S'",1,None,None,None),
  ('program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint','program_main',16,'p_mainFunction','parser.py',48),
  ('globalVariables -> vars','globalVariables',1,'p_globalVariables','parser.py',53),
  ('globalVariables -> empty','globalVariables',1,'p_globalVariables','parser.py',54),
  ('globalFunctions -> funcs','globalFunctions',1,'p_globalFunctions','parser.py',59),
  ('globalFunctions -> empty','globalFunctions',1,'p_globalFunctions','parser.py',60),
  ('vars -> auxVars','vars',1,'p_vars','parser.py',66),
  ('auxVars -> VAR type vars_type_single','auxVars',3,'p_auxVars','parser.py',71),
  ('auxVars -> VAR type vars_type_array','auxVars',3,'p_auxVars','parser.py',72),
  ('auxVars -> VAR type vars_type_matrix','auxVars',3,'p_auxVars','parser.py',73),
  ('auxVars -> empty','auxVars',1,'p_auxVars','parser.py',74),
  ('vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single','vars_type_single',4,'p_vars_type_single','parser.py',79),
  ('vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars','vars_type_single',4,'p_vars_type_single','parser.py',80),
  ('vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array','vars_type_array',7,'p_vars_type_array','parser.py',85),
  ('vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars','vars_type_array',7,'p_vars_type_array','parser.py',86),
  ('vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix','vars_type_matrix',10,'p_vars_type_matrix','parser.py',91),
  ('vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON auxVars','vars_type_matrix',10,'p_vars_type_matrix','parser.py',92),
  ('funcs -> funcs_aux globalFunctions','funcs',2,'p_funcs','parser.py',98),
  ('funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',103),
  ('funcs_aux -> FUNC CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',9,'p_funcs_aux','parser.py',104),
  ('params -> auxParams','params',1,'p_params','parser.py',109),
  ('params -> empty','params',1,'p_params','parser.py',110),
  ('auxParams -> type CTE_ID multipleParams','auxParams',3,'p_auxParams','parser.py',115),
  ('multipleParams -> COMMA auxParams','multipleParams',2,'p_multipleParams','parser.py',120),
  ('multipleParams -> empty','multipleParams',1,'p_multipleParams','parser.py',121),
  ('funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET','funcBody',3,'p_funcBody','parser.py',126),
  ('auxFuncBody -> vars statements auxFuncBody','auxFuncBody',3,'p_auxFuncBody','parser.py',131),
  ('auxFuncBody -> statements auxFuncBody','auxFuncBody',2,'p_auxFuncBody','parser.py',132),
  ('auxFuncBody -> empty','auxFuncBody',1,'p_auxFuncBody','parser.py',133),
  ('return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON','return',6,'p_return','parser.py',145),
  ('auxReturn -> logicExpression','auxReturn',1,'p_auxReturn','parser.py',150),
  ('auxReturn -> empty','auxReturn',1,'p_auxReturn','parser.py',151),
  ('type -> INT setCurrentType','type',2,'p_type','parser.py',157),
  ('type -> FLOAT setCurrentType','type',2,'p_type','parser.py',158),
  ('type -> BOOL setCurrentType','type',2,'p_type','parser.py',159),
  ('type -> STRING setCurrentType','type',2,'p_type','parser.py',160),
  ('statements -> assignment','statements',1,'p_statements','parser.py',166),
  ('statements -> writting','statements',1,'p_statements','parser.py',167),
  ('statements -> reading','statements',1,'p_statements','parser.py',168),
  ('statements -> if','statements',1,'p_statements','parser.py',169),
  ('statements -> while','statements',1,'p_statements','parser.py',170),
  ('statements -> return','statements',1,'p_statements','parser.py',171),
  ('writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON','writting',5,'p_writting','parser.py',177),
  ('auxWritting -> logicExpression doWrite multipleWrite','auxWritting',3,'p_auxWritting','parser.py',182),
  ('auxWritting -> CTE_STRING doWriteString multipleWrite','auxWritting',3,'p_auxWritting','parser.py',183),
  ('multipleWrite -> COMMA auxWritting','multipleWrite',2,'p_multipleWrite','parser.py',188),
  ('multipleWrite -> empty','multipleWrite',1,'p_multipleWrite','parser.py',189),
  ('reading -> READ_INPUT addOperator LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON','reading',6,'p_reading','parser.py',195),
  ('auxReading -> CTE_ID addOperand doReading multipleRead','auxReading',4,'p_auxReading','parser.py',200),
  ('multipleRead -> COMMA auxReading','multipleRead',2,'p_multipleRead','parser.py',205),
  ('multipleRead -> empty','multipleRead',1,'p_multipleRead','parser.py',206),
  ('assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',7,'p_assignment','parser.py',212),
  ('logicExpression -> exp doLogicExpression auxLogicExpression','logicExpression',3,'p_logicExpression','parser.py',218),
  ('auxLogicExpression -> AND addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',223),
  ('auxLogicExpression -> OR addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',224),
  ('auxLogicExpression -> empty','auxLogicExpression',1,'p_auxLogicExpression','parser.py',225),
  ('exp -> exp2 doCompExpression auxExp','exp',3,'p_exp','parser.py',230),
  ('auxExp -> GREATER_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',235),
  ('auxExp -> GREATER_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',236),
  ('auxExp -> LESS_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',237),
  ('auxExp -> LESS_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',238),
  ('auxExp -> NOT_EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',239),
  ('auxExp -> EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',240),
  ('auxExp -> empty','auxExp',1,'p_auxExp','parser.py',241),
  ('exp2 -> term doExpression exp2Aux','exp2',3,'p_exp2','parser.py',246),
  ('exp2Aux -> PLUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',251),
  ('exp2Aux -> MINUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',252),
  ('exp2Aux -> empty','exp2Aux',1,'p_exp2Aux','parser.py',253),
  ('term -> factor doTerm auxTerm','term',3,'p_term','parser.py',259),
  ('auxTerm -> TIMES addOperator term','auxTerm',3,'p_auxTerm','parser.py',264),
  ('auxTerm -> DIV addOperator term','auxTerm',3,'p_auxTerm','parser.py',265),
  ('auxTerm -> MOD addOperator term','auxTerm',3,'p_auxTerm','parser.py',266),
  ('auxTerm -> EXP addOperator term','auxTerm',3,'p_auxTerm','parser.py',267),
  ('auxTerm -> empty','auxTerm',1,'p_auxTerm','parser.py',268),
  ('factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis','factor',5,'p_factor','parser.py',274),
  ('factor -> constants','factor',1,'p_factor','parser.py',275),
  ('constants -> CTE_ID addOperand','constants',2,'p_constants','parser.py',280),
  ('constants -> CTE_INT addConstantOperand','constants',2,'p_constants','parser.py',281),
  ('constants -> CTE_FLOAT addConstantOperand','constants',2,'p_constants','parser.py',282),
  ('constants -> CTE_STRING addConstantOperand','constants',2,'p_constants','parser.py',283),
  ('constants -> TRUE addConstantBool','constants',2,'p_constants','parser.py',284),
  ('constants -> FALSE addConstantBool','constants',2,'p_constants','parser.py',285),
  ('if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','if',8,'p_if','parser.py',291),
  ('else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody endIF','else',9,'p_else','parser.py',296),
  ('else -> ELSE doElse funcBody','else',3,'p_else','parser.py',297),
  ('else -> empty','else',1,'p_else','parser.py',298),
  ('while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile','while',8,'p_while','parser.py',303),
  ('for -> FOR LEFT_PAREN CTE_ID COMMA auxFor COMMA auxFor RIGHT_PAREN funcBody','for',9,'p_for','parser.py',308),
  ('auxFor -> CTE_ID','auxFor',1,'p_auxFor','parser.py',313),
  ('auxFor -> CTE_INT','auxFor',1,'p_auxFor','parser.py',314),
  ('startup -> <empty>','startup',0,'p_startup','parser.py',335),
  ('setMain -> <empty>','setMain',0,'p_setMain','parser.py',346),
  ('endProgram -> <empty>','endProgram',0,'p_endProgram','parser.py',352),
  ('endPrint -> <empty>','endPrint',0,'p_endPrint','parser.py',359),
  ('saveFuncID -> <empty>','saveFuncID',0,'p_saveFuncID','parser.py',376),
  ('addMemoryInfo -> <empty>','addMemoryInfo',0,'p_addMemoryInfo','parser.py',395),
  ('endFunction -> <empty>','endFunction',0,'p_endFunction','parser.py',401),
  ('doIF -> <empty>','doIF',0,'p_doIF','parser.py',415),
  ('endIF -> <empty>','endIF',0,'p_endIF','parser.py',429),
  ('doElse -> <empty>','doElse',0,'p_doElse','parser.py',437),
  ('doWhile -> <empty>','doWhile',0,'p_doWhile','parser.py',449),
  ('endWhile -> <empty>','endWhile',0,'p_endWhile','parser.py',463),
  ('addCondStart -> <empty>','addCondStart',0,'p_addCondStart','parser.py',474),
  ('saveVariableID -> <empty>','saveVariableID',0,'p_saveVariableID','parser.py',480),
  ('setCurrentType -> <empty>','setCurrentType',0,'p_setCurrentType','parser.py',508),
  ('addOperand -> <empty>','addOperand',0,'p_addOperand','parser.py',514),
  ('addConstantOperand -> <empty>','addConstantOperand',0,'p_addConstantOperand','parser.py',529),
  ('addConstantBool -> <empty>','addConstantBool',0,'p_addConstantBool','parser.py',553),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','parser.py',564),
  ('addParenthesis -> <empty>','addParenthesis',0,'p_addParenthesis','parser.py',571),
  ('removeParenthesis -> <empty>','removeParenthesis',0,'p_removeParenthesis','parser.py',577),
  ('doLogicExpression -> <empty>','doLogicExpression',0,'p_doLogicExpression','parser.py',584),
  ('doCompExpression -> <empty>','doCompExpression',0,'p_doCompExpression','parser.py',611),
  ('doExpression -> <empty>','doExpression',0,'p_doExpression','parser.py',638),
  ('doTerm -> <empty>','doTerm',0,'p_doTerm','parser.py',665),
  ('doAssign -> <empty>','doAssign',0,'p_doAssign','parser.py',692),
  ('doWrite -> <empty>','doWrite',0,'p_doWrite','parser.py',711),
  ('doWriteString -> <empty>','doWriteString',0,'p_doWriteString','parser.py',721),
  ('doReading -> <empty>','doReading',0,'p_doReading','parser.py',731),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',747),
]
