
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BINOMIAL BOOL BTSProgam COMMA CTE_FLOAT CTE_ID CTE_INT CTE_STRING DIV ELSE EQUAL EQUALS EXP FALSE FLOAT FOR FUNC GREATER_EQUAL_THAN GREATER_THAN IF INT LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PAREN LESS_EQUAL_THAN LESS_THAN MAIN MEAN MEDIAN MINUS MOD MODE NOT_EQUALS OR PLOT PLUS POISSON PRINT READ_INPUT RETURN RETURN_SIGN RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PAREN SEMI_COLON STANDARD_DEVIATION STRING TIMES TRUE VAR VARIANCE WHILE\n    program_main : BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint\n    \n    globalVariables : vars addMemoryInfo\n                    | empty\n    \n    globalFunctions : funcs\n                    | empty\n    \n    vars : auxVars\n    \n    auxVars : VAR type vars_type_single\n            | VAR type vars_type_array\n            | empty\n    \n    vars_type_single : CTE_ID saveVariableID COMMA vars_type_single\n                     | CTE_ID saveVariableID SEMI_COLON auxVars\n    \n    vars_type_array : CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array\n                    | CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars\n    \n    funcs : funcs_aux globalFunctions\n    \n    funcs_aux : FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n              | FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n    \n    params : auxParams\n          | empty\n    \n    auxParams : type CTE_ID addParam multipleParams\n    \n    multipleParams : COMMA auxParams\n                   | empty\n    \n    funcBody : LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET\n    \n    auxFuncBody : vars statements auxFuncBody\n                | statements auxFuncBody\n                | vars\n                | empty\n    \n    type : INT setCurrentType\n         | FLOAT setCurrentType\n         | BOOL setCurrentType\n         | STRING setCurrentType\n    \n    statements : assignment\n               | writting\n               | reading\n               | if\n               | while\n               | auxFuncCall\n               | return\n    \n    assignment : CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON\n               | CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON\n    \n    writting : PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON\n    \n    auxWritting : logicExpression doWrite multipleWrite\n                | CTE_STRING doWriteString multipleWrite\n    \n    multipleWrite : COMMA auxWritting\n                  | empty\n    \n    reading : READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON\n    \n    auxReading : CTE_ID addOperand doReading multipleRead\n    \n    multipleRead : COMMA auxReading\n                 | empty\n    \n    logicExpression : exp doLogicExpression auxLogicExpression\n    \n    auxLogicExpression : AND addOperator logicExpression\n                       | OR addOperator logicExpression\n                       | empty\n    \n    exp : exp2 doCompExpression auxExp\n    \n    auxExp : GREATER_THAN addOperator exp\n           | GREATER_EQUAL_THAN addOperator exp\n           | LESS_THAN addOperator exp\n           | LESS_EQUAL_THAN addOperator exp\n           | NOT_EQUALS addOperator exp\n           | EQUALS addOperator exp\n           | empty\n    \n    exp2 : term doExpression exp2Aux\n    \n    exp2Aux : PLUS addOperator exp2\n            | MINUS addOperator exp2\n            | empty\n    \n    term : factor doTerm auxTerm\n    \n    auxTerm : TIMES addOperator term\n            | DIV addOperator term\n            | MOD addOperator term\n            | EXP addOperator term\n            | empty\n    \n    factor : LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis\n           | constants\n    \n    constants : CTE_ID addOperand\n              | CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis\n              | CTE_INT addConstantOperand\n              | CTE_FLOAT addConstantOperand\n              | CTE_STRING addConstantOperand\n              | TRUE addConstantBool\n              | FALSE addConstantBool\n              | functionCall\n    \n    if : IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n    \n    else : ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n         | ELSE doElse funcBody\n         | empty\n    \n    while : WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile\n    \n    functionCall : CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub\n    \n    auxFuncCall : functionCall SEMI_COLON\n    \n    arguments : auxArguments\n              | empty\n    \n    auxArguments : logicExpression checkType multipleArguments\n    \n    multipleArguments : COMMA auxArguments\n                      | empty\n    \n    return : RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON\n    \n    auxReturn : logicExpression doReturn\n              | empty\n    startup :setMain :endProgram :endPrint :saveFuncID :addParam :addMemoryInfo :endFunction :saveVariableID :saveArray :setCurrentType :addOperand :addConstantOperand :addConstantBool :addOperator :addParenthesis :removeParenthesis :doLogicExpression :doCompExpression :doExpression :doTerm :doAssign :doWrite :doWriteString :doReading :doIF :endIF :doElse :doWhile :endWhile :addCondStart :doFuncCall :setVoidType :checkParams :checkType :doReturn :doGoSub :empty :'
    
_lr_action_items = {'BTSProgam':([0,],[2,]),'$end':([1,64,71,98,99,114,],[0,-103,-98,-99,-22,-1,]),'CTE_ID':([2,9,15,17,18,19,20,21,24,26,27,29,30,31,32,41,42,48,49,50,53,65,69,70,73,74,75,76,77,78,79,80,81,82,96,97,99,100,103,105,106,107,108,109,116,117,118,119,138,139,140,146,156,173,175,179,180,183,184,185,186,187,188,191,192,195,196,197,198,200,201,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,231,233,235,236,257,259,260,261,263,265,266,269,271,274,277,278,279,],[3,-6,25,28,-106,-106,-106,-106,34,-7,-8,-27,-28,-29,-30,47,-133,-10,-11,-9,60,83,95,-133,83,83,-9,-31,-32,-33,-34,-35,-36,-37,-12,-13,-22,83,-111,128,135,128,-126,-87,-110,128,128,-111,128,128,128,128,-111,-40,128,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,128,-45,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,135,-133,-93,-38,-122,-84,-125,-110,-81,-85,128,-83,128,-39,-133,-122,-82,]),'SEMI_COLON':([3,4,28,36,47,58,63,88,123,124,125,126,127,128,129,130,131,132,133,137,147,150,151,152,153,154,155,157,158,159,160,161,168,178,181,182,189,190,193,194,199,205,207,209,213,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,262,267,270,272,],[-96,5,-104,42,-104,-105,70,109,-113,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,173,-77,-133,-133,-133,-133,-73,-75,-76,-78,-79,201,-117,-49,-52,-53,-60,-61,-64,-65,-70,235,236,-132,-112,-86,-71,-50,-51,-54,-55,-56,-57,-58,-59,-62,-63,-66,-67,-68,-69,-107,-112,-74,-117,274,]),'FUNC':([5,6,7,8,9,14,16,26,27,42,48,49,50,67,68,70,93,94,96,97,99,112,113,],[-133,15,-102,-3,-6,15,-2,-7,-8,-133,-10,-11,-9,-102,-102,-133,-103,-103,-12,-13,-22,-15,-16,]),'MAIN':([5,6,7,8,9,11,12,13,14,16,23,26,27,42,48,49,50,67,68,70,93,94,96,97,99,112,113,],[-133,-133,-102,-3,-6,22,-4,-5,-133,-2,-14,-7,-8,-133,-10,-11,-9,-102,-102,-133,-103,-103,-12,-13,-22,-15,-16,]),'VAR':([5,42,65,70,74,76,77,78,79,80,81,82,99,100,109,173,201,233,235,236,257,259,260,263,265,269,274,277,278,279,],[10,10,10,10,10,-31,-32,-33,-34,-35,-36,-37,-22,10,-87,-40,-45,-133,-93,-38,-122,-84,-125,-81,-85,-83,-39,-133,-122,-82,]),'PRINT':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,96,97,99,100,109,173,201,233,235,236,257,259,260,263,265,269,274,277,278,279,],[-6,-7,-8,-133,-10,-11,-9,84,-133,84,84,-9,-31,-32,-33,-34,-35,-36,-37,-12,-13,-22,84,-87,-40,-45,-133,-93,-38,-122,-84,-125,-81,-85,-83,-39,-133,-122,-82,]),'READ_INPUT':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,96,97,99,100,109,173,201,233,235,236,257,259,260,263,265,269,274,277,278,279,],[-6,-7,-8,-133,-10,-11,-9,85,-133,85,85,-9,-31,-32,-33,-34,-35,-36,-37,-12,-13,-22,85,-87,-40,-45,-133,-93,-38,-122,-84,-125,-81,-85,-83,-39,-133,-122,-82,]),'IF':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,96,97,99,100,109,173,201,233,235,236,257,258,259,260,263,264,265,269,274,277,278,279,],[-6,-7,-8,-133,-10,-11,-9,86,-133,86,86,-9,-31,-32,-33,-34,-35,-36,-37,-12,-13,-22,86,-87,-40,-45,-133,-93,-38,-122,-123,-84,-125,-81,268,-85,-83,-39,-133,-122,-82,]),'WHILE':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,96,97,99,100,109,173,201,233,235,236,257,259,260,263,265,269,274,277,278,279,],[-6,-7,-8,-133,-10,-11,-9,87,-133,87,87,-9,-31,-32,-33,-34,-35,-36,-37,-12,-13,-22,87,-87,-40,-45,-133,-93,-38,-122,-84,-125,-81,-85,-83,-39,-133,-122,-82,]),'RETURN':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,96,97,99,100,109,173,201,233,235,236,257,259,260,263,265,269,274,277,278,279,],[-6,-7,-8,-133,-10,-11,-9,89,-133,89,89,-9,-31,-32,-33,-34,-35,-36,-37,-12,-13,-22,89,-87,-40,-45,-133,-93,-38,-122,-84,-125,-81,-85,-83,-39,-133,-122,-82,]),'RIGHT_CURLY_BRACKET':([9,26,27,42,48,49,50,65,70,72,73,74,75,76,77,78,79,80,81,82,96,97,99,100,101,109,115,173,201,233,235,236,257,259,260,263,265,269,274,277,278,279,],[-6,-7,-8,-133,-10,-11,-9,-133,-133,99,-25,-133,-9,-31,-32,-33,-34,-35,-36,-37,-12,-13,-22,-133,-24,-87,-23,-40,-45,-133,-93,-38,-122,-84,-125,-81,-85,-83,-39,-133,-122,-82,]),'INT':([10,15,45,46,91,],[18,18,18,18,18,]),'FLOAT':([10,15,45,46,91,],[19,19,19,19,19,]),'BOOL':([10,15,45,46,91,],[20,20,20,20,20,]),'STRING':([10,15,45,46,91,],[21,21,21,21,21,]),'LEFT_PAREN':([22,25,33,34,35,38,39,40,83,84,85,86,87,103,104,105,107,108,110,116,117,118,119,128,138,139,140,146,156,175,179,180,183,184,185,186,187,188,191,192,195,196,197,198,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,261,266,268,271,],[-100,-100,-102,-100,-128,44,45,46,-127,105,106,107,108,-111,118,119,119,-126,139,-110,119,119,-111,-127,119,119,119,119,-111,119,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-110,119,271,119,]),'LEFT_BRACKET':([28,83,95,128,],[37,103,37,156,]),'COMMA':([28,36,47,58,60,63,66,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,145,148,149,150,151,152,153,154,155,157,158,159,160,162,171,178,181,182,189,190,193,194,199,202,209,213,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,262,267,],[-104,41,-104,-105,-101,69,91,-118,-108,-113,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-107,-108,-130,175,175,-77,-133,-133,-133,-133,-73,-75,-76,-78,-79,-120,211,-49,-52,-53,-60,-61,-64,-65,-70,231,-132,-112,-86,-71,-50,-51,-54,-55,-56,-57,-58,-59,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'CTE_INT':([37,103,105,107,108,116,117,118,119,138,139,140,146,156,175,179,180,183,184,185,186,187,188,191,192,195,196,197,198,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,261,266,271,],[43,-111,129,129,-126,-110,129,129,-111,129,129,129,129,-111,129,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,-110,129,129,]),'RIGHT_BRACKET':([43,51,123,124,125,126,127,128,129,130,131,132,133,137,141,150,151,152,153,154,155,157,158,159,160,178,181,182,189,190,193,194,199,209,213,229,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,262,267,],[-108,58,-113,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,169,-77,-133,-133,-133,-133,-73,-75,-76,-78,-79,-49,-52,-53,-60,-61,-64,-65,-70,-132,-112,255,-86,-71,-50,-51,-54,-55,-56,-57,-58,-59,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'RIGHT_PAREN':([44,45,46,54,55,56,57,60,66,90,92,111,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,142,143,144,145,148,149,150,151,152,153,154,155,157,158,159,160,162,163,164,165,166,167,170,171,172,174,176,177,178,181,182,189,190,193,194,199,202,204,206,209,210,212,213,214,230,232,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,267,273,275,],[52,-133,-133,61,-17,-18,62,-101,-133,-19,-21,-20,-133,147,-118,-108,-113,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,161,-107,-121,-108,-133,-129,-88,-89,-130,-133,-133,-77,-133,-133,-133,-133,-73,-75,-76,-78,-79,-120,203,-124,205,-131,-95,209,-133,213,-41,-44,-42,-49,-52,-53,-60,-61,-64,-65,-70,-133,234,-94,-132,-90,-92,-112,-43,-46,-48,-86,-91,-71,-50,-51,-54,-55,-56,-57,-58,-59,-62,-63,-66,-67,-68,-69,-107,-47,-112,-74,-121,276,]),'LEFT_CURLY_BRACKET':([52,59,61,62,203,234,258,264,276,],[-97,65,65,65,65,65,-123,65,65,]),'EQUAL':([83,102,169,208,237,],[-107,116,-107,-112,261,]),'RETURN_SIGN':([89,],[110,]),'ELSE':([99,233,277,],[-22,258,258,]),'CTE_FLOAT':([103,105,107,108,116,117,118,119,138,139,140,146,156,175,179,180,183,184,185,186,187,188,191,192,195,196,197,198,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,261,266,271,],[-111,130,130,-126,-110,130,130,-111,130,130,130,130,-111,130,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,-110,130,130,]),'CTE_STRING':([103,105,107,108,116,117,118,119,138,139,140,146,156,175,179,180,183,184,185,186,187,188,191,192,195,196,197,198,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,261,266,271,],[-111,122,137,-126,-110,137,137,-111,137,137,137,137,-111,122,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-110,137,137,]),'TRUE':([103,105,107,108,116,117,118,119,138,139,140,146,156,175,179,180,183,184,185,186,187,188,191,192,195,196,197,198,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,261,266,271,],[-111,131,131,-126,-110,131,131,-111,131,131,131,131,-111,131,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,-110,131,131,]),'FALSE':([103,105,107,108,116,117,118,119,138,139,140,146,156,175,179,180,183,184,185,186,187,188,191,192,195,196,197,198,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,261,266,271,],[-111,132,132,-126,-110,132,132,-111,132,132,132,132,-111,132,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,-110,132,132,]),'TIMES':([122,126,127,128,129,130,131,132,133,137,150,154,155,157,158,159,160,209,213,238,240,255,262,267,],[-108,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,195,-73,-75,-76,-78,-79,-132,-112,-86,-71,-107,-112,-74,]),'DIV':([122,126,127,128,129,130,131,132,133,137,150,154,155,157,158,159,160,209,213,238,240,255,262,267,],[-108,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,196,-73,-75,-76,-78,-79,-132,-112,-86,-71,-107,-112,-74,]),'MOD':([122,126,127,128,129,130,131,132,133,137,150,154,155,157,158,159,160,209,213,238,240,255,262,267,],[-108,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,197,-73,-75,-76,-78,-79,-132,-112,-86,-71,-107,-112,-74,]),'EXP':([122,126,127,128,129,130,131,132,133,137,150,154,155,157,158,159,160,209,213,238,240,255,262,267,],[-108,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,198,-73,-75,-76,-78,-79,-132,-112,-86,-71,-107,-112,-74,]),'PLUS':([122,125,126,127,128,129,130,131,132,133,137,150,153,154,155,157,158,159,160,194,199,209,213,238,240,251,252,253,254,255,262,267,],[-108,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,191,-133,-73,-75,-76,-78,-79,-65,-70,-132,-112,-86,-71,-66,-67,-68,-69,-107,-112,-74,]),'MINUS':([122,125,126,127,128,129,130,131,132,133,137,150,153,154,155,157,158,159,160,194,199,209,213,238,240,251,252,253,254,255,262,267,],[-108,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,192,-133,-73,-75,-76,-78,-79,-65,-70,-132,-112,-86,-71,-66,-67,-68,-69,-107,-112,-74,]),'GREATER_THAN':([122,124,125,126,127,128,129,130,131,132,133,137,150,152,153,154,155,157,158,159,160,190,193,194,199,209,213,238,240,249,250,251,252,253,254,255,262,267,],[-108,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,183,-133,-133,-73,-75,-76,-78,-79,-61,-64,-65,-70,-132,-112,-86,-71,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'GREATER_EQUAL_THAN':([122,124,125,126,127,128,129,130,131,132,133,137,150,152,153,154,155,157,158,159,160,190,193,194,199,209,213,238,240,249,250,251,252,253,254,255,262,267,],[-108,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,184,-133,-133,-73,-75,-76,-78,-79,-61,-64,-65,-70,-132,-112,-86,-71,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'LESS_THAN':([122,124,125,126,127,128,129,130,131,132,133,137,150,152,153,154,155,157,158,159,160,190,193,194,199,209,213,238,240,249,250,251,252,253,254,255,262,267,],[-108,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,185,-133,-133,-73,-75,-76,-78,-79,-61,-64,-65,-70,-132,-112,-86,-71,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'LESS_EQUAL_THAN':([122,124,125,126,127,128,129,130,131,132,133,137,150,152,153,154,155,157,158,159,160,190,193,194,199,209,213,238,240,249,250,251,252,253,254,255,262,267,],[-108,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,186,-133,-133,-73,-75,-76,-78,-79,-61,-64,-65,-70,-132,-112,-86,-71,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'NOT_EQUALS':([122,124,125,126,127,128,129,130,131,132,133,137,150,152,153,154,155,157,158,159,160,190,193,194,199,209,213,238,240,249,250,251,252,253,254,255,262,267,],[-108,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,187,-133,-133,-73,-75,-76,-78,-79,-61,-64,-65,-70,-132,-112,-86,-71,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'EQUALS':([122,124,125,126,127,128,129,130,131,132,133,137,150,152,153,154,155,157,158,159,160,190,193,194,199,209,213,238,240,249,250,251,252,253,254,255,262,267,],[-108,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,188,-133,-133,-73,-75,-76,-78,-79,-61,-64,-65,-70,-132,-112,-86,-71,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'AND':([122,123,124,125,126,127,128,129,130,131,132,133,137,150,151,152,153,154,155,157,158,159,160,182,189,190,193,194,199,209,213,238,240,243,244,245,246,247,248,249,250,251,252,253,254,255,262,267,],[-108,-113,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,179,-133,-133,-133,-73,-75,-76,-78,-79,-53,-60,-61,-64,-65,-70,-132,-112,-86,-71,-54,-55,-56,-57,-58,-59,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),'OR':([122,123,124,125,126,127,128,129,130,131,132,133,137,150,151,152,153,154,155,157,158,159,160,182,189,190,193,194,199,209,213,238,240,243,244,245,246,247,248,249,250,251,252,253,254,255,262,267,],[-108,-113,-114,-115,-116,-72,-107,-108,-108,-109,-109,-80,-108,-77,180,-133,-133,-133,-73,-75,-76,-78,-79,-53,-60,-61,-64,-65,-70,-132,-112,-86,-71,-54,-55,-56,-57,-58,-59,-62,-63,-66,-67,-68,-69,-107,-112,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_main':([0,],[1,]),'startup':([3,],[4,]),'globalVariables':([5,],[6,]),'vars':([5,65,74,100,],[7,73,73,73,]),'empty':([5,6,14,42,45,46,65,66,70,74,100,118,139,148,149,151,152,153,154,171,202,233,277,],[8,13,13,50,56,56,75,92,50,75,75,144,167,176,176,181,189,193,199,212,232,259,259,]),'auxVars':([5,42,65,70,74,100,],[9,49,9,97,9,9,]),'globalFunctions':([6,14,],[11,23,]),'funcs':([6,14,],[12,12,]),'funcs_aux':([6,14,],[14,14,]),'addMemoryInfo':([7,33,67,68,],[16,38,93,94,]),'type':([10,15,45,46,91,],[17,24,53,53,53,]),'vars_type_single':([17,41,],[26,48,]),'vars_type_array':([17,69,],[27,96,]),'setCurrentType':([18,19,20,21,],[29,30,31,32,]),'saveFuncID':([22,25,34,],[33,35,39,]),'saveVariableID':([28,47,],[36,36,]),'setVoidType':([35,],[40,]),'addConstantOperand':([43,122,129,130,137,],[51,150,157,158,150,]),'params':([45,46,],[54,57,]),'auxParams':([45,46,91,],[55,55,111,]),'setMain':([52,],[59,]),'saveArray':([58,],[63,]),'funcBody':([59,61,62,203,234,264,276,],[64,67,68,233,260,269,277,]),'addParam':([60,],[66,]),'endFunction':([64,93,94,],[71,112,113,]),'auxFuncBody':([65,74,100,],[72,101,115,]),'statements':([65,73,74,100,],[74,100,74,74,]),'assignment':([65,73,74,100,],[76,76,76,76,]),'writting':([65,73,74,100,],[77,77,77,77,]),'reading':([65,73,74,100,],[78,78,78,78,]),'if':([65,73,74,100,],[79,79,79,79,]),'while':([65,73,74,100,],[80,80,80,80,]),'auxFuncCall':([65,73,74,100,],[81,81,81,81,]),'return':([65,73,74,100,],[82,82,82,82,]),'functionCall':([65,73,74,100,105,107,117,118,138,139,140,146,175,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,266,271,],[88,88,88,88,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'multipleParams':([66,],[90,]),'endProgram':([71,],[98,]),'addOperand':([83,128,135,169,255,],[102,155,162,208,262,]),'doFuncCall':([83,128,],[104,104,]),'endPrint':([98,],[114,]),'addParenthesis':([103,119,156,],[117,146,200,]),'auxWritting':([105,175,],[120,214,]),'logicExpression':([105,107,117,118,138,139,140,146,175,200,211,215,216,266,271,],[121,136,141,145,164,166,168,172,121,229,145,241,242,270,273,]),'exp':([105,107,117,118,138,139,140,146,175,200,211,215,216,217,218,219,220,221,222,266,271,],[123,123,123,123,123,123,123,123,123,123,123,123,123,243,244,245,246,247,248,123,123,]),'exp2':([105,107,117,118,138,139,140,146,175,200,211,215,216,217,218,219,220,221,222,223,224,266,271,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,249,250,124,124,]),'term':([105,107,117,118,138,139,140,146,175,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,266,271,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,251,252,253,254,125,125,]),'factor':([105,107,117,118,138,139,140,146,175,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,266,271,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'constants':([105,107,117,118,138,139,140,146,175,200,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,266,271,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'auxReading':([106,231,],[134,256,]),'addCondStart':([108,],[138,]),'addOperator':([116,179,180,183,184,185,186,187,188,191,192,195,196,197,198,261,],[140,215,216,217,218,219,220,221,222,223,224,225,226,227,228,266,]),'arguments':([118,],[142,]),'auxArguments':([118,211,],[143,239,]),'doWrite':([121,],[148,]),'doWriteString':([122,],[149,]),'doLogicExpression':([123,],[151,]),'doCompExpression':([124,],[152,]),'doExpression':([125,],[153,]),'doTerm':([126,],[154,]),'addConstantBool':([131,132,],[159,160,]),'doIF':([136,273,],[163,275,]),'auxReturn':([139,],[165,]),'checkParams':([142,],[170,]),'checkType':([145,],[171,]),'multipleWrite':([148,149,],[174,177,]),'auxLogicExpression':([151,],[178,]),'auxExp':([152,],[182,]),'exp2Aux':([153,],[190,]),'auxTerm':([154,],[194,]),'doReading':([162,],[202,]),'doWhile':([164,],[204,]),'doReturn':([166,],[206,]),'doAssign':([168,270,],[207,272,]),'multipleArguments':([171,],[210,]),'multipleRead':([202,],[230,]),'removeParenthesis':([208,213,262,],[237,240,267,]),'doGoSub':([209,],[238,]),'else':([233,277,],[257,278,]),'endIF':([257,278,],[263,279,]),'doElse':([258,],[264,]),'endWhile':([260,],[265,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_main","S'",1,None,None,None),
  ('program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint','program_main',16,'p_mainFunction','parser.py',53),
  ('globalVariables -> vars addMemoryInfo','globalVariables',2,'p_globalVariables','parser.py',58),
  ('globalVariables -> empty','globalVariables',1,'p_globalVariables','parser.py',59),
  ('globalFunctions -> funcs','globalFunctions',1,'p_globalFunctions','parser.py',64),
  ('globalFunctions -> empty','globalFunctions',1,'p_globalFunctions','parser.py',65),
  ('vars -> auxVars','vars',1,'p_vars','parser.py',71),
  ('auxVars -> VAR type vars_type_single','auxVars',3,'p_auxVars','parser.py',76),
  ('auxVars -> VAR type vars_type_array','auxVars',3,'p_auxVars','parser.py',77),
  ('auxVars -> empty','auxVars',1,'p_auxVars','parser.py',78),
  ('vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single','vars_type_single',4,'p_vars_type_single','parser.py',83),
  ('vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars','vars_type_single',4,'p_vars_type_single','parser.py',84),
  ('vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array','vars_type_array',8,'p_vars_type_array','parser.py',89),
  ('vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars','vars_type_array',8,'p_vars_type_array','parser.py',90),
  ('funcs -> funcs_aux globalFunctions','funcs',2,'p_funcs','parser.py',96),
  ('funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',101),
  ('funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',102),
  ('params -> auxParams','params',1,'p_params','parser.py',107),
  ('params -> empty','params',1,'p_params','parser.py',108),
  ('auxParams -> type CTE_ID addParam multipleParams','auxParams',4,'p_auxParams','parser.py',113),
  ('multipleParams -> COMMA auxParams','multipleParams',2,'p_multipleParams','parser.py',118),
  ('multipleParams -> empty','multipleParams',1,'p_multipleParams','parser.py',119),
  ('funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET','funcBody',3,'p_funcBody','parser.py',124),
  ('auxFuncBody -> vars statements auxFuncBody','auxFuncBody',3,'p_auxFuncBody','parser.py',129),
  ('auxFuncBody -> statements auxFuncBody','auxFuncBody',2,'p_auxFuncBody','parser.py',130),
  ('auxFuncBody -> vars','auxFuncBody',1,'p_auxFuncBody','parser.py',131),
  ('auxFuncBody -> empty','auxFuncBody',1,'p_auxFuncBody','parser.py',132),
  ('type -> INT setCurrentType','type',2,'p_type','parser.py',144),
  ('type -> FLOAT setCurrentType','type',2,'p_type','parser.py',145),
  ('type -> BOOL setCurrentType','type',2,'p_type','parser.py',146),
  ('type -> STRING setCurrentType','type',2,'p_type','parser.py',147),
  ('statements -> assignment','statements',1,'p_statements','parser.py',153),
  ('statements -> writting','statements',1,'p_statements','parser.py',154),
  ('statements -> reading','statements',1,'p_statements','parser.py',155),
  ('statements -> if','statements',1,'p_statements','parser.py',156),
  ('statements -> while','statements',1,'p_statements','parser.py',157),
  ('statements -> auxFuncCall','statements',1,'p_statements','parser.py',158),
  ('statements -> return','statements',1,'p_statements','parser.py',159),
  ('assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',7,'p_assignment','parser.py',165),
  ('assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',12,'p_assignment','parser.py',166),
  ('writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON','writting',5,'p_writting','parser.py',172),
  ('auxWritting -> logicExpression doWrite multipleWrite','auxWritting',3,'p_auxWritting','parser.py',177),
  ('auxWritting -> CTE_STRING doWriteString multipleWrite','auxWritting',3,'p_auxWritting','parser.py',178),
  ('multipleWrite -> COMMA auxWritting','multipleWrite',2,'p_multipleWrite','parser.py',183),
  ('multipleWrite -> empty','multipleWrite',1,'p_multipleWrite','parser.py',184),
  ('reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON','reading',5,'p_reading','parser.py',190),
  ('auxReading -> CTE_ID addOperand doReading multipleRead','auxReading',4,'p_auxReading','parser.py',195),
  ('multipleRead -> COMMA auxReading','multipleRead',2,'p_multipleRead','parser.py',200),
  ('multipleRead -> empty','multipleRead',1,'p_multipleRead','parser.py',201),
  ('logicExpression -> exp doLogicExpression auxLogicExpression','logicExpression',3,'p_logicExpression','parser.py',207),
  ('auxLogicExpression -> AND addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',212),
  ('auxLogicExpression -> OR addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',213),
  ('auxLogicExpression -> empty','auxLogicExpression',1,'p_auxLogicExpression','parser.py',214),
  ('exp -> exp2 doCompExpression auxExp','exp',3,'p_exp','parser.py',219),
  ('auxExp -> GREATER_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',224),
  ('auxExp -> GREATER_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',225),
  ('auxExp -> LESS_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',226),
  ('auxExp -> LESS_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',227),
  ('auxExp -> NOT_EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',228),
  ('auxExp -> EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',229),
  ('auxExp -> empty','auxExp',1,'p_auxExp','parser.py',230),
  ('exp2 -> term doExpression exp2Aux','exp2',3,'p_exp2','parser.py',235),
  ('exp2Aux -> PLUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',240),
  ('exp2Aux -> MINUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',241),
  ('exp2Aux -> empty','exp2Aux',1,'p_exp2Aux','parser.py',242),
  ('term -> factor doTerm auxTerm','term',3,'p_term','parser.py',248),
  ('auxTerm -> TIMES addOperator term','auxTerm',3,'p_auxTerm','parser.py',253),
  ('auxTerm -> DIV addOperator term','auxTerm',3,'p_auxTerm','parser.py',254),
  ('auxTerm -> MOD addOperator term','auxTerm',3,'p_auxTerm','parser.py',255),
  ('auxTerm -> EXP addOperator term','auxTerm',3,'p_auxTerm','parser.py',256),
  ('auxTerm -> empty','auxTerm',1,'p_auxTerm','parser.py',257),
  ('factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis','factor',5,'p_factor','parser.py',263),
  ('factor -> constants','factor',1,'p_factor','parser.py',264),
  ('constants -> CTE_ID addOperand','constants',2,'p_constants','parser.py',269),
  ('constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis','constants',7,'p_constants','parser.py',270),
  ('constants -> CTE_INT addConstantOperand','constants',2,'p_constants','parser.py',271),
  ('constants -> CTE_FLOAT addConstantOperand','constants',2,'p_constants','parser.py',272),
  ('constants -> CTE_STRING addConstantOperand','constants',2,'p_constants','parser.py',273),
  ('constants -> TRUE addConstantBool','constants',2,'p_constants','parser.py',274),
  ('constants -> FALSE addConstantBool','constants',2,'p_constants','parser.py',275),
  ('constants -> functionCall','constants',1,'p_constants','parser.py',276),
  ('if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','if',8,'p_if','parser.py',282),
  ('else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','else',10,'p_else','parser.py',287),
  ('else -> ELSE doElse funcBody','else',3,'p_else','parser.py',288),
  ('else -> empty','else',1,'p_else','parser.py',289),
  ('while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile','while',8,'p_while','parser.py',295),
  ('functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub','functionCall',7,'p_functionCall','parser.py',301),
  ('auxFuncCall -> functionCall SEMI_COLON','auxFuncCall',2,'p_auxFuncCall','parser.py',306),
  ('arguments -> auxArguments','arguments',1,'p_arguments','parser.py',311),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',312),
  ('auxArguments -> logicExpression checkType multipleArguments','auxArguments',3,'p_auxArguments','parser.py',317),
  ('multipleArguments -> COMMA auxArguments','multipleArguments',2,'p_multipleArguments','parser.py',322),
  ('multipleArguments -> empty','multipleArguments',1,'p_multipleArguments','parser.py',323),
  ('return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON','return',6,'p_return','parser.py',329),
  ('auxReturn -> logicExpression doReturn','auxReturn',2,'p_auxReturn','parser.py',334),
  ('auxReturn -> empty','auxReturn',1,'p_auxReturn','parser.py',335),
  ('startup -> <empty>','startup',0,'p_startup','parser.py',358),
  ('setMain -> <empty>','setMain',0,'p_setMain','parser.py',369),
  ('endProgram -> <empty>','endProgram',0,'p_endProgram','parser.py',375),
  ('endPrint -> <empty>','endPrint',0,'p_endPrint','parser.py',382),
  ('saveFuncID -> <empty>','saveFuncID',0,'p_saveFuncID','parser.py',399),
  ('addParam -> <empty>','addParam',0,'p_addParam','parser.py',427),
  ('addMemoryInfo -> <empty>','addMemoryInfo',0,'p_addMemoryInfo','parser.py',458),
  ('endFunction -> <empty>','endFunction',0,'p_endFunction','parser.py',466),
  ('saveVariableID -> <empty>','saveVariableID',0,'p_saveVariableID','parser.py',486),
  ('saveArray -> <empty>','saveArray',0,'p_saveArray','parser.py',512),
  ('setCurrentType -> <empty>','setCurrentType',0,'p_setCurrentType','parser.py',552),
  ('addOperand -> <empty>','addOperand',0,'p_addOperand','parser.py',558),
  ('addConstantOperand -> <empty>','addConstantOperand',0,'p_addConstantOperand','parser.py',616),
  ('addConstantBool -> <empty>','addConstantBool',0,'p_addConstantBool','parser.py',640),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','parser.py',651),
  ('addParenthesis -> <empty>','addParenthesis',0,'p_addParenthesis','parser.py',658),
  ('removeParenthesis -> <empty>','removeParenthesis',0,'p_removeParenthesis','parser.py',664),
  ('doLogicExpression -> <empty>','doLogicExpression',0,'p_doLogicExpression','parser.py',671),
  ('doCompExpression -> <empty>','doCompExpression',0,'p_doCompExpression','parser.py',698),
  ('doExpression -> <empty>','doExpression',0,'p_doExpression','parser.py',725),
  ('doTerm -> <empty>','doTerm',0,'p_doTerm','parser.py',752),
  ('doAssign -> <empty>','doAssign',0,'p_doAssign','parser.py',779),
  ('doWrite -> <empty>','doWrite',0,'p_doWrite','parser.py',798),
  ('doWriteString -> <empty>','doWriteString',0,'p_doWriteString','parser.py',808),
  ('doReading -> <empty>','doReading',0,'p_doReading','parser.py',818),
  ('doIF -> <empty>','doIF',0,'p_doIF','parser.py',829),
  ('endIF -> <empty>','endIF',0,'p_endIF','parser.py',844),
  ('doElse -> <empty>','doElse',0,'p_doElse','parser.py',852),
  ('doWhile -> <empty>','doWhile',0,'p_doWhile','parser.py',864),
  ('endWhile -> <empty>','endWhile',0,'p_endWhile','parser.py',879),
  ('addCondStart -> <empty>','addCondStart',0,'p_addCondStart','parser.py',890),
  ('doFuncCall -> <empty>','doFuncCall',0,'p_doFunCall','parser.py',897),
  ('setVoidType -> <empty>','setVoidType',0,'p_setVoidType','parser.py',914),
  ('checkParams -> <empty>','checkParams',0,'p_checkParams','parser.py',918),
  ('checkType -> <empty>','checkType',0,'p_checkType','parser.py',926),
  ('doReturn -> <empty>','doReturn',0,'p_doReturn','parser.py',942),
  ('doGoSub -> <empty>','doGoSub',0,'p_doGoSub','parser.py',958),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',984),
]
