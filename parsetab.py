
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BINOMIAL BOOL COMMA CTE_BOOL CTE_FLOAT CTE_ID CTE_INT DIV ELSE EQUAL EXP FALSE FLOAT FOR FUNC GREATER_EQUAL_THAN GREATER_THAN IF INT LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PAREN LESS_EQUAL_THAN LESS_THAN MAIN MEAN MEDIAN MINUS MOD MODE NOT_EQUAL OR PLOT PLUS POISSON PRINT PROGRAM READ_INPUT RETURN RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PAREN SEMI_COLON STANDARD_DEVIATION STRING TIMES TRUE VAR VARIANCE VOID WHILE\n    program_main : PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint\n    \n    globalVariables : vars\n                    | empty\n    \n    globalFunctions : funcs\n                    | empty\n    \n    vars : VAR type vars_type\n         | VAR type vars_type_array\n         | VAR type vars_type_matrix\n         | empty\n    \n    vars_type : CTE_ID saveVariableID COMMA vars_type\n              | CTE_ID saveVariableID SEMI_COLON vars\n    \n    vars_type_array : CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array\n                    | CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON vars\n    \n    vars_type_matrix : CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix\n                     | CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON vars\n    \n    funcs : funcs_aux globalFunctions\n    \n    funcs_aux : FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody\n    \n    funcBody : LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET\n    \n    auxFuncBody : vars\n    \n    read : READ_INPUT LEFT_PAREN RIGHT_PAREN SEMI_COLON\n    \n    type : INT setCurrentType\n         | FLOAT setCurrentType\n         | BOOL setCurrentType\n         | STRING setCurrentType\n    startup :endPrint :saveFuncID :saveVariableID :setCurrentType :empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,46,51,58,],[0,-26,-1,-18,]),'CTE_ID':([2,15,16,17,18,19,22,27,28,29,30,36,56,65,],[3,26,-29,-29,-29,-29,32,-21,-22,-23,-24,41,60,68,]),'SEMI_COLON':([3,4,26,33,41,49,50,63,73,],[-25,5,-28,37,-28,37,57,66,57,]),'VAR':([5,37,47,57,66,],[9,9,9,9,9,]),'FUNC':([5,6,7,8,13,23,24,25,37,42,43,44,54,57,58,61,62,66,69,70,],[-30,14,-2,-3,14,-6,-7,-8,-30,-10,-11,-9,-17,-30,-18,-12,-13,-30,-14,-15,]),'MAIN':([5,6,7,8,10,11,12,13,21,23,24,25,37,42,43,44,54,57,58,61,62,66,69,70,],[-30,-30,-2,-3,20,-4,-5,-30,-16,-6,-7,-8,-30,-10,-11,-9,-17,-30,-18,-12,-13,-30,-14,-15,]),'INT':([9,14,],[16,16,]),'FLOAT':([9,14,],[17,17,]),'BOOL':([9,14,],[18,18,]),'STRING':([9,14,],[19,19,]),'LEFT_PAREN':([20,31,32,35,],[-27,34,-27,40,]),'RIGHT_CURLY_BRACKET':([23,24,25,37,42,43,44,47,52,53,57,61,62,66,69,70,],[-6,-7,-8,-30,-10,-11,-9,-30,58,-19,-30,-12,-13,-30,-14,-15,]),'COMMA':([26,33,41,49,50,63,73,],[-28,36,-28,36,56,65,56,]),'LEFT_BRACKET':([26,33,50,60,64,68,72,76,],[-28,38,55,-28,67,-28,74,55,]),'RIGHT_PAREN':([34,40,],[39,48,]),'CTE_INT':([38,55,67,74,],[45,59,71,75,]),'LEFT_CURLY_BRACKET':([39,48,],[47,47,]),'RIGHT_BRACKET':([45,59,71,75,],[50,63,73,76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_main':([0,],[1,]),'startup':([3,],[4,]),'globalVariables':([5,],[6,]),'vars':([5,37,47,57,66,],[7,43,53,62,70,]),'empty':([5,6,13,37,47,57,66,],[8,12,12,44,44,44,44,]),'globalFunctions':([6,13,],[10,21,]),'funcs':([6,13,],[11,11,]),'funcs_aux':([6,13,],[13,13,]),'type':([9,14,],[15,22,]),'vars_type':([15,36,],[23,42,]),'vars_type_array':([15,56,],[24,61,]),'vars_type_matrix':([15,65,],[25,69,]),'setCurrentType':([16,17,18,19,],[27,28,29,30,]),'saveFuncID':([20,32,],[31,35,]),'saveVariableID':([26,41,60,68,],[33,49,64,72,]),'funcBody':([39,48,],[46,54,]),'endPrint':([46,],[51,]),'auxFuncBody':([47,],[52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_main","S'",1,None,None,None),
  ('program_main -> PROGRAM CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID LEFT_PAREN RIGHT_PAREN funcBody endPrint','program_main',12,'p_mainFunction','parser.py',173),
  ('globalVariables -> vars','globalVariables',1,'p_globalVariables','parser.py',178),
  ('globalVariables -> empty','globalVariables',1,'p_globalVariables','parser.py',179),
  ('globalFunctions -> funcs','globalFunctions',1,'p_globalFunctions','parser.py',184),
  ('globalFunctions -> empty','globalFunctions',1,'p_globalFunctions','parser.py',185),
  ('vars -> VAR type vars_type','vars',3,'p_vars','parser.py',191),
  ('vars -> VAR type vars_type_array','vars',3,'p_vars','parser.py',192),
  ('vars -> VAR type vars_type_matrix','vars',3,'p_vars','parser.py',193),
  ('vars -> empty','vars',1,'p_vars','parser.py',194),
  ('vars_type -> CTE_ID saveVariableID COMMA vars_type','vars_type',4,'p_vars_type','parser.py',199),
  ('vars_type -> CTE_ID saveVariableID SEMI_COLON vars','vars_type',4,'p_vars_type','parser.py',200),
  ('vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_array','vars_type_array',7,'p_vars_type_array','parser.py',205),
  ('vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON vars','vars_type_array',7,'p_vars_type_array','parser.py',206),
  ('vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET COMMA vars_type_matrix','vars_type_matrix',10,'p_vars_type_matrix','parser.py',211),
  ('vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT RIGHT_BRACKET LEFT_BRACKET CTE_INT RIGHT_BRACKET SEMI_COLON vars','vars_type_matrix',10,'p_vars_type_matrix','parser.py',212),
  ('funcs -> funcs_aux globalFunctions','funcs',2,'p_funcs','parser.py',218),
  ('funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN RIGHT_PAREN funcBody','funcs_aux',7,'p_funcs_aux','parser.py',223),
  ('funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET','funcBody',3,'p_funcBody','parser.py',228),
  ('auxFuncBody -> vars','auxFuncBody',1,'p_auxFuncBody','parser.py',233),
  ('read -> READ_INPUT LEFT_PAREN RIGHT_PAREN SEMI_COLON','read',4,'p_read','parser.py',239),
  ('type -> INT setCurrentType','type',2,'p_type','parser.py',245),
  ('type -> FLOAT setCurrentType','type',2,'p_type','parser.py',246),
  ('type -> BOOL setCurrentType','type',2,'p_type','parser.py',247),
  ('type -> STRING setCurrentType','type',2,'p_type','parser.py',248),
  ('startup -> <empty>','startup',0,'p_startup','parser.py',253),
  ('endPrint -> <empty>','endPrint',0,'p_endPrint','parser.py',261),
  ('saveFuncID -> <empty>','saveFuncID',0,'p_saveFuncID','parser.py',265),
  ('saveVariableID -> <empty>','saveVariableID',0,'p_saveVariableID','parser.py',277),
  ('setCurrentType -> <empty>','setCurrentType',0,'p_setCurrentType','parser.py',289),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',302),
]
