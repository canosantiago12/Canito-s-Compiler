
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BINOMIAL BOOL BTSProgam COMMA CTE_FLOAT CTE_ID CTE_INT CTE_STRING DIV ELSE EQUAL EQUALS EXP FALSE FLOAT FOR FUNC GREATER_EQUAL_THAN GREATER_THAN IF INT LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PAREN LESS_EQUAL_THAN LESS_THAN MAIN MEAN MEDIAN MINUS MOD MODE NOT_EQUALS OR PLOT PLUS POISSON PRINT READ_INPUT RETURN RETURN_SIGN RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PAREN SEMI_COLON STANDARD_DEVIATION STRING TIMES TRUE VAR VARIANCE WHILE\n    program_main : BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint\n    \n    globalVariables : vars addMemoryInfo\n                    | empty\n    \n    globalFunctions : funcs\n                    | empty\n    \n    vars : auxVars\n    \n    auxVars : VAR type vars_type_single\n            | VAR type vars_type_array\n            | VAR type vars_type_matrix\n            | empty\n    \n    vars_type_single : CTE_ID saveVariableID COMMA vars_type_single\n                     | CTE_ID saveVariableID SEMI_COLON auxVars\n    \n    vars_type_array : CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array\n                    | CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars\n    \n    vars_type_matrix : CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix\n                     | CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars\n    \n    funcs : funcs_aux globalFunctions\n    \n    funcs_aux : FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n              | FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n    \n    params : auxParams\n          | empty\n    \n    auxParams : type CTE_ID addParam multipleParams\n    \n    multipleParams : COMMA auxParams\n                   | empty\n    \n    funcBody : LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET\n    \n    auxFuncBody : vars statements auxFuncBody\n                | statements auxFuncBody\n                | vars\n                | empty\n    \n    type : INT setCurrentType\n         | FLOAT setCurrentType\n         | BOOL setCurrentType\n         | STRING setCurrentType\n    \n    statements : assignment\n               | writting\n               | reading\n               | if\n               | while\n               | auxFuncCall\n               | return\n    \n    assignment : CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON\n    \n    writting : PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON\n    \n    auxWritting : logicExpression doWrite multipleWrite\n                | CTE_STRING doWriteString multipleWrite\n    \n    multipleWrite : COMMA auxWritting\n                  | empty\n    \n    reading : READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON\n    \n    auxReading : CTE_ID addOperand doReading multipleRead\n    \n    multipleRead : COMMA auxReading\n                 | empty\n    \n    logicExpression : exp doLogicExpression auxLogicExpression\n    \n    auxLogicExpression : AND addOperator logicExpression\n                       | OR addOperator logicExpression\n                       | empty\n    \n    exp : exp2 doCompExpression auxExp\n    \n    auxExp : GREATER_THAN addOperator exp\n           | GREATER_EQUAL_THAN addOperator exp\n           | LESS_THAN addOperator exp\n           | LESS_EQUAL_THAN addOperator exp\n           | NOT_EQUALS addOperator exp\n           | EQUALS addOperator exp\n           | empty\n    \n    exp2 : term doExpression exp2Aux\n    \n    exp2Aux : PLUS addOperator exp2\n            | MINUS addOperator exp2\n            | empty\n    \n    term : factor doTerm auxTerm\n    \n    auxTerm : TIMES addOperator term\n            | DIV addOperator term\n            | MOD addOperator term\n            | EXP addOperator term\n            | empty\n    \n    factor : LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis\n           | constants\n    \n    constants : CTE_ID addOperand\n              | CTE_INT addConstantOperand\n              | CTE_FLOAT addConstantOperand\n              | CTE_STRING addConstantOperand\n              | TRUE addConstantBool\n              | FALSE addConstantBool\n              | functionCall\n    \n    if : IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n    \n    else : ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n         | ELSE doElse funcBody\n         | empty\n    \n    while : WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile\n    \n    functionCall : CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub\n    \n    auxFuncCall : functionCall SEMI_COLON\n    \n    arguments : auxArguments\n              | empty\n    \n    auxArguments : logicExpression checkType multipleArguments\n    \n    multipleArguments : COMMA auxArguments\n                      | empty\n    \n    return : RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON\n    \n    auxReturn : logicExpression doReturn\n              | empty\n    startup :setMain :endProgram :endPrint :saveFuncID :addParam :addMemoryInfo :endFunction :saveVariableID :saveArray :saveMat :setCurrentType :addOperand :addConstantOperand :addConstantBool :addOperator :addParenthesis :removeParenthesis :doLogicExpression :doCompExpression :doExpression :doTerm :doAssign :doWrite :doWriteString :doReading :doIF :endIF :doElse :doWhile :endWhile :addCondStart :doFuncCall :setVoidType :checkParams :checkType :doReturn :doGoSub :empty :'
    
_lr_action_items = {'BTSProgam':([0,],[2,]),'$end':([1,65,72,99,100,118,],[0,-104,-99,-100,-25,-1,]),'CTE_ID':([2,9,15,17,18,19,20,21,24,26,27,28,30,31,32,33,41,42,48,49,50,53,66,74,75,76,77,78,79,80,81,82,83,97,98,100,101,105,106,107,108,109,116,117,120,121,122,141,142,145,150,177,179,183,184,187,188,189,190,191,192,195,196,199,200,201,202,204,210,211,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,235,237,239,241,242,244,263,265,266,269,271,274,276,282,283,284,],[3,-6,25,29,-108,-108,-108,-108,35,-7,-8,-9,-30,-31,-32,-33,47,-135,-11,-12,-10,61,84,84,84,-10,-34,-35,-36,-37,-38,-39,-40,115,-135,-25,84,131,138,131,-128,-88,-13,-14,-112,131,-113,131,131,131,131,-42,131,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-47,240,-135,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,138,-135,-94,-15,-16,-41,-124,-85,-127,-82,-86,-84,131,-135,-124,-83,]),'SEMI_COLON':([3,4,29,37,47,58,64,71,89,126,127,128,129,130,131,132,133,134,135,136,140,143,151,154,155,156,157,158,159,160,161,162,163,164,171,173,182,185,186,193,194,197,198,203,208,213,214,218,245,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,268,],[-97,5,-105,42,-105,42,-106,98,109,-115,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-107,177,-78,-135,-135,-135,-135,-75,-76,-77,-79,-80,204,211,-119,-51,-54,-55,-62,-63,-66,-67,-72,239,244,-134,-114,-87,-73,-52,-53,-56,-57,-58,-59,-60,-61,-64,-65,-68,-69,-70,-71,-106,]),'FUNC':([5,6,7,8,9,14,16,26,27,28,42,48,49,50,68,69,94,95,98,100,112,113,116,117,211,241,242,],[-135,15,-103,-3,-6,15,-2,-7,-8,-9,-135,-11,-12,-10,-103,-103,-104,-104,-135,-25,-18,-19,-13,-14,-135,-15,-16,]),'MAIN':([5,6,7,8,9,11,12,13,14,16,23,26,27,28,42,48,49,50,68,69,94,95,98,100,112,113,116,117,211,241,242,],[-135,-135,-103,-3,-6,22,-4,-5,-135,-2,-17,-7,-8,-9,-135,-11,-12,-10,-103,-103,-104,-104,-135,-25,-18,-19,-13,-14,-135,-15,-16,]),'VAR':([5,42,66,75,77,78,79,80,81,82,83,98,100,101,109,177,204,211,237,239,244,263,265,266,269,271,274,282,283,284,],[10,10,10,10,-34,-35,-36,-37,-38,-39,-40,10,-25,10,-88,-42,-47,10,-135,-94,-41,-124,-85,-127,-82,-86,-84,-135,-124,-83,]),'PRINT':([9,26,27,28,42,48,49,50,66,74,75,76,77,78,79,80,81,82,83,98,100,101,109,116,117,177,204,211,237,239,241,242,244,263,265,266,269,271,274,282,283,284,],[-6,-7,-8,-9,-135,-11,-12,-10,85,85,85,-10,-34,-35,-36,-37,-38,-39,-40,-135,-25,85,-88,-13,-14,-42,-47,-135,-135,-94,-15,-16,-41,-124,-85,-127,-82,-86,-84,-135,-124,-83,]),'READ_INPUT':([9,26,27,28,42,48,49,50,66,74,75,76,77,78,79,80,81,82,83,98,100,101,109,116,117,177,204,211,237,239,241,242,244,263,265,266,269,271,274,282,283,284,],[-6,-7,-8,-9,-135,-11,-12,-10,86,86,86,-10,-34,-35,-36,-37,-38,-39,-40,-135,-25,86,-88,-13,-14,-42,-47,-135,-135,-94,-15,-16,-41,-124,-85,-127,-82,-86,-84,-135,-124,-83,]),'IF':([9,26,27,28,42,48,49,50,66,74,75,76,77,78,79,80,81,82,83,98,100,101,109,116,117,177,204,211,237,239,241,242,244,263,264,265,266,269,270,271,274,282,283,284,],[-6,-7,-8,-9,-135,-11,-12,-10,87,87,87,-10,-34,-35,-36,-37,-38,-39,-40,-135,-25,87,-88,-13,-14,-42,-47,-135,-135,-94,-15,-16,-41,-124,-125,-85,-127,-82,273,-86,-84,-135,-124,-83,]),'WHILE':([9,26,27,28,42,48,49,50,66,74,75,76,77,78,79,80,81,82,83,98,100,101,109,116,117,177,204,211,237,239,241,242,244,263,265,266,269,271,274,282,283,284,],[-6,-7,-8,-9,-135,-11,-12,-10,88,88,88,-10,-34,-35,-36,-37,-38,-39,-40,-135,-25,88,-88,-13,-14,-42,-47,-135,-135,-94,-15,-16,-41,-124,-85,-127,-82,-86,-84,-135,-124,-83,]),'RETURN':([9,26,27,28,42,48,49,50,66,74,75,76,77,78,79,80,81,82,83,98,100,101,109,116,117,177,204,211,237,239,241,242,244,263,265,266,269,271,274,282,283,284,],[-6,-7,-8,-9,-135,-11,-12,-10,90,90,90,-10,-34,-35,-36,-37,-38,-39,-40,-135,-25,90,-88,-13,-14,-42,-47,-135,-135,-94,-15,-16,-41,-124,-85,-127,-82,-86,-84,-135,-124,-83,]),'RIGHT_CURLY_BRACKET':([9,26,27,28,42,48,49,50,66,73,74,75,76,77,78,79,80,81,82,83,98,100,101,102,109,116,117,119,177,204,211,237,239,241,242,244,263,265,266,269,271,274,282,283,284,],[-6,-7,-8,-9,-135,-11,-12,-10,-135,100,-28,-135,-10,-34,-35,-36,-37,-38,-39,-40,-135,-25,-135,-27,-88,-13,-14,-26,-42,-47,-135,-135,-94,-15,-16,-41,-124,-85,-127,-82,-86,-84,-135,-124,-83,]),'INT':([10,15,45,46,92,],[18,18,18,18,18,]),'FLOAT':([10,15,45,46,92,],[19,19,19,19,19,]),'BOOL':([10,15,45,46,92,],[20,20,20,20,20,]),'STRING':([10,15,45,46,92,],[21,21,21,21,21,]),'LEFT_PAREN':([22,25,34,35,36,38,39,40,84,85,86,87,88,104,105,107,108,110,120,121,122,131,141,142,145,150,179,183,184,187,188,189,190,191,192,195,196,199,200,201,202,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,273,276,],[-101,-101,-103,-101,-130,44,45,46,-129,105,106,107,108,121,122,122,-128,142,-112,122,-113,-129,122,122,122,122,122,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,276,122,]),'COMMA':([29,37,47,58,61,64,67,71,124,125,126,127,128,129,130,131,132,133,134,135,136,138,140,143,149,152,153,154,155,156,157,158,159,160,161,162,163,165,171,175,182,185,186,193,194,197,198,203,205,214,218,245,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,268,],[-105,41,-105,41,-102,-106,92,97,-120,-110,-115,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-109,-110,-107,-132,179,179,-78,-135,-135,-135,-135,-75,-76,-77,-79,-80,-122,210,216,-51,-54,-55,-62,-63,-66,-67,-72,235,-134,-114,-87,-73,-52,-53,-56,-57,-58,-59,-60,-61,-64,-65,-68,-69,-70,-71,-106,]),'LEFT_BRACKET':([29,37,64,115,144,240,267,279,],[-105,43,70,-105,172,-105,272,70,]),'CTE_INT':([43,70,105,107,108,120,121,122,141,142,145,150,172,179,183,184,187,188,189,190,191,192,195,196,199,200,201,202,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,272,276,],[51,96,132,132,-128,-112,132,-113,132,132,132,132,212,132,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,275,132,]),'RIGHT_PAREN':([44,45,46,54,55,56,57,61,67,91,93,111,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,142,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,174,175,176,178,180,181,182,185,186,193,194,197,198,203,205,207,209,214,215,217,218,219,234,236,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,278,280,],[52,-135,-135,62,-20,-21,63,-102,-135,-22,-24,-23,-135,151,-120,-110,-115,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,164,-109,-123,-110,-135,-131,-89,-90,-132,-135,-135,-78,-135,-135,-135,-135,-75,-76,-77,-79,-80,-122,206,-126,208,-133,-96,214,-135,218,-43,-46,-44,-51,-54,-55,-62,-63,-66,-67,-72,-135,238,-95,-134,-91,-93,-114,-45,-48,-50,-87,-92,-73,-52,-53,-56,-57,-58,-59,-60,-61,-64,-65,-68,-69,-70,-71,-49,-123,281,]),'RIGHT_BRACKET':([51,59,96,114,212,243,275,277,],[-110,64,-110,143,-110,268,-110,279,]),'LEFT_CURLY_BRACKET':([52,60,62,63,206,238,264,270,281,],[-98,66,66,66,66,66,-125,66,66,]),'EQUAL':([84,103,],[-109,120,]),'RETURN_SIGN':([90,],[110,]),'ELSE':([100,237,282,],[-25,264,264,]),'CTE_STRING':([105,107,108,120,121,122,141,142,145,150,179,183,184,187,188,189,190,191,192,195,196,199,200,201,202,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[125,140,-128,-112,140,-113,140,140,140,140,125,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'CTE_FLOAT':([105,107,108,120,121,122,141,142,145,150,179,183,184,187,188,189,190,191,192,195,196,199,200,201,202,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[133,133,-128,-112,133,-113,133,133,133,133,133,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'TRUE':([105,107,108,120,121,122,141,142,145,150,179,183,184,187,188,189,190,191,192,195,196,199,200,201,202,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[134,134,-128,-112,134,-113,134,134,134,134,134,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,]),'FALSE':([105,107,108,120,121,122,141,142,145,150,179,183,184,187,188,189,190,191,192,195,196,199,200,201,202,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[135,135,-128,-112,135,-113,135,135,135,135,135,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'TIMES':([125,129,130,131,132,133,134,135,136,140,154,158,159,160,161,162,163,214,218,245,247,],[-110,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,199,-75,-76,-77,-79,-80,-134,-114,-87,-73,]),'DIV':([125,129,130,131,132,133,134,135,136,140,154,158,159,160,161,162,163,214,218,245,247,],[-110,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,200,-75,-76,-77,-79,-80,-134,-114,-87,-73,]),'MOD':([125,129,130,131,132,133,134,135,136,140,154,158,159,160,161,162,163,214,218,245,247,],[-110,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,201,-75,-76,-77,-79,-80,-134,-114,-87,-73,]),'EXP':([125,129,130,131,132,133,134,135,136,140,154,158,159,160,161,162,163,214,218,245,247,],[-110,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,202,-75,-76,-77,-79,-80,-134,-114,-87,-73,]),'PLUS':([125,128,129,130,131,132,133,134,135,136,140,154,157,158,159,160,161,162,163,198,203,214,218,245,247,258,259,260,261,],[-110,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,195,-135,-75,-76,-77,-79,-80,-67,-72,-134,-114,-87,-73,-68,-69,-70,-71,]),'MINUS':([125,128,129,130,131,132,133,134,135,136,140,154,157,158,159,160,161,162,163,198,203,214,218,245,247,258,259,260,261,],[-110,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,196,-135,-75,-76,-77,-79,-80,-67,-72,-134,-114,-87,-73,-68,-69,-70,-71,]),'GREATER_THAN':([125,127,128,129,130,131,132,133,134,135,136,140,154,156,157,158,159,160,161,162,163,194,197,198,203,214,218,245,247,256,257,258,259,260,261,],[-110,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,187,-135,-135,-75,-76,-77,-79,-80,-63,-66,-67,-72,-134,-114,-87,-73,-64,-65,-68,-69,-70,-71,]),'GREATER_EQUAL_THAN':([125,127,128,129,130,131,132,133,134,135,136,140,154,156,157,158,159,160,161,162,163,194,197,198,203,214,218,245,247,256,257,258,259,260,261,],[-110,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,188,-135,-135,-75,-76,-77,-79,-80,-63,-66,-67,-72,-134,-114,-87,-73,-64,-65,-68,-69,-70,-71,]),'LESS_THAN':([125,127,128,129,130,131,132,133,134,135,136,140,154,156,157,158,159,160,161,162,163,194,197,198,203,214,218,245,247,256,257,258,259,260,261,],[-110,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,189,-135,-135,-75,-76,-77,-79,-80,-63,-66,-67,-72,-134,-114,-87,-73,-64,-65,-68,-69,-70,-71,]),'LESS_EQUAL_THAN':([125,127,128,129,130,131,132,133,134,135,136,140,154,156,157,158,159,160,161,162,163,194,197,198,203,214,218,245,247,256,257,258,259,260,261,],[-110,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,190,-135,-135,-75,-76,-77,-79,-80,-63,-66,-67,-72,-134,-114,-87,-73,-64,-65,-68,-69,-70,-71,]),'NOT_EQUALS':([125,127,128,129,130,131,132,133,134,135,136,140,154,156,157,158,159,160,161,162,163,194,197,198,203,214,218,245,247,256,257,258,259,260,261,],[-110,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,191,-135,-135,-75,-76,-77,-79,-80,-63,-66,-67,-72,-134,-114,-87,-73,-64,-65,-68,-69,-70,-71,]),'EQUALS':([125,127,128,129,130,131,132,133,134,135,136,140,154,156,157,158,159,160,161,162,163,194,197,198,203,214,218,245,247,256,257,258,259,260,261,],[-110,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,192,-135,-135,-75,-76,-77,-79,-80,-63,-66,-67,-72,-134,-114,-87,-73,-64,-65,-68,-69,-70,-71,]),'AND':([125,126,127,128,129,130,131,132,133,134,135,136,140,154,155,156,157,158,159,160,161,162,163,186,193,194,197,198,203,214,218,245,247,250,251,252,253,254,255,256,257,258,259,260,261,],[-110,-115,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,183,-135,-135,-135,-75,-76,-77,-79,-80,-55,-62,-63,-66,-67,-72,-134,-114,-87,-73,-56,-57,-58,-59,-60,-61,-64,-65,-68,-69,-70,-71,]),'OR':([125,126,127,128,129,130,131,132,133,134,135,136,140,154,155,156,157,158,159,160,161,162,163,186,193,194,197,198,203,214,218,245,247,250,251,252,253,254,255,256,257,258,259,260,261,],[-110,-115,-116,-117,-118,-74,-109,-110,-110,-111,-111,-81,-110,-78,184,-135,-135,-135,-75,-76,-77,-79,-80,-55,-62,-63,-66,-67,-72,-134,-114,-87,-73,-56,-57,-58,-59,-60,-61,-64,-65,-68,-69,-70,-71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_main':([0,],[1,]),'startup':([3,],[4,]),'globalVariables':([5,],[6,]),'vars':([5,66,75,101,],[7,74,74,74,]),'empty':([5,6,14,42,45,46,66,67,75,98,101,121,142,152,153,155,156,157,158,175,205,211,237,282,],[8,13,13,50,56,56,76,93,76,50,76,148,170,180,180,185,193,197,203,217,236,50,265,265,]),'auxVars':([5,42,66,75,98,101,211,],[9,49,9,9,117,9,242,]),'globalFunctions':([6,14,],[11,23,]),'funcs':([6,14,],[12,12,]),'funcs_aux':([6,14,],[14,14,]),'addMemoryInfo':([7,34,68,69,],[16,38,94,95,]),'type':([10,15,45,46,92,],[17,24,53,53,53,]),'vars_type_single':([17,41,],[26,48,]),'vars_type_array':([17,97,],[27,116,]),'vars_type_matrix':([17,210,],[28,241,]),'setCurrentType':([18,19,20,21,],[30,31,32,33,]),'saveFuncID':([22,25,35,],[34,36,39,]),'saveVariableID':([29,47,115,240,],[37,58,144,267,]),'setVoidType':([36,],[40,]),'params':([45,46,],[54,57,]),'auxParams':([45,46,92,],[55,55,111,]),'addConstantOperand':([51,96,125,132,133,140,212,275,],[59,114,154,160,161,154,243,277,]),'setMain':([52,],[60,]),'funcBody':([60,62,63,206,238,270,281,],[65,68,69,237,266,274,282,]),'addParam':([61,],[67,]),'saveArray':([64,268,],[71,71,]),'endFunction':([65,94,95,],[72,112,113,]),'auxFuncBody':([66,75,101,],[73,102,119,]),'statements':([66,74,75,101,],[75,101,75,75,]),'assignment':([66,74,75,101,],[77,77,77,77,]),'writting':([66,74,75,101,],[78,78,78,78,]),'reading':([66,74,75,101,],[79,79,79,79,]),'if':([66,74,75,101,],[80,80,80,80,]),'while':([66,74,75,101,],[81,81,81,81,]),'auxFuncCall':([66,74,75,101,],[82,82,82,82,]),'return':([66,74,75,101,],[83,83,83,83,]),'functionCall':([66,74,75,101,105,107,121,141,142,145,150,179,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[89,89,89,89,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'multipleParams':([67,],[91,]),'endProgram':([72,],[99,]),'addOperand':([84,131,138,],[103,159,165,]),'doFuncCall':([84,131,],[104,104,]),'endPrint':([99,],[118,]),'auxWritting':([105,179,],[123,219,]),'logicExpression':([105,107,121,141,142,145,150,179,216,220,221,276,],[124,139,149,167,169,173,176,124,149,248,249,278,]),'exp':([105,107,121,141,142,145,150,179,216,220,221,222,223,224,225,226,227,276,],[126,126,126,126,126,126,126,126,126,126,126,250,251,252,253,254,255,126,]),'exp2':([105,107,121,141,142,145,150,179,216,220,221,222,223,224,225,226,227,228,229,276,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,256,257,127,]),'term':([105,107,121,141,142,145,150,179,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,258,259,260,261,128,]),'factor':([105,107,121,141,142,145,150,179,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'constants':([105,107,121,141,142,145,150,179,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,276,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'auxReading':([106,235,],[137,262,]),'addCondStart':([108,],[141,]),'addOperator':([120,183,184,187,188,189,190,191,192,195,196,199,200,201,202,],[145,220,221,222,223,224,225,226,227,228,229,230,231,232,233,]),'arguments':([121,],[146,]),'auxArguments':([121,216,],[147,246,]),'addParenthesis':([122,],[150,]),'doWrite':([124,],[152,]),'doWriteString':([125,],[153,]),'doLogicExpression':([126,],[155,]),'doCompExpression':([127,],[156,]),'doExpression':([128,],[157,]),'doTerm':([129,],[158,]),'addConstantBool':([134,135,],[162,163,]),'doIF':([139,278,],[166,280,]),'auxReturn':([142,],[168,]),'saveMat':([143,],[171,]),'checkParams':([146,],[174,]),'checkType':([149,],[175,]),'multipleWrite':([152,153,],[178,181,]),'auxLogicExpression':([155,],[182,]),'auxExp':([156,],[186,]),'exp2Aux':([157,],[194,]),'auxTerm':([158,],[198,]),'doReading':([165,],[205,]),'doWhile':([167,],[207,]),'doReturn':([169,],[209,]),'doAssign':([173,],[213,]),'multipleArguments':([175,],[215,]),'multipleRead':([205,],[234,]),'doGoSub':([214,],[245,]),'removeParenthesis':([218,],[247,]),'else':([237,282,],[263,283,]),'endIF':([263,283,],[269,284,]),'doElse':([264,],[270,]),'endWhile':([266,],[271,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_main","S'",1,None,None,None),
  ('program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint','program_main',16,'p_mainFunction','parser.py',53),
  ('globalVariables -> vars addMemoryInfo','globalVariables',2,'p_globalVariables','parser.py',58),
  ('globalVariables -> empty','globalVariables',1,'p_globalVariables','parser.py',59),
  ('globalFunctions -> funcs','globalFunctions',1,'p_globalFunctions','parser.py',64),
  ('globalFunctions -> empty','globalFunctions',1,'p_globalFunctions','parser.py',65),
  ('vars -> auxVars','vars',1,'p_vars','parser.py',71),
  ('auxVars -> VAR type vars_type_single','auxVars',3,'p_auxVars','parser.py',76),
  ('auxVars -> VAR type vars_type_array','auxVars',3,'p_auxVars','parser.py',77),
  ('auxVars -> VAR type vars_type_matrix','auxVars',3,'p_auxVars','parser.py',78),
  ('auxVars -> empty','auxVars',1,'p_auxVars','parser.py',79),
  ('vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single','vars_type_single',4,'p_vars_type_single','parser.py',84),
  ('vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars','vars_type_single',4,'p_vars_type_single','parser.py',85),
  ('vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array','vars_type_array',9,'p_vars_type_array','parser.py',90),
  ('vars_type_array -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars','vars_type_array',9,'p_vars_type_array','parser.py',91),
  ('vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat COMMA vars_type_matrix','vars_type_matrix',13,'p_vars_type_matrix','parser.py',96),
  ('vars_type_matrix -> CTE_ID saveVariableID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveMat SEMI_COLON auxVars','vars_type_matrix',13,'p_vars_type_matrix','parser.py',97),
  ('funcs -> funcs_aux globalFunctions','funcs',2,'p_funcs','parser.py',103),
  ('funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',108),
  ('funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',109),
  ('params -> auxParams','params',1,'p_params','parser.py',114),
  ('params -> empty','params',1,'p_params','parser.py',115),
  ('auxParams -> type CTE_ID addParam multipleParams','auxParams',4,'p_auxParams','parser.py',120),
  ('multipleParams -> COMMA auxParams','multipleParams',2,'p_multipleParams','parser.py',125),
  ('multipleParams -> empty','multipleParams',1,'p_multipleParams','parser.py',126),
  ('funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET','funcBody',3,'p_funcBody','parser.py',131),
  ('auxFuncBody -> vars statements auxFuncBody','auxFuncBody',3,'p_auxFuncBody','parser.py',136),
  ('auxFuncBody -> statements auxFuncBody','auxFuncBody',2,'p_auxFuncBody','parser.py',137),
  ('auxFuncBody -> vars','auxFuncBody',1,'p_auxFuncBody','parser.py',138),
  ('auxFuncBody -> empty','auxFuncBody',1,'p_auxFuncBody','parser.py',139),
  ('type -> INT setCurrentType','type',2,'p_type','parser.py',151),
  ('type -> FLOAT setCurrentType','type',2,'p_type','parser.py',152),
  ('type -> BOOL setCurrentType','type',2,'p_type','parser.py',153),
  ('type -> STRING setCurrentType','type',2,'p_type','parser.py',154),
  ('statements -> assignment','statements',1,'p_statements','parser.py',160),
  ('statements -> writting','statements',1,'p_statements','parser.py',161),
  ('statements -> reading','statements',1,'p_statements','parser.py',162),
  ('statements -> if','statements',1,'p_statements','parser.py',163),
  ('statements -> while','statements',1,'p_statements','parser.py',164),
  ('statements -> auxFuncCall','statements',1,'p_statements','parser.py',165),
  ('statements -> return','statements',1,'p_statements','parser.py',166),
  ('assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',7,'p_assignment','parser.py',172),
  ('writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON','writting',5,'p_writting','parser.py',178),
  ('auxWritting -> logicExpression doWrite multipleWrite','auxWritting',3,'p_auxWritting','parser.py',183),
  ('auxWritting -> CTE_STRING doWriteString multipleWrite','auxWritting',3,'p_auxWritting','parser.py',184),
  ('multipleWrite -> COMMA auxWritting','multipleWrite',2,'p_multipleWrite','parser.py',189),
  ('multipleWrite -> empty','multipleWrite',1,'p_multipleWrite','parser.py',190),
  ('reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON','reading',5,'p_reading','parser.py',196),
  ('auxReading -> CTE_ID addOperand doReading multipleRead','auxReading',4,'p_auxReading','parser.py',201),
  ('multipleRead -> COMMA auxReading','multipleRead',2,'p_multipleRead','parser.py',206),
  ('multipleRead -> empty','multipleRead',1,'p_multipleRead','parser.py',207),
  ('logicExpression -> exp doLogicExpression auxLogicExpression','logicExpression',3,'p_logicExpression','parser.py',213),
  ('auxLogicExpression -> AND addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',218),
  ('auxLogicExpression -> OR addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',219),
  ('auxLogicExpression -> empty','auxLogicExpression',1,'p_auxLogicExpression','parser.py',220),
  ('exp -> exp2 doCompExpression auxExp','exp',3,'p_exp','parser.py',225),
  ('auxExp -> GREATER_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',230),
  ('auxExp -> GREATER_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',231),
  ('auxExp -> LESS_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',232),
  ('auxExp -> LESS_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',233),
  ('auxExp -> NOT_EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',234),
  ('auxExp -> EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',235),
  ('auxExp -> empty','auxExp',1,'p_auxExp','parser.py',236),
  ('exp2 -> term doExpression exp2Aux','exp2',3,'p_exp2','parser.py',241),
  ('exp2Aux -> PLUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',246),
  ('exp2Aux -> MINUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',247),
  ('exp2Aux -> empty','exp2Aux',1,'p_exp2Aux','parser.py',248),
  ('term -> factor doTerm auxTerm','term',3,'p_term','parser.py',254),
  ('auxTerm -> TIMES addOperator term','auxTerm',3,'p_auxTerm','parser.py',259),
  ('auxTerm -> DIV addOperator term','auxTerm',3,'p_auxTerm','parser.py',260),
  ('auxTerm -> MOD addOperator term','auxTerm',3,'p_auxTerm','parser.py',261),
  ('auxTerm -> EXP addOperator term','auxTerm',3,'p_auxTerm','parser.py',262),
  ('auxTerm -> empty','auxTerm',1,'p_auxTerm','parser.py',263),
  ('factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis','factor',5,'p_factor','parser.py',269),
  ('factor -> constants','factor',1,'p_factor','parser.py',270),
  ('constants -> CTE_ID addOperand','constants',2,'p_constants','parser.py',275),
  ('constants -> CTE_INT addConstantOperand','constants',2,'p_constants','parser.py',276),
  ('constants -> CTE_FLOAT addConstantOperand','constants',2,'p_constants','parser.py',277),
  ('constants -> CTE_STRING addConstantOperand','constants',2,'p_constants','parser.py',278),
  ('constants -> TRUE addConstantBool','constants',2,'p_constants','parser.py',279),
  ('constants -> FALSE addConstantBool','constants',2,'p_constants','parser.py',280),
  ('constants -> functionCall','constants',1,'p_constants','parser.py',281),
  ('if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','if',8,'p_if','parser.py',287),
  ('else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','else',10,'p_else','parser.py',292),
  ('else -> ELSE doElse funcBody','else',3,'p_else','parser.py',293),
  ('else -> empty','else',1,'p_else','parser.py',294),
  ('while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile','while',8,'p_while','parser.py',300),
  ('functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub','functionCall',7,'p_functionCall','parser.py',306),
  ('auxFuncCall -> functionCall SEMI_COLON','auxFuncCall',2,'p_auxFuncCall','parser.py',311),
  ('arguments -> auxArguments','arguments',1,'p_arguments','parser.py',316),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',317),
  ('auxArguments -> logicExpression checkType multipleArguments','auxArguments',3,'p_auxArguments','parser.py',322),
  ('multipleArguments -> COMMA auxArguments','multipleArguments',2,'p_multipleArguments','parser.py',327),
  ('multipleArguments -> empty','multipleArguments',1,'p_multipleArguments','parser.py',328),
  ('return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON','return',6,'p_return','parser.py',334),
  ('auxReturn -> logicExpression doReturn','auxReturn',2,'p_auxReturn','parser.py',339),
  ('auxReturn -> empty','auxReturn',1,'p_auxReturn','parser.py',340),
  ('startup -> <empty>','startup',0,'p_startup','parser.py',372),
  ('setMain -> <empty>','setMain',0,'p_setMain','parser.py',383),
  ('endProgram -> <empty>','endProgram',0,'p_endProgram','parser.py',389),
  ('endPrint -> <empty>','endPrint',0,'p_endPrint','parser.py',396),
  ('saveFuncID -> <empty>','saveFuncID',0,'p_saveFuncID','parser.py',413),
  ('addParam -> <empty>','addParam',0,'p_addParam','parser.py',441),
  ('addMemoryInfo -> <empty>','addMemoryInfo',0,'p_addMemoryInfo','parser.py',472),
  ('endFunction -> <empty>','endFunction',0,'p_endFunction','parser.py',480),
  ('saveVariableID -> <empty>','saveVariableID',0,'p_saveVariableID','parser.py',500),
  ('saveArray -> <empty>','saveArray',0,'p_saveArray','parser.py',528),
  ('saveMat -> <empty>','saveMat',0,'p_saveMat','parser.py',542),
  ('setCurrentType -> <empty>','setCurrentType',0,'p_setCurrentType','parser.py',545),
  ('addOperand -> <empty>','addOperand',0,'p_addOperand','parser.py',551),
  ('addConstantOperand -> <empty>','addConstantOperand',0,'p_addConstantOperand','parser.py',566),
  ('addConstantBool -> <empty>','addConstantBool',0,'p_addConstantBool','parser.py',590),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','parser.py',601),
  ('addParenthesis -> <empty>','addParenthesis',0,'p_addParenthesis','parser.py',608),
  ('removeParenthesis -> <empty>','removeParenthesis',0,'p_removeParenthesis','parser.py',614),
  ('doLogicExpression -> <empty>','doLogicExpression',0,'p_doLogicExpression','parser.py',621),
  ('doCompExpression -> <empty>','doCompExpression',0,'p_doCompExpression','parser.py',648),
  ('doExpression -> <empty>','doExpression',0,'p_doExpression','parser.py',675),
  ('doTerm -> <empty>','doTerm',0,'p_doTerm','parser.py',702),
  ('doAssign -> <empty>','doAssign',0,'p_doAssign','parser.py',729),
  ('doWrite -> <empty>','doWrite',0,'p_doWrite','parser.py',748),
  ('doWriteString -> <empty>','doWriteString',0,'p_doWriteString','parser.py',758),
  ('doReading -> <empty>','doReading',0,'p_doReading','parser.py',768),
  ('doIF -> <empty>','doIF',0,'p_doIF','parser.py',779),
  ('endIF -> <empty>','endIF',0,'p_endIF','parser.py',794),
  ('doElse -> <empty>','doElse',0,'p_doElse','parser.py',802),
  ('doWhile -> <empty>','doWhile',0,'p_doWhile','parser.py',814),
  ('endWhile -> <empty>','endWhile',0,'p_endWhile','parser.py',829),
  ('addCondStart -> <empty>','addCondStart',0,'p_addCondStart','parser.py',840),
  ('doFuncCall -> <empty>','doFuncCall',0,'p_doFunCall','parser.py',847),
  ('setVoidType -> <empty>','setVoidType',0,'p_setVoidType','parser.py',864),
  ('checkParams -> <empty>','checkParams',0,'p_checkParams','parser.py',868),
  ('checkType -> <empty>','checkType',0,'p_checkType','parser.py',876),
  ('doReturn -> <empty>','doReturn',0,'p_doReturn','parser.py',892),
  ('doGoSub -> <empty>','doGoSub',0,'p_doGoSub','parser.py',908),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',934),
]
