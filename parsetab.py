
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BINOMIAL BOOL BTSProgam CHISQUARE COMMA COMPARE CTE_FLOAT CTE_ID CTE_INT CTE_STRING DIV ELSE EQUAL EQUALS EXP EXPONENTIAL FALSE FLOAT FOR FUNC GREATER_EQUAL_THAN GREATER_THAN IF INT LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PAREN LESS_EQUAL_THAN LESS_THAN LOGISTIC MAIN MINUS MOD NORMAL NOT_EQUALS OR PLUS POISSON PRINT READ_INPUT RETURN RETURN_SIGN RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PAREN SEMI_COLON STRING TIMES TRUE UNIFORM VAR WHILE\n    program_main : BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint\n    \n    globalVariables : vars addMemoryInfo\n                    | empty\n    \n    globalFunctions : funcs\n                    | empty\n    \n    vars : auxVars\n    \n    auxVars : VAR type vars_type_single\n            | VAR type vars_type_array\n            | empty\n    \n    vars_type_single : CTE_ID saveVariableID COMMA vars_type_single\n                     | CTE_ID saveVariableID SEMI_COLON auxVars\n    \n    vars_type_array : CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array\n                    | CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars\n    \n    funcs : funcs_aux globalFunctions\n    \n    funcs_aux : FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n              | FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n    \n    params : auxParams\n          | empty\n    \n    auxParams : type CTE_ID addParam multipleParams\n              | type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams\n    \n    multipleParams : COMMA auxParams\n                   | empty\n    \n    funcBody : LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET\n    \n    auxFuncBody : vars statements auxFuncBody\n                | statements auxFuncBody\n                | vars\n                | empty\n    \n    type : INT setCurrentType\n         | FLOAT setCurrentType\n         | BOOL setCurrentType\n         | STRING setCurrentType\n    \n    statements : assignment\n               | writting\n               | reading\n               | if\n               | while\n               | auxFuncCall\n               | return\n    \n    assignment : CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON\n               | CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON\n    \n    writting : PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON\n    \n    auxWritting : logicExpression doWrite multipleWrite\n                | CTE_STRING doWriteString multipleWrite\n    \n    multipleWrite : COMMA auxWritting\n                  | empty\n    \n    reading : READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON\n    \n    auxReading : CTE_ID addOperand doReading multipleRead\n    \n    multipleRead : COMMA auxReading\n                 | empty\n    \n    logicExpression : exp doLogicExpression auxLogicExpression\n    \n    auxLogicExpression : AND addOperator logicExpression\n                       | OR addOperator logicExpression\n                       | empty\n    \n    exp : exp2 doCompExpression auxExp\n    \n    auxExp : GREATER_THAN addOperator exp\n           | GREATER_EQUAL_THAN addOperator exp\n           | LESS_THAN addOperator exp\n           | LESS_EQUAL_THAN addOperator exp\n           | NOT_EQUALS addOperator exp\n           | EQUALS addOperator exp\n           | empty\n    \n    exp2 : term doExpression exp2Aux\n    \n    exp2Aux : PLUS addOperator exp2\n            | MINUS addOperator exp2\n            | empty\n    \n    term : factor doTerm auxTerm\n    \n    auxTerm : TIMES addOperator term\n            | DIV addOperator term\n            | MOD addOperator term\n            | EXP addOperator term\n            | empty\n    \n    factor : LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis\n           | constants\n    \n    constants : CTE_ID addOperand\n              | CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis\n              | CTE_INT addConstantOperand\n              | CTE_FLOAT addConstantOperand\n              | CTE_STRING addConstantOperand\n              | TRUE addConstantBool\n              | FALSE addConstantBool\n              | functionCall\n    \n    if : IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n    \n    else : ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n         | ELSE doElse funcBody\n         | empty\n    \n    while : WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile\n    \n    functionCall : CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub\n                 | BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n    \n    auxFuncCall : functionCall SEMI_COLON\n    \n    arguments : auxArguments\n              | empty\n    \n    auxArguments : logicExpression checkType multipleArguments\n    \n    multipleArguments : COMMA auxArguments\n                      | empty\n    \n    return : RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON\n    \n    auxReturn : logicExpression doReturn\n              | empty\n    startup :setMain :endProgram :endPrint :saveFuncID :addParam :addMemoryInfo :endFunction :saveVariableID :saveArray :setCurrentType :addOperand :addConstantOperand :addConstantBool :addOperator :addParenthesis :removeParenthesis :doLogicExpression :doCompExpression :doExpression :doTerm :doAssign :doWrite :doWriteString :doReading :doIF :endIF :doElse :doWhile :endWhile :addCondStart :doFuncCall :setVoidType :checkParams :checkType :doReturn :doGoSub :doGoSubS :empty :'
    
_lr_action_items = {'BTSProgam':([0,],[2,]),'$end':([1,64,71,107,108,132,],[0,-112,-107,-108,-23,-1,]),'CTE_ID':([2,9,15,17,18,19,20,21,24,26,27,29,30,31,32,41,42,48,49,50,53,65,69,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,115,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,275,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[3,-6,25,28,-115,-115,-115,-115,34,-7,-8,-28,-29,-30,-31,47,-143,-10,-11,-9,60,83,104,-143,83,83,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,83,-120,146,153,146,-135,-96,-119,146,146,-120,146,146,146,146,146,146,146,146,146,146,146,146,-120,-41,146,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,146,-46,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,153,-143,-102,-39,-131,-85,-134,-119,-82,-86,146,-84,146,-40,-143,-131,-83,]),'SEMI_COLON':([3,4,28,36,47,58,63,88,141,142,143,144,145,146,147,148,149,150,151,155,174,177,178,179,180,181,182,184,185,186,187,188,204,214,217,218,225,226,229,230,235,241,251,253,257,280,281,282,283,284,285,286,287,290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,330,332,],[-105,5,-113,42,-113,-114,70,118,-122,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,209,-78,-143,-143,-143,-143,-74,-76,-77,-79,-80,237,-126,-50,-53,-54,-61,-62,-65,-66,-71,279,288,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,-126,334,]),'FUNC':([5,6,7,8,9,14,16,26,27,42,48,49,50,67,68,70,102,103,105,106,108,130,131,],[-143,15,-111,-3,-6,15,-2,-7,-8,-143,-10,-11,-9,-111,-111,-143,-112,-112,-12,-13,-23,-15,-16,]),'MAIN':([5,6,7,8,9,11,12,13,14,16,23,26,27,42,48,49,50,67,68,70,102,103,105,106,108,130,131,],[-143,-143,-111,-3,-6,22,-4,-5,-143,-2,-14,-7,-8,-143,-10,-11,-9,-111,-111,-143,-112,-112,-12,-13,-23,-15,-16,]),'VAR':([5,42,65,70,74,76,77,78,79,80,81,82,108,109,118,209,237,277,279,288,309,311,312,323,325,329,334,337,338,339,],[10,10,10,10,10,-32,-33,-34,-35,-36,-37,-38,-23,10,-96,-41,-46,-143,-102,-39,-131,-85,-134,-82,-86,-84,-40,-143,-131,-83,]),'PRINT':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,209,237,277,279,288,309,311,312,323,325,329,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,84,-143,84,84,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,84,-96,-41,-46,-143,-102,-39,-131,-85,-134,-82,-86,-84,-40,-143,-131,-83,]),'READ_INPUT':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,209,237,277,279,288,309,311,312,323,325,329,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,85,-143,85,85,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,85,-96,-41,-46,-143,-102,-39,-131,-85,-134,-82,-86,-84,-40,-143,-131,-83,]),'IF':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,209,237,277,279,288,309,310,311,312,323,324,325,329,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,86,-143,86,86,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,86,-96,-41,-46,-143,-102,-39,-131,-132,-85,-134,-82,328,-86,-84,-40,-143,-131,-83,]),'WHILE':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,209,237,277,279,288,309,311,312,323,325,329,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,87,-143,87,87,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,87,-96,-41,-46,-143,-102,-39,-131,-85,-134,-82,-86,-84,-40,-143,-131,-83,]),'RETURN':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,209,237,277,279,288,309,311,312,323,325,329,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,89,-143,89,89,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,89,-96,-41,-46,-143,-102,-39,-131,-85,-134,-82,-86,-84,-40,-143,-131,-83,]),'BINOMIAL':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,90,-143,90,90,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,90,-120,90,90,-135,-96,-119,90,90,-120,90,90,90,90,90,90,90,90,90,90,90,90,-120,-41,90,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,90,-46,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-143,-102,-39,-131,-85,-134,-119,-82,-86,90,-84,90,-40,-143,-131,-83,]),'POISSON':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,91,-143,91,91,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,91,-120,91,91,-135,-96,-119,91,91,-120,91,91,91,91,91,91,91,91,91,91,91,91,-120,-41,91,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,91,-46,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-143,-102,-39,-131,-85,-134,-119,-82,-86,91,-84,91,-40,-143,-131,-83,]),'COMPARE':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,92,-143,92,92,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,92,-120,92,92,-135,-96,-119,92,92,-120,92,92,92,92,92,92,92,92,92,92,92,92,-120,-41,92,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,92,-46,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-143,-102,-39,-131,-85,-134,-119,-82,-86,92,-84,92,-40,-143,-131,-83,]),'NORMAL':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,93,-143,93,93,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,93,-120,93,93,-135,-96,-119,93,93,-120,93,93,93,93,93,93,93,93,93,93,93,93,-120,-41,93,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,93,-46,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-143,-102,-39,-131,-85,-134,-119,-82,-86,93,-84,93,-40,-143,-131,-83,]),'UNIFORM':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,94,-143,94,94,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,94,-120,94,94,-135,-96,-119,94,94,-120,94,94,94,94,94,94,94,94,94,94,94,94,-120,-41,94,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,94,-46,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-143,-102,-39,-131,-85,-134,-119,-82,-86,94,-84,94,-40,-143,-131,-83,]),'LOGISTIC':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,95,-143,95,95,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,95,-120,95,95,-135,-96,-119,95,95,-120,95,95,95,95,95,95,95,95,95,95,95,95,-120,-41,95,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,95,-46,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-143,-102,-39,-131,-85,-134,-119,-82,-86,95,-84,95,-40,-143,-131,-83,]),'EXPONENTIAL':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,96,-143,96,96,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,96,-120,96,96,-135,-96,-119,96,96,-120,96,96,96,96,96,96,96,96,96,96,96,96,-120,-41,96,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,96,-46,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-143,-102,-39,-131,-85,-134,-119,-82,-86,96,-84,96,-40,-143,-131,-83,]),'CHISQUARE':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,209,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,237,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,277,279,288,309,311,312,321,323,325,326,329,331,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,97,-143,97,97,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,97,-120,97,97,-135,-96,-119,97,97,-120,97,97,97,97,97,97,97,97,97,97,97,97,-120,-41,97,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,97,-46,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-143,-102,-39,-131,-85,-134,-119,-82,-86,97,-84,97,-40,-143,-131,-83,]),'RIGHT_CURLY_BRACKET':([9,26,27,42,48,49,50,65,70,72,73,74,75,76,77,78,79,80,81,82,105,106,108,109,110,118,133,209,237,277,279,288,309,311,312,323,325,329,334,337,338,339,],[-6,-7,-8,-143,-10,-11,-9,-143,-143,108,-26,-143,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,-143,-25,-96,-24,-41,-46,-143,-102,-39,-131,-85,-134,-82,-86,-84,-40,-143,-131,-83,]),'INT':([10,15,45,46,100,],[18,18,18,18,18,]),'FLOAT':([10,15,45,46,100,],[19,19,19,19,19,]),'BOOL':([10,15,45,46,100,],[20,20,20,20,20,]),'STRING':([10,15,45,46,100,],[21,21,21,21,21,]),'LEFT_PAREN':([22,25,33,34,35,38,39,40,83,84,85,86,87,90,91,92,93,94,95,96,97,112,113,114,116,117,119,120,121,122,123,124,125,126,127,134,135,136,137,146,156,157,158,159,160,161,162,163,164,165,167,173,183,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,321,326,328,331,],[-109,-109,-111,-109,-137,44,45,46,-136,114,115,116,117,-136,-136,-136,-136,-136,-136,-136,-136,-120,136,137,137,-135,157,158,159,160,161,162,163,164,165,-119,137,137,-120,-136,137,137,137,137,137,137,137,137,137,137,137,137,-120,137,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-119,137,331,137,]),'LEFT_BRACKET':([28,60,66,83,104,146,],[37,-110,99,112,37,183,]),'COMMA':([28,36,47,58,60,63,66,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,166,172,175,176,177,178,179,180,181,182,184,185,186,187,189,207,214,217,218,225,226,229,230,235,238,253,257,280,281,282,283,284,285,286,287,290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-113,41,-113,-114,-110,69,100,-127,-117,-122,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-116,-117,100,-139,211,211,-78,-143,-143,-143,-143,-74,-76,-77,-79,-80,-129,255,-50,-53,-54,-61,-62,-65,-66,-71,275,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'CTE_INT':([37,99,112,114,116,117,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,321,326,331,],[43,128,-120,147,147,-135,-119,147,147,-120,147,147,147,147,147,147,147,147,147,147,147,147,-120,147,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,-119,147,147,]),'RIGHT_BRACKET':([43,51,128,141,142,143,144,145,146,147,148,149,150,151,155,168,177,178,179,180,181,182,184,185,186,187,214,217,218,225,226,229,230,235,253,257,273,280,281,282,283,284,285,286,287,290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,58,166,-122,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,205,-78,-143,-143,-143,-143,-74,-76,-77,-79,-80,-50,-53,-54,-61,-62,-65,-66,-71,-141,-121,307,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'RIGHT_PAREN':([44,45,46,54,55,56,57,60,66,98,101,129,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,159,160,161,162,163,164,165,166,169,170,171,172,175,176,177,178,179,180,181,182,184,185,186,187,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,206,207,208,210,212,213,214,217,218,225,226,229,230,235,238,240,242,243,244,245,246,247,248,249,250,253,254,256,257,258,274,276,280,281,282,283,284,285,286,287,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,313,314,315,316,317,318,319,320,322,327,333,335,],[52,-143,-143,61,-17,-18,62,-110,-143,-19,-22,-21,-143,174,-127,-117,-122,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,188,-116,-130,-117,-143,-143,-143,-143,-143,-143,-143,-143,-143,-143,-138,-97,-98,-139,-143,-143,-78,-143,-143,-143,-143,-74,-76,-77,-79,-80,-129,239,-133,241,-140,-104,-138,-138,-138,-138,-138,-138,-138,-138,-20,253,-143,257,-42,-45,-43,-50,-53,-54,-61,-62,-65,-66,-71,-143,278,-103,280,281,282,283,284,285,286,287,-141,-99,-101,-121,-44,-47,-49,-142,-142,-142,-142,-142,-142,-142,-142,-87,-100,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-116,-48,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,-130,336,]),'LEFT_CURLY_BRACKET':([52,59,61,62,239,278,310,324,336,],[-106,65,65,65,65,65,-132,65,65,]),'EQUAL':([83,111,205,252,289,],[-116,134,-116,-121,321,]),'RETURN_SIGN':([89,],[119,]),'ELSE':([108,277,337,],[-23,310,310,]),'CTE_FLOAT':([112,114,116,117,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,321,326,331,],[-120,148,148,-135,-119,148,148,-120,148,148,148,148,148,148,148,148,148,148,148,148,-120,148,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,-119,148,148,]),'CTE_STRING':([112,114,116,117,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,321,326,331,],[-120,140,155,-135,-119,155,155,-120,155,155,155,155,155,155,155,155,155,155,155,155,-120,140,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,-119,155,155,]),'TRUE':([112,114,116,117,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,321,326,331,],[-120,149,149,-135,-119,149,149,-120,149,149,149,149,149,149,149,149,149,149,149,149,-120,149,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,-119,149,149,]),'FALSE':([112,114,116,117,134,135,136,137,156,157,158,159,160,161,162,163,164,165,167,173,183,211,215,216,219,220,221,222,223,224,227,228,231,232,233,234,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,321,326,331,],[-120,150,150,-135,-119,150,150,-120,150,150,150,150,150,150,150,150,150,150,150,150,-120,150,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,-119,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,-119,150,150,]),'TIMES':([140,144,145,146,147,148,149,150,151,155,177,181,182,184,185,186,187,253,257,280,281,282,283,284,285,286,287,290,292,307,313,314,315,316,317,318,319,320,322,327,],[-117,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,231,-74,-76,-77,-79,-80,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'DIV':([140,144,145,146,147,148,149,150,151,155,177,181,182,184,185,186,187,253,257,280,281,282,283,284,285,286,287,290,292,307,313,314,315,316,317,318,319,320,322,327,],[-117,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,232,-74,-76,-77,-79,-80,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'MOD':([140,144,145,146,147,148,149,150,151,155,177,181,182,184,185,186,187,253,257,280,281,282,283,284,285,286,287,290,292,307,313,314,315,316,317,318,319,320,322,327,],[-117,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,233,-74,-76,-77,-79,-80,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'EXP':([140,144,145,146,147,148,149,150,151,155,177,181,182,184,185,186,187,253,257,280,281,282,283,284,285,286,287,290,292,307,313,314,315,316,317,318,319,320,322,327,],[-117,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,234,-74,-76,-77,-79,-80,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'PLUS':([140,143,144,145,146,147,148,149,150,151,155,177,180,181,182,184,185,186,187,230,235,253,257,280,281,282,283,284,285,286,287,290,292,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,227,-143,-74,-76,-77,-79,-80,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'MINUS':([140,143,144,145,146,147,148,149,150,151,155,177,180,181,182,184,185,186,187,230,235,253,257,280,281,282,283,284,285,286,287,290,292,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,228,-143,-74,-76,-77,-79,-80,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'GREATER_THAN':([140,142,143,144,145,146,147,148,149,150,151,155,177,179,180,181,182,184,185,186,187,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,219,-143,-143,-74,-76,-77,-79,-80,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'GREATER_EQUAL_THAN':([140,142,143,144,145,146,147,148,149,150,151,155,177,179,180,181,182,184,185,186,187,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,220,-143,-143,-74,-76,-77,-79,-80,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'LESS_THAN':([140,142,143,144,145,146,147,148,149,150,151,155,177,179,180,181,182,184,185,186,187,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,221,-143,-143,-74,-76,-77,-79,-80,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'LESS_EQUAL_THAN':([140,142,143,144,145,146,147,148,149,150,151,155,177,179,180,181,182,184,185,186,187,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,222,-143,-143,-74,-76,-77,-79,-80,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'NOT_EQUALS':([140,142,143,144,145,146,147,148,149,150,151,155,177,179,180,181,182,184,185,186,187,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,223,-143,-143,-74,-76,-77,-79,-80,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'EQUALS':([140,142,143,144,145,146,147,148,149,150,151,155,177,179,180,181,182,184,185,186,187,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,224,-143,-143,-74,-76,-77,-79,-80,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'AND':([140,141,142,143,144,145,146,147,148,149,150,151,155,177,178,179,180,181,182,184,185,186,187,218,225,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,295,296,297,298,299,300,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-122,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,215,-143,-143,-143,-74,-76,-77,-79,-80,-54,-61,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),'OR':([140,141,142,143,144,145,146,147,148,149,150,151,155,177,178,179,180,181,182,184,185,186,187,218,225,226,229,230,235,253,257,280,281,282,283,284,285,286,287,290,292,295,296,297,298,299,300,301,302,303,304,305,306,307,313,314,315,316,317,318,319,320,322,327,],[-117,-122,-123,-124,-125,-73,-116,-117,-117,-118,-118,-81,-117,-78,216,-143,-143,-143,-74,-76,-77,-79,-80,-54,-61,-62,-65,-66,-71,-141,-121,-142,-142,-142,-142,-142,-142,-142,-142,-87,-72,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-116,-88,-89,-90,-91,-92,-93,-94,-95,-121,-75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_main':([0,],[1,]),'startup':([3,],[4,]),'globalVariables':([5,],[6,]),'vars':([5,65,74,109,],[7,73,73,73,]),'empty':([5,6,14,42,45,46,65,66,70,74,109,136,157,158,159,160,161,162,163,164,165,166,175,176,178,179,180,181,207,238,277,337,],[8,13,13,50,56,56,75,101,50,75,75,171,194,171,171,171,171,171,171,171,171,101,212,212,217,225,229,235,256,276,311,311,]),'auxVars':([5,42,65,70,74,109,],[9,49,9,106,9,9,]),'globalFunctions':([6,14,],[11,23,]),'funcs':([6,14,],[12,12,]),'funcs_aux':([6,14,],[14,14,]),'addMemoryInfo':([7,33,67,68,],[16,38,102,103,]),'type':([10,15,45,46,100,],[17,24,53,53,53,]),'vars_type_single':([17,41,],[26,48,]),'vars_type_array':([17,69,],[27,105,]),'setCurrentType':([18,19,20,21,],[29,30,31,32,]),'saveFuncID':([22,25,34,],[33,35,39,]),'saveVariableID':([28,47,],[36,36,]),'setVoidType':([35,],[40,]),'addConstantOperand':([43,140,147,148,155,],[51,177,184,185,177,]),'params':([45,46,],[54,57,]),'auxParams':([45,46,100,],[55,55,129,]),'setMain':([52,],[59,]),'saveArray':([58,],[63,]),'funcBody':([59,61,62,239,278,324,336,],[64,67,68,277,312,329,337,]),'addParam':([60,],[66,]),'endFunction':([64,102,103,],[71,130,131,]),'auxFuncBody':([65,74,109,],[72,110,133,]),'statements':([65,73,74,109,],[74,109,74,74,]),'assignment':([65,73,74,109,],[76,76,76,76,]),'writting':([65,73,74,109,],[77,77,77,77,]),'reading':([65,73,74,109,],[78,78,78,78,]),'if':([65,73,74,109,],[79,79,79,79,]),'while':([65,73,74,109,],[80,80,80,80,]),'auxFuncCall':([65,73,74,109,],[81,81,81,81,]),'return':([65,73,74,109,],[82,82,82,82,]),'functionCall':([65,73,74,109,114,116,135,136,156,157,158,159,160,161,162,163,164,165,167,173,211,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,326,331,],[88,88,88,88,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,]),'multipleParams':([66,166,],[98,203,]),'endProgram':([71,],[107,]),'addOperand':([83,146,153,205,307,],[111,182,189,252,322,]),'doFuncCall':([83,90,91,92,93,94,95,96,97,146,],[113,120,121,122,123,124,125,126,127,113,]),'endPrint':([107,],[132,]),'addParenthesis':([112,137,183,],[135,173,236,]),'auxWritting':([114,211,],[138,258,]),'logicExpression':([114,116,135,136,156,157,158,159,160,161,162,163,164,165,167,173,211,236,255,259,260,326,331,],[139,154,168,172,191,193,172,172,172,172,172,172,172,172,204,208,139,273,172,293,294,330,333,]),'exp':([114,116,135,136,156,157,158,159,160,161,162,163,164,165,167,173,211,236,255,259,260,261,262,263,264,265,266,326,331,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,295,296,297,298,299,300,141,141,]),'exp2':([114,116,135,136,156,157,158,159,160,161,162,163,164,165,167,173,211,236,255,259,260,261,262,263,264,265,266,267,268,326,331,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,301,302,142,142,]),'term':([114,116,135,136,156,157,158,159,160,161,162,163,164,165,167,173,211,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,326,331,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,303,304,305,306,143,143,]),'factor':([114,116,135,136,156,157,158,159,160,161,162,163,164,165,167,173,211,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,326,331,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'constants':([114,116,135,136,156,157,158,159,160,161,162,163,164,165,167,173,211,236,255,259,260,261,262,263,264,265,266,267,268,269,270,271,272,326,331,],[145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,]),'auxReading':([115,275,],[152,308,]),'addCondStart':([117,],[156,]),'addOperator':([134,215,216,219,220,221,222,223,224,227,228,231,232,233,234,321,],[167,259,260,261,262,263,264,265,266,267,268,269,270,271,272,326,]),'arguments':([136,158,159,160,161,162,163,164,165,],[169,195,196,197,198,199,200,201,202,]),'auxArguments':([136,158,159,160,161,162,163,164,165,255,],[170,170,170,170,170,170,170,170,170,291,]),'doWrite':([139,],[175,]),'doWriteString':([140,],[176,]),'doLogicExpression':([141,],[178,]),'doCompExpression':([142,],[179,]),'doExpression':([143,],[180,]),'doTerm':([144,],[181,]),'addConstantBool':([149,150,],[186,187,]),'doIF':([154,333,],[190,335,]),'auxReturn':([157,],[192,]),'checkParams':([169,195,196,197,198,199,200,201,202,],[206,243,244,245,246,247,248,249,250,]),'checkType':([172,],[207,]),'multipleWrite':([175,176,],[210,213,]),'auxLogicExpression':([178,],[214,]),'auxExp':([179,],[218,]),'exp2Aux':([180,],[226,]),'auxTerm':([181,],[230,]),'doReading':([189,],[238,]),'doWhile':([191,],[240,]),'doReturn':([193,],[242,]),'doAssign':([204,330,],[251,332,]),'multipleArguments':([207,],[254,]),'multipleRead':([238,],[274,]),'removeParenthesis':([252,257,322,],[289,292,327,]),'doGoSub':([253,],[290,]),'else':([277,337,],[309,338,]),'doGoSubS':([280,281,282,283,284,285,286,287,],[313,314,315,316,317,318,319,320,]),'endIF':([309,338,],[323,339,]),'doElse':([310,],[324,]),'endWhile':([312,],[325,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_main","S'",1,None,None,None),
  ('program_main -> BTSProgam CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram endPrint','program_main',16,'p_mainFunction','parser.py',57),
  ('globalVariables -> vars addMemoryInfo','globalVariables',2,'p_globalVariables','parser.py',62),
  ('globalVariables -> empty','globalVariables',1,'p_globalVariables','parser.py',63),
  ('globalFunctions -> funcs','globalFunctions',1,'p_globalFunctions','parser.py',68),
  ('globalFunctions -> empty','globalFunctions',1,'p_globalFunctions','parser.py',69),
  ('vars -> auxVars','vars',1,'p_vars','parser.py',75),
  ('auxVars -> VAR type vars_type_single','auxVars',3,'p_auxVars','parser.py',80),
  ('auxVars -> VAR type vars_type_array','auxVars',3,'p_auxVars','parser.py',81),
  ('auxVars -> empty','auxVars',1,'p_auxVars','parser.py',82),
  ('vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single','vars_type_single',4,'p_vars_type_single','parser.py',87),
  ('vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars','vars_type_single',4,'p_vars_type_single','parser.py',88),
  ('vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array','vars_type_array',8,'p_vars_type_array','parser.py',93),
  ('vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars','vars_type_array',8,'p_vars_type_array','parser.py',94),
  ('funcs -> funcs_aux globalFunctions','funcs',2,'p_funcs','parser.py',100),
  ('funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',105),
  ('funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',106),
  ('params -> auxParams','params',1,'p_params','parser.py',111),
  ('params -> empty','params',1,'p_params','parser.py',112),
  ('auxParams -> type CTE_ID addParam multipleParams','auxParams',4,'p_auxParams','parser.py',117),
  ('auxParams -> type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams','auxParams',7,'p_auxParams','parser.py',118),
  ('multipleParams -> COMMA auxParams','multipleParams',2,'p_multipleParams','parser.py',123),
  ('multipleParams -> empty','multipleParams',1,'p_multipleParams','parser.py',124),
  ('funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET','funcBody',3,'p_funcBody','parser.py',129),
  ('auxFuncBody -> vars statements auxFuncBody','auxFuncBody',3,'p_auxFuncBody','parser.py',134),
  ('auxFuncBody -> statements auxFuncBody','auxFuncBody',2,'p_auxFuncBody','parser.py',135),
  ('auxFuncBody -> vars','auxFuncBody',1,'p_auxFuncBody','parser.py',136),
  ('auxFuncBody -> empty','auxFuncBody',1,'p_auxFuncBody','parser.py',137),
  ('type -> INT setCurrentType','type',2,'p_type','parser.py',149),
  ('type -> FLOAT setCurrentType','type',2,'p_type','parser.py',150),
  ('type -> BOOL setCurrentType','type',2,'p_type','parser.py',151),
  ('type -> STRING setCurrentType','type',2,'p_type','parser.py',152),
  ('statements -> assignment','statements',1,'p_statements','parser.py',158),
  ('statements -> writting','statements',1,'p_statements','parser.py',159),
  ('statements -> reading','statements',1,'p_statements','parser.py',160),
  ('statements -> if','statements',1,'p_statements','parser.py',161),
  ('statements -> while','statements',1,'p_statements','parser.py',162),
  ('statements -> auxFuncCall','statements',1,'p_statements','parser.py',163),
  ('statements -> return','statements',1,'p_statements','parser.py',164),
  ('assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',7,'p_assignment','parser.py',170),
  ('assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',12,'p_assignment','parser.py',171),
  ('writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON','writting',5,'p_writting','parser.py',177),
  ('auxWritting -> logicExpression doWrite multipleWrite','auxWritting',3,'p_auxWritting','parser.py',182),
  ('auxWritting -> CTE_STRING doWriteString multipleWrite','auxWritting',3,'p_auxWritting','parser.py',183),
  ('multipleWrite -> COMMA auxWritting','multipleWrite',2,'p_multipleWrite','parser.py',188),
  ('multipleWrite -> empty','multipleWrite',1,'p_multipleWrite','parser.py',189),
  ('reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON','reading',5,'p_reading','parser.py',195),
  ('auxReading -> CTE_ID addOperand doReading multipleRead','auxReading',4,'p_auxReading','parser.py',200),
  ('multipleRead -> COMMA auxReading','multipleRead',2,'p_multipleRead','parser.py',205),
  ('multipleRead -> empty','multipleRead',1,'p_multipleRead','parser.py',206),
  ('logicExpression -> exp doLogicExpression auxLogicExpression','logicExpression',3,'p_logicExpression','parser.py',212),
  ('auxLogicExpression -> AND addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',217),
  ('auxLogicExpression -> OR addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',218),
  ('auxLogicExpression -> empty','auxLogicExpression',1,'p_auxLogicExpression','parser.py',219),
  ('exp -> exp2 doCompExpression auxExp','exp',3,'p_exp','parser.py',224),
  ('auxExp -> GREATER_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',229),
  ('auxExp -> GREATER_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',230),
  ('auxExp -> LESS_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',231),
  ('auxExp -> LESS_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',232),
  ('auxExp -> NOT_EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',233),
  ('auxExp -> EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',234),
  ('auxExp -> empty','auxExp',1,'p_auxExp','parser.py',235),
  ('exp2 -> term doExpression exp2Aux','exp2',3,'p_exp2','parser.py',240),
  ('exp2Aux -> PLUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',245),
  ('exp2Aux -> MINUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',246),
  ('exp2Aux -> empty','exp2Aux',1,'p_exp2Aux','parser.py',247),
  ('term -> factor doTerm auxTerm','term',3,'p_term','parser.py',253),
  ('auxTerm -> TIMES addOperator term','auxTerm',3,'p_auxTerm','parser.py',258),
  ('auxTerm -> DIV addOperator term','auxTerm',3,'p_auxTerm','parser.py',259),
  ('auxTerm -> MOD addOperator term','auxTerm',3,'p_auxTerm','parser.py',260),
  ('auxTerm -> EXP addOperator term','auxTerm',3,'p_auxTerm','parser.py',261),
  ('auxTerm -> empty','auxTerm',1,'p_auxTerm','parser.py',262),
  ('factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis','factor',5,'p_factor','parser.py',268),
  ('factor -> constants','factor',1,'p_factor','parser.py',269),
  ('constants -> CTE_ID addOperand','constants',2,'p_constants','parser.py',274),
  ('constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis','constants',7,'p_constants','parser.py',275),
  ('constants -> CTE_INT addConstantOperand','constants',2,'p_constants','parser.py',276),
  ('constants -> CTE_FLOAT addConstantOperand','constants',2,'p_constants','parser.py',277),
  ('constants -> CTE_STRING addConstantOperand','constants',2,'p_constants','parser.py',278),
  ('constants -> TRUE addConstantBool','constants',2,'p_constants','parser.py',279),
  ('constants -> FALSE addConstantBool','constants',2,'p_constants','parser.py',280),
  ('constants -> functionCall','constants',1,'p_constants','parser.py',281),
  ('if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','if',8,'p_if','parser.py',287),
  ('else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','else',10,'p_else','parser.py',292),
  ('else -> ELSE doElse funcBody','else',3,'p_else','parser.py',293),
  ('else -> empty','else',1,'p_else','parser.py',294),
  ('while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile','while',8,'p_while','parser.py',300),
  ('functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub','functionCall',7,'p_functionCall','parser.py',306),
  ('functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',307),
  ('functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',308),
  ('functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',309),
  ('functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',310),
  ('functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',311),
  ('functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',312),
  ('functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',313),
  ('functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',314),
  ('auxFuncCall -> functionCall SEMI_COLON','auxFuncCall',2,'p_auxFuncCall','parser.py',319),
  ('arguments -> auxArguments','arguments',1,'p_arguments','parser.py',324),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',325),
  ('auxArguments -> logicExpression checkType multipleArguments','auxArguments',3,'p_auxArguments','parser.py',330),
  ('multipleArguments -> COMMA auxArguments','multipleArguments',2,'p_multipleArguments','parser.py',335),
  ('multipleArguments -> empty','multipleArguments',1,'p_multipleArguments','parser.py',336),
  ('return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON','return',6,'p_return','parser.py',342),
  ('auxReturn -> logicExpression doReturn','auxReturn',2,'p_auxReturn','parser.py',347),
  ('auxReturn -> empty','auxReturn',1,'p_auxReturn','parser.py',348),
  ('startup -> <empty>','startup',0,'p_startup','parser.py',371),
  ('setMain -> <empty>','setMain',0,'p_setMain','parser.py',382),
  ('endProgram -> <empty>','endProgram',0,'p_endProgram','parser.py',388),
  ('endPrint -> <empty>','endPrint',0,'p_endPrint','parser.py',395),
  ('saveFuncID -> <empty>','saveFuncID',0,'p_saveFuncID','parser.py',412),
  ('addParam -> <empty>','addParam',0,'p_addParam','parser.py',440),
  ('addMemoryInfo -> <empty>','addMemoryInfo',0,'p_addMemoryInfo','parser.py',471),
  ('endFunction -> <empty>','endFunction',0,'p_endFunction','parser.py',479),
  ('saveVariableID -> <empty>','saveVariableID',0,'p_saveVariableID','parser.py',499),
  ('saveArray -> <empty>','saveArray',0,'p_saveArray','parser.py',525),
  ('setCurrentType -> <empty>','setCurrentType',0,'p_setCurrentType','parser.py',565),
  ('addOperand -> <empty>','addOperand',0,'p_addOperand','parser.py',571),
  ('addConstantOperand -> <empty>','addConstantOperand',0,'p_addConstantOperand','parser.py',629),
  ('addConstantBool -> <empty>','addConstantBool',0,'p_addConstantBool','parser.py',653),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','parser.py',664),
  ('addParenthesis -> <empty>','addParenthesis',0,'p_addParenthesis','parser.py',671),
  ('removeParenthesis -> <empty>','removeParenthesis',0,'p_removeParenthesis','parser.py',677),
  ('doLogicExpression -> <empty>','doLogicExpression',0,'p_doLogicExpression','parser.py',684),
  ('doCompExpression -> <empty>','doCompExpression',0,'p_doCompExpression','parser.py',711),
  ('doExpression -> <empty>','doExpression',0,'p_doExpression','parser.py',738),
  ('doTerm -> <empty>','doTerm',0,'p_doTerm','parser.py',765),
  ('doAssign -> <empty>','doAssign',0,'p_doAssign','parser.py',792),
  ('doWrite -> <empty>','doWrite',0,'p_doWrite','parser.py',811),
  ('doWriteString -> <empty>','doWriteString',0,'p_doWriteString','parser.py',821),
  ('doReading -> <empty>','doReading',0,'p_doReading','parser.py',831),
  ('doIF -> <empty>','doIF',0,'p_doIF','parser.py',842),
  ('endIF -> <empty>','endIF',0,'p_endIF','parser.py',857),
  ('doElse -> <empty>','doElse',0,'p_doElse','parser.py',865),
  ('doWhile -> <empty>','doWhile',0,'p_doWhile','parser.py',877),
  ('endWhile -> <empty>','endWhile',0,'p_endWhile','parser.py',892),
  ('addCondStart -> <empty>','addCondStart',0,'p_addCondStart','parser.py',903),
  ('doFuncCall -> <empty>','doFuncCall',0,'p_doFunCall','parser.py',910),
  ('setVoidType -> <empty>','setVoidType',0,'p_setVoidType','parser.py',944),
  ('checkParams -> <empty>','checkParams',0,'p_checkParams','parser.py',948),
  ('checkType -> <empty>','checkType',0,'p_checkType','parser.py',956),
  ('doReturn -> <empty>','doReturn',0,'p_doReturn','parser.py',972),
  ('doGoSub -> <empty>','doGoSub',0,'p_doGoSub','parser.py',987),
  ('doGoSubS -> <empty>','doGoSubS',0,'p_doGoSubS','parser.py',1008),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1033),
]
