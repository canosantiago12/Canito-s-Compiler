
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BINOMIAL BOOL BTSProgram CHISQUARE COMMA COMPARE CTE_FLOAT CTE_ID CTE_INT CTE_STRING DIV ELSE EQUAL EQUALS EXP EXPONENTIAL FALSE FLOAT FUNC GREATER_EQUAL_THAN GREATER_THAN IF INT LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PAREN LESS_EQUAL_THAN LESS_THAN LOGISTIC MAIN MINUS MOD NORMAL NOT_EQUALS OR PLUS POISSON PRINT READ_INPUT RETURN RETURN_SIGN RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PAREN SEMI_COLON STRING TIMES TRUE UNIFORM VAR WHILE\n    program_main : BTSProgram CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram\n    \n    globalVariables : vars addMemoryInfo\n                    | empty\n    \n    globalFunctions : funcs\n                    | empty\n    \n    vars : auxVars\n    \n    auxVars : VAR type vars_type_single\n            | VAR type vars_type_array\n            | empty\n    \n    vars_type_single : CTE_ID saveVariableID COMMA vars_type_single\n                     | CTE_ID saveVariableID SEMI_COLON auxVars\n    \n    vars_type_array : CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array\n                    | CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars\n    \n    funcs : funcs_aux globalFunctions\n    \n    funcs_aux : FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n              | FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction\n    \n    params : auxParams\n          | empty\n    \n    auxParams : type CTE_ID addParam multipleParams\n              | type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams\n    \n    multipleParams : COMMA auxParams\n                   | empty\n    \n    funcBody : LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET\n    \n    auxFuncBody : vars statements auxFuncBody\n                | statements auxFuncBody\n                | vars\n                | empty\n    \n    type : INT setCurrentType\n         | FLOAT setCurrentType\n         | BOOL setCurrentType\n         | STRING setCurrentType\n    \n    statements : assignment\n               | writting\n               | reading\n               | if\n               | while\n               | auxFuncCall\n               | return\n    \n    assignment : CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON\n               | CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON\n    \n    writting : PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON\n    \n    auxWritting : logicExpression doWrite multipleWrite\n                | CTE_STRING doWriteString multipleWrite\n    \n    multipleWrite : COMMA auxWritting\n                  | empty\n    \n    reading : READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON\n    \n    auxReading : CTE_ID addOperand doReading multipleRead\n    \n    multipleRead : COMMA auxReading\n                 | empty\n    \n    logicExpression : exp doLogicExpression auxLogicExpression\n    \n    auxLogicExpression : AND addOperator logicExpression\n                       | OR addOperator logicExpression\n                       | empty\n    \n    exp : exp2 doCompExpression auxExp\n    \n    auxExp : GREATER_THAN addOperator exp\n           | GREATER_EQUAL_THAN addOperator exp\n           | LESS_THAN addOperator exp\n           | LESS_EQUAL_THAN addOperator exp\n           | NOT_EQUALS addOperator exp\n           | EQUALS addOperator exp\n           | empty\n    \n    exp2 : term doExpression exp2Aux\n    \n    exp2Aux : PLUS addOperator exp2\n            | MINUS addOperator exp2\n            | empty\n    \n    term : factor doTerm auxTerm\n    \n    auxTerm : TIMES addOperator term\n            | DIV addOperator term\n            | MOD addOperator term\n            | EXP addOperator term\n            | empty\n    \n    factor : LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis\n           | constants\n    \n    constants : CTE_ID addOperand\n              | CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis\n              | CTE_INT addConstantOperand\n              | CTE_FLOAT addConstantOperand\n              | CTE_STRING addConstantOperand\n              | TRUE addConstantBool\n              | FALSE addConstantBool\n              | functionCall\n    \n    if : IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n    \n    else : ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF\n         | ELSE doElse funcBody\n         | empty\n    \n    while : WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile\n    \n    functionCall : CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub\n                 | BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n                 | CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS\n    \n    auxFuncCall : functionCall SEMI_COLON\n    \n    arguments : auxArguments\n              | empty\n    \n    auxArguments : logicExpression checkType multipleArguments\n    \n    multipleArguments : COMMA auxArguments\n                      | empty\n    \n    return : RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON\n    \n    auxReturn : logicExpression doReturn\n              | empty\n    startup :setMain :endProgram :saveFuncID :addParam :addMemoryInfo :endFunction :saveVariableID :saveArray :setCurrentType :addOperand :addConstantOperand :addConstantBool :addOperator :addParenthesis :removeParenthesis :doLogicExpression :doCompExpression :doExpression :doTerm :doAssign :doWrite :doWriteString :doReading :doIF :endIF :doElse :doWhile :endWhile :addCondStart :doFuncCall :setVoidType :checkParams :checkType :doReturn :doGoSub :doGoSubS :empty :'
    
_lr_action_items = {'BTSProgram':([0,],[2,]),'$end':([1,64,71,107,108,],[0,-111,-107,-1,-23,]),'CTE_ID':([2,9,15,17,18,19,20,21,24,26,27,29,30,31,32,41,42,48,49,50,53,65,69,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,115,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,274,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[3,-6,25,28,-114,-114,-114,-114,34,-7,-8,-28,-29,-30,-31,47,-142,-10,-11,-9,60,83,104,-142,83,83,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,83,-119,145,152,145,-134,-96,-118,145,145,-119,145,145,145,145,145,145,145,145,145,145,145,145,-119,-41,145,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,145,-46,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,152,-142,-102,-39,-130,-85,-133,-118,-82,-86,145,-84,145,-40,-142,-130,-83,]),'SEMI_COLON':([3,4,28,36,47,58,63,88,140,141,142,143,144,145,146,147,148,149,150,154,173,176,177,178,179,180,181,183,184,185,186,187,203,213,216,217,224,225,228,229,234,240,250,252,256,279,280,281,282,283,284,285,286,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,329,331,],[-105,5,-112,42,-112,-113,70,118,-121,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,208,-78,-142,-142,-142,-142,-74,-76,-77,-79,-80,236,-125,-50,-53,-54,-61,-62,-65,-66,-71,278,287,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,-125,333,]),'FUNC':([5,6,7,8,9,14,16,26,27,42,48,49,50,67,68,70,102,103,105,106,108,130,131,],[-142,15,-110,-3,-6,15,-2,-7,-8,-142,-10,-11,-9,-110,-110,-142,-111,-111,-12,-13,-23,-15,-16,]),'MAIN':([5,6,7,8,9,11,12,13,14,16,23,26,27,42,48,49,50,67,68,70,102,103,105,106,108,130,131,],[-142,-142,-110,-3,-6,22,-4,-5,-142,-2,-14,-7,-8,-142,-10,-11,-9,-110,-110,-142,-111,-111,-12,-13,-23,-15,-16,]),'VAR':([5,42,65,70,74,76,77,78,79,80,81,82,108,109,118,208,236,276,278,287,308,310,311,322,324,328,333,336,337,338,],[10,10,10,10,10,-32,-33,-34,-35,-36,-37,-38,-23,10,-96,-41,-46,-142,-102,-39,-130,-85,-133,-82,-86,-84,-40,-142,-130,-83,]),'PRINT':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,208,236,276,278,287,308,310,311,322,324,328,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,84,-142,84,84,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,84,-96,-41,-46,-142,-102,-39,-130,-85,-133,-82,-86,-84,-40,-142,-130,-83,]),'READ_INPUT':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,208,236,276,278,287,308,310,311,322,324,328,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,85,-142,85,85,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,85,-96,-41,-46,-142,-102,-39,-130,-85,-133,-82,-86,-84,-40,-142,-130,-83,]),'IF':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,208,236,276,278,287,308,309,310,311,322,323,324,328,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,86,-142,86,86,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,86,-96,-41,-46,-142,-102,-39,-130,-131,-85,-133,-82,327,-86,-84,-40,-142,-130,-83,]),'WHILE':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,208,236,276,278,287,308,310,311,322,324,328,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,87,-142,87,87,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,87,-96,-41,-46,-142,-102,-39,-130,-85,-133,-82,-86,-84,-40,-142,-130,-83,]),'RETURN':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,118,208,236,276,278,287,308,310,311,322,324,328,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,89,-142,89,89,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,89,-96,-41,-46,-142,-102,-39,-130,-85,-133,-82,-86,-84,-40,-142,-130,-83,]),'BINOMIAL':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,90,-142,90,90,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,90,-119,90,90,-134,-96,-118,90,90,-119,90,90,90,90,90,90,90,90,90,90,90,90,-119,-41,90,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,90,-46,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-142,-102,-39,-130,-85,-133,-118,-82,-86,90,-84,90,-40,-142,-130,-83,]),'POISSON':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,91,-142,91,91,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,91,-119,91,91,-134,-96,-118,91,91,-119,91,91,91,91,91,91,91,91,91,91,91,91,-119,-41,91,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,91,-46,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-142,-102,-39,-130,-85,-133,-118,-82,-86,91,-84,91,-40,-142,-130,-83,]),'COMPARE':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,92,-142,92,92,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,92,-119,92,92,-134,-96,-118,92,92,-119,92,92,92,92,92,92,92,92,92,92,92,92,-119,-41,92,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,92,-46,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-142,-102,-39,-130,-85,-133,-118,-82,-86,92,-84,92,-40,-142,-130,-83,]),'NORMAL':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,93,-142,93,93,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,93,-119,93,93,-134,-96,-118,93,93,-119,93,93,93,93,93,93,93,93,93,93,93,93,-119,-41,93,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,93,-46,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-142,-102,-39,-130,-85,-133,-118,-82,-86,93,-84,93,-40,-142,-130,-83,]),'UNIFORM':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,94,-142,94,94,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,94,-119,94,94,-134,-96,-118,94,94,-119,94,94,94,94,94,94,94,94,94,94,94,94,-119,-41,94,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,94,-46,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-142,-102,-39,-130,-85,-133,-118,-82,-86,94,-84,94,-40,-142,-130,-83,]),'LOGISTIC':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,95,-142,95,95,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,95,-119,95,95,-134,-96,-118,95,95,-119,95,95,95,95,95,95,95,95,95,95,95,95,-119,-41,95,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,95,-46,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-142,-102,-39,-130,-85,-133,-118,-82,-86,95,-84,95,-40,-142,-130,-83,]),'EXPONENTIAL':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,96,-142,96,96,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,96,-119,96,96,-134,-96,-118,96,96,-119,96,96,96,96,96,96,96,96,96,96,96,96,-119,-41,96,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,96,-46,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-142,-102,-39,-130,-85,-133,-118,-82,-86,96,-84,96,-40,-142,-130,-83,]),'CHISQUARE':([9,26,27,42,48,49,50,65,70,73,74,75,76,77,78,79,80,81,82,105,106,108,109,112,114,116,117,118,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,208,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,236,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,276,278,287,308,310,311,320,322,324,325,328,330,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,97,-142,97,97,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,97,-119,97,97,-134,-96,-118,97,97,-119,97,97,97,97,97,97,97,97,97,97,97,97,-119,-41,97,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,97,-46,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-142,-102,-39,-130,-85,-133,-118,-82,-86,97,-84,97,-40,-142,-130,-83,]),'RIGHT_CURLY_BRACKET':([9,26,27,42,48,49,50,65,70,72,73,74,75,76,77,78,79,80,81,82,105,106,108,109,110,118,132,208,236,276,278,287,308,310,311,322,324,328,333,336,337,338,],[-6,-7,-8,-142,-10,-11,-9,-142,-142,108,-26,-142,-9,-32,-33,-34,-35,-36,-37,-38,-12,-13,-23,-142,-25,-96,-24,-41,-46,-142,-102,-39,-130,-85,-133,-82,-86,-84,-40,-142,-130,-83,]),'INT':([10,15,45,46,100,],[18,18,18,18,18,]),'FLOAT':([10,15,45,46,100,],[19,19,19,19,19,]),'BOOL':([10,15,45,46,100,],[20,20,20,20,20,]),'STRING':([10,15,45,46,100,],[21,21,21,21,21,]),'LEFT_PAREN':([22,25,33,34,35,38,39,40,83,84,85,86,87,90,91,92,93,94,95,96,97,112,113,114,116,117,119,120,121,122,123,124,125,126,127,133,134,135,136,145,155,156,157,158,159,160,161,162,163,164,166,172,182,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,320,325,327,330,],[-108,-108,-110,-108,-136,44,45,46,-135,114,115,116,117,-135,-135,-135,-135,-135,-135,-135,-135,-119,135,136,136,-134,156,157,158,159,160,161,162,163,164,-118,136,136,-119,-135,136,136,136,136,136,136,136,136,136,136,136,136,-119,136,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,-118,136,330,136,]),'LEFT_BRACKET':([28,60,66,83,104,145,],[37,-109,99,112,37,182,]),'COMMA':([28,36,47,58,60,63,66,138,139,140,141,142,143,144,145,146,147,148,149,150,152,154,165,171,174,175,176,177,178,179,180,181,183,184,185,186,188,206,213,216,217,224,225,228,229,234,237,252,256,279,280,281,282,283,284,285,286,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-112,41,-112,-113,-109,69,100,-126,-116,-121,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-115,-116,100,-138,210,210,-78,-142,-142,-142,-142,-74,-76,-77,-79,-80,-128,254,-50,-53,-54,-61,-62,-65,-66,-71,274,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'CTE_INT':([37,99,112,114,116,117,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,320,325,330,],[43,128,-119,146,146,-134,-118,146,146,-119,146,146,146,146,146,146,146,146,146,146,146,146,-119,146,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,-118,146,146,]),'RIGHT_BRACKET':([43,51,128,140,141,142,143,144,145,146,147,148,149,150,154,167,176,177,178,179,180,181,183,184,185,186,213,216,217,224,225,228,229,234,252,256,272,279,280,281,282,283,284,285,286,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,58,165,-121,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,204,-78,-142,-142,-142,-142,-74,-76,-77,-79,-80,-50,-53,-54,-61,-62,-65,-66,-71,-140,-120,306,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'RIGHT_PAREN':([44,45,46,54,55,56,57,60,66,98,101,129,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,168,169,170,171,174,175,176,177,178,179,180,181,183,184,185,186,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,207,209,211,212,213,216,217,224,225,228,229,234,237,239,241,242,243,244,245,246,247,248,249,252,253,255,256,257,273,275,279,280,281,282,283,284,285,286,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,312,313,314,315,316,317,318,319,321,326,332,334,],[52,-142,-142,61,-17,-18,62,-109,-142,-19,-22,-21,-142,173,-126,-116,-121,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,187,-115,-129,-116,-142,-142,-142,-142,-142,-142,-142,-142,-142,-142,-137,-97,-98,-138,-142,-142,-78,-142,-142,-142,-142,-74,-76,-77,-79,-80,-128,238,-132,240,-139,-104,-137,-137,-137,-137,-137,-137,-137,-137,-20,252,-142,256,-42,-45,-43,-50,-53,-54,-61,-62,-65,-66,-71,-142,277,-103,279,280,281,282,283,284,285,286,-140,-99,-101,-120,-44,-47,-49,-141,-141,-141,-141,-141,-141,-141,-141,-87,-100,-72,-51,-52,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-115,-48,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,-129,335,]),'LEFT_CURLY_BRACKET':([52,59,61,62,238,277,309,323,335,],[-106,65,65,65,65,65,-131,65,65,]),'EQUAL':([83,111,204,251,288,],[-115,133,-115,-120,320,]),'RETURN_SIGN':([89,],[119,]),'ELSE':([108,276,336,],[-23,309,309,]),'CTE_FLOAT':([112,114,116,117,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,320,325,330,],[-119,147,147,-134,-118,147,147,-119,147,147,147,147,147,147,147,147,147,147,147,147,-119,147,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,-118,147,147,]),'CTE_STRING':([112,114,116,117,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,320,325,330,],[-119,139,154,-134,-118,154,154,-119,154,154,154,154,154,154,154,154,154,154,154,154,-119,139,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,-118,154,154,]),'TRUE':([112,114,116,117,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,320,325,330,],[-119,148,148,-134,-118,148,148,-119,148,148,148,148,148,148,148,148,148,148,148,148,-119,148,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,-118,148,148,]),'FALSE':([112,114,116,117,133,134,135,136,155,156,157,158,159,160,161,162,163,164,166,172,182,210,214,215,218,219,220,221,222,223,226,227,230,231,232,233,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,320,325,330,],[-119,149,149,-134,-118,149,149,-119,149,149,149,149,149,149,149,149,149,149,149,149,-119,149,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,-118,149,149,]),'TIMES':([139,143,144,145,146,147,148,149,150,154,176,180,181,183,184,185,186,252,256,279,280,281,282,283,284,285,286,289,291,306,312,313,314,315,316,317,318,319,321,326,],[-116,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,230,-74,-76,-77,-79,-80,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'DIV':([139,143,144,145,146,147,148,149,150,154,176,180,181,183,184,185,186,252,256,279,280,281,282,283,284,285,286,289,291,306,312,313,314,315,316,317,318,319,321,326,],[-116,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,231,-74,-76,-77,-79,-80,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'MOD':([139,143,144,145,146,147,148,149,150,154,176,180,181,183,184,185,186,252,256,279,280,281,282,283,284,285,286,289,291,306,312,313,314,315,316,317,318,319,321,326,],[-116,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,232,-74,-76,-77,-79,-80,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'EXP':([139,143,144,145,146,147,148,149,150,154,176,180,181,183,184,185,186,252,256,279,280,281,282,283,284,285,286,289,291,306,312,313,314,315,316,317,318,319,321,326,],[-116,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,233,-74,-76,-77,-79,-80,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'PLUS':([139,142,143,144,145,146,147,148,149,150,154,176,179,180,181,183,184,185,186,229,234,252,256,279,280,281,282,283,284,285,286,289,291,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,226,-142,-74,-76,-77,-79,-80,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'MINUS':([139,142,143,144,145,146,147,148,149,150,154,176,179,180,181,183,184,185,186,229,234,252,256,279,280,281,282,283,284,285,286,289,291,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,227,-142,-74,-76,-77,-79,-80,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'GREATER_THAN':([139,141,142,143,144,145,146,147,148,149,150,154,176,178,179,180,181,183,184,185,186,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,218,-142,-142,-74,-76,-77,-79,-80,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'GREATER_EQUAL_THAN':([139,141,142,143,144,145,146,147,148,149,150,154,176,178,179,180,181,183,184,185,186,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,219,-142,-142,-74,-76,-77,-79,-80,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'LESS_THAN':([139,141,142,143,144,145,146,147,148,149,150,154,176,178,179,180,181,183,184,185,186,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,220,-142,-142,-74,-76,-77,-79,-80,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'LESS_EQUAL_THAN':([139,141,142,143,144,145,146,147,148,149,150,154,176,178,179,180,181,183,184,185,186,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,221,-142,-142,-74,-76,-77,-79,-80,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'NOT_EQUALS':([139,141,142,143,144,145,146,147,148,149,150,154,176,178,179,180,181,183,184,185,186,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,222,-142,-142,-74,-76,-77,-79,-80,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'EQUALS':([139,141,142,143,144,145,146,147,148,149,150,154,176,178,179,180,181,183,184,185,186,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,223,-142,-142,-74,-76,-77,-79,-80,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'AND':([139,140,141,142,143,144,145,146,147,148,149,150,154,176,177,178,179,180,181,183,184,185,186,217,224,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,294,295,296,297,298,299,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-121,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,214,-142,-142,-142,-74,-76,-77,-79,-80,-54,-61,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),'OR':([139,140,141,142,143,144,145,146,147,148,149,150,154,176,177,178,179,180,181,183,184,185,186,217,224,225,228,229,234,252,256,279,280,281,282,283,284,285,286,289,291,294,295,296,297,298,299,300,301,302,303,304,305,306,312,313,314,315,316,317,318,319,321,326,],[-116,-121,-122,-123,-124,-73,-115,-116,-116,-117,-117,-81,-116,-78,215,-142,-142,-142,-74,-76,-77,-79,-80,-54,-61,-62,-65,-66,-71,-140,-120,-141,-141,-141,-141,-141,-141,-141,-141,-87,-72,-55,-56,-57,-58,-59,-60,-63,-64,-67,-68,-69,-70,-115,-88,-89,-90,-91,-92,-93,-94,-95,-120,-75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_main':([0,],[1,]),'startup':([3,],[4,]),'globalVariables':([5,],[6,]),'vars':([5,65,74,109,],[7,73,73,73,]),'empty':([5,6,14,42,45,46,65,66,70,74,109,135,156,157,158,159,160,161,162,163,164,165,174,175,177,178,179,180,206,237,276,336,],[8,13,13,50,56,56,75,101,50,75,75,170,193,170,170,170,170,170,170,170,170,101,211,211,216,224,228,234,255,275,310,310,]),'auxVars':([5,42,65,70,74,109,],[9,49,9,106,9,9,]),'globalFunctions':([6,14,],[11,23,]),'funcs':([6,14,],[12,12,]),'funcs_aux':([6,14,],[14,14,]),'addMemoryInfo':([7,33,67,68,],[16,38,102,103,]),'type':([10,15,45,46,100,],[17,24,53,53,53,]),'vars_type_single':([17,41,],[26,48,]),'vars_type_array':([17,69,],[27,105,]),'setCurrentType':([18,19,20,21,],[29,30,31,32,]),'saveFuncID':([22,25,34,],[33,35,39,]),'saveVariableID':([28,47,],[36,36,]),'setVoidType':([35,],[40,]),'addConstantOperand':([43,139,146,147,154,],[51,176,183,184,176,]),'params':([45,46,],[54,57,]),'auxParams':([45,46,100,],[55,55,129,]),'setMain':([52,],[59,]),'saveArray':([58,],[63,]),'funcBody':([59,61,62,238,277,323,335,],[64,67,68,276,311,328,336,]),'addParam':([60,],[66,]),'endFunction':([64,102,103,],[71,130,131,]),'auxFuncBody':([65,74,109,],[72,110,132,]),'statements':([65,73,74,109,],[74,109,74,74,]),'assignment':([65,73,74,109,],[76,76,76,76,]),'writting':([65,73,74,109,],[77,77,77,77,]),'reading':([65,73,74,109,],[78,78,78,78,]),'if':([65,73,74,109,],[79,79,79,79,]),'while':([65,73,74,109,],[80,80,80,80,]),'auxFuncCall':([65,73,74,109,],[81,81,81,81,]),'return':([65,73,74,109,],[82,82,82,82,]),'functionCall':([65,73,74,109,114,116,134,135,155,156,157,158,159,160,161,162,163,164,166,172,210,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,325,330,],[88,88,88,88,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'multipleParams':([66,165,],[98,202,]),'endProgram':([71,],[107,]),'addOperand':([83,145,152,204,306,],[111,181,188,251,321,]),'doFuncCall':([83,90,91,92,93,94,95,96,97,145,],[113,120,121,122,123,124,125,126,127,113,]),'addParenthesis':([112,136,182,],[134,172,235,]),'auxWritting':([114,210,],[137,257,]),'logicExpression':([114,116,134,135,155,156,157,158,159,160,161,162,163,164,166,172,210,235,254,258,259,325,330,],[138,153,167,171,190,192,171,171,171,171,171,171,171,171,203,207,138,272,171,292,293,329,332,]),'exp':([114,116,134,135,155,156,157,158,159,160,161,162,163,164,166,172,210,235,254,258,259,260,261,262,263,264,265,325,330,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,294,295,296,297,298,299,140,140,]),'exp2':([114,116,134,135,155,156,157,158,159,160,161,162,163,164,166,172,210,235,254,258,259,260,261,262,263,264,265,266,267,325,330,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,300,301,141,141,]),'term':([114,116,134,135,155,156,157,158,159,160,161,162,163,164,166,172,210,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,325,330,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,302,303,304,305,142,142,]),'factor':([114,116,134,135,155,156,157,158,159,160,161,162,163,164,166,172,210,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,325,330,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'constants':([114,116,134,135,155,156,157,158,159,160,161,162,163,164,166,172,210,235,254,258,259,260,261,262,263,264,265,266,267,268,269,270,271,325,330,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'auxReading':([115,274,],[151,307,]),'addCondStart':([117,],[155,]),'addOperator':([133,214,215,218,219,220,221,222,223,226,227,230,231,232,233,320,],[166,258,259,260,261,262,263,264,265,266,267,268,269,270,271,325,]),'arguments':([135,157,158,159,160,161,162,163,164,],[168,194,195,196,197,198,199,200,201,]),'auxArguments':([135,157,158,159,160,161,162,163,164,254,],[169,169,169,169,169,169,169,169,169,290,]),'doWrite':([138,],[174,]),'doWriteString':([139,],[175,]),'doLogicExpression':([140,],[177,]),'doCompExpression':([141,],[178,]),'doExpression':([142,],[179,]),'doTerm':([143,],[180,]),'addConstantBool':([148,149,],[185,186,]),'doIF':([153,332,],[189,334,]),'auxReturn':([156,],[191,]),'checkParams':([168,194,195,196,197,198,199,200,201,],[205,242,243,244,245,246,247,248,249,]),'checkType':([171,],[206,]),'multipleWrite':([174,175,],[209,212,]),'auxLogicExpression':([177,],[213,]),'auxExp':([178,],[217,]),'exp2Aux':([179,],[225,]),'auxTerm':([180,],[229,]),'doReading':([188,],[237,]),'doWhile':([190,],[239,]),'doReturn':([192,],[241,]),'doAssign':([203,329,],[250,331,]),'multipleArguments':([206,],[253,]),'multipleRead':([237,],[273,]),'removeParenthesis':([251,256,321,],[288,291,326,]),'doGoSub':([252,],[289,]),'else':([276,336,],[308,337,]),'doGoSubS':([279,280,281,282,283,284,285,286,],[312,313,314,315,316,317,318,319,]),'endIF':([308,337,],[322,338,]),'doElse':([309,],[323,]),'endWhile':([311,],[324,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_main","S'",1,None,None,None),
  ('program_main -> BTSProgram CTE_ID startup SEMI_COLON globalVariables globalFunctions MAIN saveFuncID addMemoryInfo LEFT_PAREN RIGHT_PAREN setMain funcBody endFunction endProgram','program_main',15,'p_mainFunction','parser.py',57),
  ('globalVariables -> vars addMemoryInfo','globalVariables',2,'p_globalVariables','parser.py',62),
  ('globalVariables -> empty','globalVariables',1,'p_globalVariables','parser.py',63),
  ('globalFunctions -> funcs','globalFunctions',1,'p_globalFunctions','parser.py',68),
  ('globalFunctions -> empty','globalFunctions',1,'p_globalFunctions','parser.py',69),
  ('vars -> auxVars','vars',1,'p_vars','parser.py',75),
  ('auxVars -> VAR type vars_type_single','auxVars',3,'p_auxVars','parser.py',80),
  ('auxVars -> VAR type vars_type_array','auxVars',3,'p_auxVars','parser.py',81),
  ('auxVars -> empty','auxVars',1,'p_auxVars','parser.py',82),
  ('vars_type_single -> CTE_ID saveVariableID COMMA vars_type_single','vars_type_single',4,'p_vars_type_single','parser.py',87),
  ('vars_type_single -> CTE_ID saveVariableID SEMI_COLON auxVars','vars_type_single',4,'p_vars_type_single','parser.py',88),
  ('vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray COMMA vars_type_array','vars_type_array',8,'p_vars_type_array','parser.py',93),
  ('vars_type_array -> CTE_ID LEFT_BRACKET CTE_INT addConstantOperand RIGHT_BRACKET saveArray SEMI_COLON auxVars','vars_type_array',8,'p_vars_type_array','parser.py',94),
  ('funcs -> funcs_aux globalFunctions','funcs',2,'p_funcs','parser.py',100),
  ('funcs_aux -> FUNC type CTE_ID saveFuncID LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',105),
  ('funcs_aux -> FUNC CTE_ID saveFuncID setVoidType LEFT_PAREN params RIGHT_PAREN funcBody addMemoryInfo endFunction','funcs_aux',10,'p_funcs_aux','parser.py',106),
  ('params -> auxParams','params',1,'p_params','parser.py',111),
  ('params -> empty','params',1,'p_params','parser.py',112),
  ('auxParams -> type CTE_ID addParam multipleParams','auxParams',4,'p_auxParams','parser.py',117),
  ('auxParams -> type CTE_ID addParam LEFT_BRACKET CTE_INT RIGHT_BRACKET multipleParams','auxParams',7,'p_auxParams','parser.py',118),
  ('multipleParams -> COMMA auxParams','multipleParams',2,'p_multipleParams','parser.py',123),
  ('multipleParams -> empty','multipleParams',1,'p_multipleParams','parser.py',124),
  ('funcBody -> LEFT_CURLY_BRACKET auxFuncBody RIGHT_CURLY_BRACKET','funcBody',3,'p_funcBody','parser.py',129),
  ('auxFuncBody -> vars statements auxFuncBody','auxFuncBody',3,'p_auxFuncBody','parser.py',134),
  ('auxFuncBody -> statements auxFuncBody','auxFuncBody',2,'p_auxFuncBody','parser.py',135),
  ('auxFuncBody -> vars','auxFuncBody',1,'p_auxFuncBody','parser.py',136),
  ('auxFuncBody -> empty','auxFuncBody',1,'p_auxFuncBody','parser.py',137),
  ('type -> INT setCurrentType','type',2,'p_type','parser.py',143),
  ('type -> FLOAT setCurrentType','type',2,'p_type','parser.py',144),
  ('type -> BOOL setCurrentType','type',2,'p_type','parser.py',145),
  ('type -> STRING setCurrentType','type',2,'p_type','parser.py',146),
  ('statements -> assignment','statements',1,'p_statements','parser.py',152),
  ('statements -> writting','statements',1,'p_statements','parser.py',153),
  ('statements -> reading','statements',1,'p_statements','parser.py',154),
  ('statements -> if','statements',1,'p_statements','parser.py',155),
  ('statements -> while','statements',1,'p_statements','parser.py',156),
  ('statements -> auxFuncCall','statements',1,'p_statements','parser.py',157),
  ('statements -> return','statements',1,'p_statements','parser.py',158),
  ('assignment -> CTE_ID addOperand EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',7,'p_assignment','parser.py',164),
  ('assignment -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis EQUAL addOperator logicExpression doAssign SEMI_COLON','assignment',12,'p_assignment','parser.py',165),
  ('writting -> PRINT LEFT_PAREN auxWritting RIGHT_PAREN SEMI_COLON','writting',5,'p_writting','parser.py',171),
  ('auxWritting -> logicExpression doWrite multipleWrite','auxWritting',3,'p_auxWritting','parser.py',176),
  ('auxWritting -> CTE_STRING doWriteString multipleWrite','auxWritting',3,'p_auxWritting','parser.py',177),
  ('multipleWrite -> COMMA auxWritting','multipleWrite',2,'p_multipleWrite','parser.py',182),
  ('multipleWrite -> empty','multipleWrite',1,'p_multipleWrite','parser.py',183),
  ('reading -> READ_INPUT LEFT_PAREN auxReading RIGHT_PAREN SEMI_COLON','reading',5,'p_reading','parser.py',189),
  ('auxReading -> CTE_ID addOperand doReading multipleRead','auxReading',4,'p_auxReading','parser.py',194),
  ('multipleRead -> COMMA auxReading','multipleRead',2,'p_multipleRead','parser.py',199),
  ('multipleRead -> empty','multipleRead',1,'p_multipleRead','parser.py',200),
  ('logicExpression -> exp doLogicExpression auxLogicExpression','logicExpression',3,'p_logicExpression','parser.py',206),
  ('auxLogicExpression -> AND addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',211),
  ('auxLogicExpression -> OR addOperator logicExpression','auxLogicExpression',3,'p_auxLogicExpression','parser.py',212),
  ('auxLogicExpression -> empty','auxLogicExpression',1,'p_auxLogicExpression','parser.py',213),
  ('exp -> exp2 doCompExpression auxExp','exp',3,'p_exp','parser.py',219),
  ('auxExp -> GREATER_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',224),
  ('auxExp -> GREATER_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',225),
  ('auxExp -> LESS_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',226),
  ('auxExp -> LESS_EQUAL_THAN addOperator exp','auxExp',3,'p_auxExp','parser.py',227),
  ('auxExp -> NOT_EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',228),
  ('auxExp -> EQUALS addOperator exp','auxExp',3,'p_auxExp','parser.py',229),
  ('auxExp -> empty','auxExp',1,'p_auxExp','parser.py',230),
  ('exp2 -> term doExpression exp2Aux','exp2',3,'p_exp2','parser.py',236),
  ('exp2Aux -> PLUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',241),
  ('exp2Aux -> MINUS addOperator exp2','exp2Aux',3,'p_exp2Aux','parser.py',242),
  ('exp2Aux -> empty','exp2Aux',1,'p_exp2Aux','parser.py',243),
  ('term -> factor doTerm auxTerm','term',3,'p_term','parser.py',249),
  ('auxTerm -> TIMES addOperator term','auxTerm',3,'p_auxTerm','parser.py',254),
  ('auxTerm -> DIV addOperator term','auxTerm',3,'p_auxTerm','parser.py',255),
  ('auxTerm -> MOD addOperator term','auxTerm',3,'p_auxTerm','parser.py',256),
  ('auxTerm -> EXP addOperator term','auxTerm',3,'p_auxTerm','parser.py',257),
  ('auxTerm -> empty','auxTerm',1,'p_auxTerm','parser.py',258),
  ('factor -> LEFT_PAREN addParenthesis logicExpression RIGHT_PAREN removeParenthesis','factor',5,'p_factor','parser.py',264),
  ('factor -> constants','factor',1,'p_factor','parser.py',265),
  ('constants -> CTE_ID addOperand','constants',2,'p_constants','parser.py',270),
  ('constants -> CTE_ID LEFT_BRACKET addParenthesis logicExpression RIGHT_BRACKET addOperand removeParenthesis','constants',7,'p_constants','parser.py',271),
  ('constants -> CTE_INT addConstantOperand','constants',2,'p_constants','parser.py',272),
  ('constants -> CTE_FLOAT addConstantOperand','constants',2,'p_constants','parser.py',273),
  ('constants -> CTE_STRING addConstantOperand','constants',2,'p_constants','parser.py',274),
  ('constants -> TRUE addConstantBool','constants',2,'p_constants','parser.py',275),
  ('constants -> FALSE addConstantBool','constants',2,'p_constants','parser.py',276),
  ('constants -> functionCall','constants',1,'p_constants','parser.py',277),
  ('if -> IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','if',8,'p_if','parser.py',283),
  ('else -> ELSE doElse IF LEFT_PAREN logicExpression doIF RIGHT_PAREN funcBody else endIF','else',10,'p_else','parser.py',288),
  ('else -> ELSE doElse funcBody','else',3,'p_else','parser.py',289),
  ('else -> empty','else',1,'p_else','parser.py',290),
  ('while -> WHILE LEFT_PAREN addCondStart logicExpression doWhile RIGHT_PAREN funcBody endWhile','while',8,'p_while','parser.py',296),
  ('functionCall -> CTE_ID doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSub','functionCall',7,'p_functionCall','parser.py',302),
  ('functionCall -> BINOMIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',303),
  ('functionCall -> POISSON doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',304),
  ('functionCall -> COMPARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',305),
  ('functionCall -> NORMAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',306),
  ('functionCall -> UNIFORM doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',307),
  ('functionCall -> LOGISTIC doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',308),
  ('functionCall -> EXPONENTIAL doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',309),
  ('functionCall -> CHISQUARE doFuncCall LEFT_PAREN arguments checkParams RIGHT_PAREN doGoSubS','functionCall',7,'p_functionCall','parser.py',310),
  ('auxFuncCall -> functionCall SEMI_COLON','auxFuncCall',2,'p_auxFuncCall','parser.py',315),
  ('arguments -> auxArguments','arguments',1,'p_arguments','parser.py',321),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',322),
  ('auxArguments -> logicExpression checkType multipleArguments','auxArguments',3,'p_auxArguments','parser.py',327),
  ('multipleArguments -> COMMA auxArguments','multipleArguments',2,'p_multipleArguments','parser.py',332),
  ('multipleArguments -> empty','multipleArguments',1,'p_multipleArguments','parser.py',333),
  ('return -> RETURN RETURN_SIGN LEFT_PAREN auxReturn RIGHT_PAREN SEMI_COLON','return',6,'p_return','parser.py',339),
  ('auxReturn -> logicExpression doReturn','auxReturn',2,'p_auxReturn','parser.py',344),
  ('auxReturn -> empty','auxReturn',1,'p_auxReturn','parser.py',345),
  ('startup -> <empty>','startup',0,'p_startup','parser.py',382),
  ('setMain -> <empty>','setMain',0,'p_setMain','parser.py',396),
  ('endProgram -> <empty>','endProgram',0,'p_endProgram','parser.py',403),
  ('saveFuncID -> <empty>','saveFuncID',0,'p_saveFuncID','parser.py',430),
  ('addParam -> <empty>','addParam',0,'p_addParam','parser.py',453),
  ('addMemoryInfo -> <empty>','addMemoryInfo',0,'p_addMemoryInfo','parser.py',485),
  ('endFunction -> <empty>','endFunction',0,'p_endFunction','parser.py',495),
  ('saveVariableID -> <empty>','saveVariableID',0,'p_saveVariableID','parser.py',517),
  ('saveArray -> <empty>','saveArray',0,'p_saveArray','parser.py',547),
  ('setCurrentType -> <empty>','setCurrentType',0,'p_setCurrentType','parser.py',589),
  ('addOperand -> <empty>','addOperand',0,'p_addOperand','parser.py',598),
  ('addConstantOperand -> <empty>','addConstantOperand',0,'p_addConstantOperand','parser.py',657),
  ('addConstantBool -> <empty>','addConstantBool',0,'p_addConstantBool','parser.py',682),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','parser.py',694),
  ('addParenthesis -> <empty>','addParenthesis',0,'p_addParenthesis','parser.py',702),
  ('removeParenthesis -> <empty>','removeParenthesis',0,'p_removeParenthesis','parser.py',709),
  ('doLogicExpression -> <empty>','doLogicExpression',0,'p_doLogicExpression','parser.py',716),
  ('doCompExpression -> <empty>','doCompExpression',0,'p_doCompExpression','parser.py',743),
  ('doExpression -> <empty>','doExpression',0,'p_doExpression','parser.py',770),
  ('doTerm -> <empty>','doTerm',0,'p_doTerm','parser.py',797),
  ('doAssign -> <empty>','doAssign',0,'p_doAssign','parser.py',824),
  ('doWrite -> <empty>','doWrite',0,'p_doWrite','parser.py',843),
  ('doWriteString -> <empty>','doWriteString',0,'p_doWriteString','parser.py',853),
  ('doReading -> <empty>','doReading',0,'p_doReading','parser.py',863),
  ('doIF -> <empty>','doIF',0,'p_doIF','parser.py',876),
  ('endIF -> <empty>','endIF',0,'p_endIF','parser.py',892),
  ('doElse -> <empty>','doElse',0,'p_doElse','parser.py',901),
  ('doWhile -> <empty>','doWhile',0,'p_doWhile','parser.py',915),
  ('endWhile -> <empty>','endWhile',0,'p_endWhile','parser.py',932),
  ('addCondStart -> <empty>','addCondStart',0,'p_addCondStart','parser.py',944),
  ('doFuncCall -> <empty>','doFuncCall',0,'p_doFunCall','parser.py',953),
  ('setVoidType -> <empty>','setVoidType',0,'p_setVoidType','parser.py',969),
  ('checkParams -> <empty>','checkParams',0,'p_checkParams','parser.py',975),
  ('checkType -> <empty>','checkType',0,'p_checkType','parser.py',984),
  ('doReturn -> <empty>','doReturn',0,'p_doReturn','parser.py',1002),
  ('doGoSub -> <empty>','doGoSub',0,'p_doGoSub','parser.py',1018),
  ('doGoSubS -> <empty>','doGoSubS',0,'p_doGoSubS','parser.py',1040),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1064),
]
